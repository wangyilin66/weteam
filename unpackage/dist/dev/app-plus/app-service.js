(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!**************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/main.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(/*! uni-pages */ 1);var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 22));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 42));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n_vue.default.config.productionTip = false;\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread({},\n_App.default));\n\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBbUI7QUFDbkIsd0U7QUFDQUEsYUFBSUMsTUFBSixDQUFXQyxhQUFYLEdBQTJCLEtBQTNCOztBQUVBQyxhQUFJQyxNQUFKLEdBQWEsS0FBYjs7QUFFQSxJQUFNQyxHQUFHLEdBQUcsSUFBSUwsWUFBSjtBQUNSRyxZQURRLEVBQVo7O0FBR0FFLEdBQUcsQ0FBQ0MsTUFBSiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICd1bmktcGFnZXMnO2ltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZVxyXG5cclxuQXBwLm1wVHlwZSA9ICdhcHAnXHJcblxyXG5jb25zdCBhcHAgPSBuZXcgVnVlKHtcclxuXHQuLi5BcHBcclxufSlcclxuYXBwLiRtb3VudCgpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!*****************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages.json ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}
if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
__definePage('pages/index/index', function () {return Vue.extend(__webpack_require__(/*! pages/index/index.vue?mpType=page */ 2).default);});

/***/ }),
/* 2 */
/*!****************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages/index/index.vue?mpType=page ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 3);\n/* harmony import */ var _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js&mpType=page */ 5);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQytNO0FBQy9NLGdCQUFnQix1TkFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJiZTg0YTNjJm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhZ2VzL2luZGV4L2luZGV4LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!
  \**********************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 4);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 4 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    { staticClass: _vm._$s(0, "sc", "container"), attrs: { _i: 0 } },
    [_c("Footer", { attrs: { _i: 1 } }), _c("Imview", { attrs: { _i: 2 } })],
    1
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 5 */
/*!****************************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js&mpType=page */ 6);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW10QixDQUFnQiw4dUJBQUcsRUFBQyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcyFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTYtMSFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1hcHAtbG9hZGVyXFxcXHVzaW5nLWNvbXBvbmVudHMuanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLWFwcC1sb2FkZXJcXFxcdXNpbmctY29tcG9uZW50cy5qcyFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\nvar _index = _interopRequireDefault(__webpack_require__(/*! ../../components/footer/index.vue */ 8));\nvar _index2 = _interopRequireDefault(__webpack_require__(/*! ../../components/imview/index.vue */ 14));\nvar _ajax = _interopRequireDefault(__webpack_require__(/*! @/utils/ajax.js */ 41));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //\n//\n//\n//\n//\n//\n//\nvar _default = { components: { Footer: _index.default, Imview: _index2.default }, data: function data() {return {};\n\n\n  },\n  methods: {},\n\n\n  onLoad: function onLoad() {\n    __f__(\"log\", this, \" at pages/index/index.vue:26\");\n    _ajax.default.get({\n      url: \"api/news\",\n      param: {} }).\n\n\n    then(function (res) {\n\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvaW5kZXgvaW5kZXgudnVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBLG1GOzs7Ozs7O2VBQ0EsRUFDQSxjQUNBLHNCQURBLEVBRUEsdUJBRkEsRUFEQSxFQUtBLElBTEEsa0JBS0EsQ0FDQTs7O0FBR0EsR0FUQTtBQVVBLGFBVkE7OztBQWFBLFFBYkEsb0JBYUE7QUFDQTtBQUNBO0FBQ0EscUJBREE7QUFFQSxlQUZBOzs7QUFLQSxRQUxBLENBS0E7O0FBRUEsS0FQQTtBQVFBLEdBdkJBLEUiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuXHQ8dmlldyBjbGFzcz1cImNvbnRhaW5lclwiPlxyXG5cdFx0PEZvb3Rlcj48L0Zvb3Rlcj5cclxuXHRcdDxJbXZpZXc+PC9JbXZpZXc+XHJcblx0PC92aWV3PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRpbXBvcnQgRm9vdGVyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9vdGVyL2luZGV4LnZ1ZSc7XHJcblx0aW1wb3J0IEltdmlldyBmcm9tICcuLi8uLi9jb21wb25lbnRzL2ltdmlldy9pbmRleC52dWUnO1xyXG4gICAgaW1wb3J0ICRhamF4ICBmcm9tICdAL3V0aWxzL2FqYXguanMnO1xyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdGNvbXBvbmVudHM6e1xyXG5cdFx0XHRGb290ZXIsXHJcblx0XHRcdEltdmlldyxcclxuXHRcdH0sXHJcblx0XHRkYXRhKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdG1ldGhvZHM6IHtcclxuICAgICAgICAgIFxyXG5cdFx0fSxcclxuXHRcdG9uTG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKHRoaXMpO1xyXG5cdFx0JGFqYXguZ2V0KHtcclxuXHRcdFx0dXJsOiBgYXBpL25ld3NgLFxyXG5cdFx0XHRwYXJhbToge1xyXG5cdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fSkudGhlbigocmVzKSA9PiB7XHJcblx0XHRcdFx0XHJcblx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5cdC5jb250YWluZXIge1xyXG5cdFx0cGFkZGluZzogMjBweDtcclxuXHRcdGZvbnQtc2l6ZTogMTRweDtcclxuXHRcdGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG5cdH1cclxuPC9zdHlsZT5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---'
      } catch (e) {
        v = '[object object]'
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 8 */
/*!**********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/footer/index.vue ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=35144f19& */ 9);\n/* harmony import */ var _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js& */ 11);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"components/footer/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBa0g7QUFDbEg7QUFDeUQ7QUFDTDs7O0FBR3BEO0FBQytNO0FBQy9NLGdCQUFnQix1TkFBVTtBQUMxQixFQUFFLDJFQUFNO0FBQ1IsRUFBRSxnRkFBTTtBQUNSLEVBQUUseUZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM1MTQ0ZjE5JlwiXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImNvbXBvbmVudHMvZm9vdGVyL2luZGV4LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!*****************************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/footer/index.vue?vue&type=template&id=35144f19& ***!
  \*****************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=35144f19& */ 10);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_35144f19___WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 10 */
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/footer/index.vue?vue&type=template&id=35144f19& ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    { staticClass: _vm._$s(0, "sc", "wefooter"), attrs: { _i: 0 } },
    _vm._l(_vm._$s(1, "f", { forItems: _vm.footerlist }), function(
      item,
      index,
      $20,
      $30
    ) {
      return _c(
        "view",
        {
          key: _vm._$s(1, "f", { forIndex: $20, key: index }),
          attrs: { _i: "1-" + $30 },
          on: {
            click: function($event) {
              return _vm.tosay(item)
            }
          }
        },
        [_vm._v(_vm._$s("1-" + $30, "t0-0", _vm._s(item)))]
      )
    }),
    0
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 11 */
/*!***********************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/footer/index.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js& */ 12);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXdzQixDQUFnQixtdUJBQUcsRUFBQyIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/footer/index.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default =\n\n{\n  name: 'wefooter',\n  data: function data() {\n    return {\n      footerlist: [1, 2, 3, 4] };\n\n  },\n  methods: {\n    tosay: function tosay(e) {\n      __f__(\"log\", e, \" at components/footer/index.vue:23\");\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9mb290ZXIvaW5kZXgudnVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBLGtCQURBO0FBRUEsTUFGQSxrQkFFQTtBQUNBO0FBQ0EsOEJBREE7O0FBR0EsR0FOQTtBQU9BO0FBQ0EsU0FEQSxpQkFDQSxDQURBLEVBQ0E7QUFDQTtBQUNBLEtBSEEsRUFQQSxFIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG5cdDx2aWV3IGNsYXNzPVwid2Vmb290ZXJcIj5cclxuXHRcdFxyXG5cdFx0PHZpZXcgY2xhc3M9XCJcIiB2LW9uOnRhcD1cInRvc2F5KGl0ZW0pXCIgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gZm9vdGVybGlzdFwiIDprZXk9XCJpbmRleFwiID5cclxuXHRcdHt7aXRlbX19XHJcblx0XHQ8L3ZpZXc+XHJcblx0XHRcclxuXHRcdDwvdmlldz5cclxuXHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdFxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6J3dlZm9vdGVyJyxcclxuXHRcdGRhdGEoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0Zm9vdGVybGlzdDpbMSwyLDMsNF1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdG1ldGhvZHM6IHtcclxuICAgICAgICAgdG9zYXkoZSl7XHJcblx0XHRcdGNvbnNvbGUubG9nKGUpO1x0ICAgICAgICAgIFxyXG5cdFx0IH1cclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG5cdC53ZWZvb3RlcntcclxuXHRcdHBvc2l0aW9uOiBmaXhlZDtcclxuXHRcdGxlZnQ6IDA7XHJcblx0XHRib3R0b206IDA7XHJcblx0XHR3aWR0aDogMTAwdnc7XHJcblx0XHRoZWlnaHQ6IDgwcHg7XHJcblx0XHRkaXNwbGF5OiBmbGV4O1xyXG5cdH1cclxuXHQud2Vmb290ZXIgdmlld3tcclxuXHRcdC8qIHdpZHRoOiAyNXZ3OyAqL1xyXG5cdFx0ZmxleDogMTtcclxuXHRcdGhlaWdodDogODBweDtcclxuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHRcdGxpbmUtaGVpZ2h0OiA4MHB4O1xyXG5cdFx0Ym9yZGVyOjFweCBzb2xpZCBwaW5rO1xyXG5cdH1cclxuPC9zdHlsZT5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 14 */
/*!**********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/imview/index.vue ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=080c6472& */ 15);\n/* harmony import */ var _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js& */ 17);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"components/imview/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBa0g7QUFDbEg7QUFDeUQ7QUFDTDs7O0FBR3BEO0FBQytNO0FBQy9NLGdCQUFnQix1TkFBVTtBQUMxQixFQUFFLDJFQUFNO0FBQ1IsRUFBRSxnRkFBTTtBQUNSLEVBQUUseUZBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50cyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wODBjNjQ3MiZcIlxudmFyIHJlbmRlcmpzXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxydW50aW1lXFxcXGNvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsLFxuICBmYWxzZSxcbiAgY29tcG9uZW50cyxcbiAgcmVuZGVyanNcbilcblxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJjb21wb25lbnRzL2ltdmlldy9pbmRleC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!*****************************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/imview/index.vue?vue&type=template&id=080c6472& ***!
  \*****************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=080c6472& */ 16);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_080c6472___WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 16 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/imview/index.vue?vue&type=template&id=080c6472& ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("view")
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 17 */
/*!***********************************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/imview/index.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js& */ 18);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXdzQixDQUFnQixtdUJBQUcsRUFBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/components/imview/index.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\nvar _timJsSdk = _interopRequireDefault(__webpack_require__(/*! tim-js-sdk */ 19));\nvar _cosJsSdkV = _interopRequireDefault(__webpack_require__(/*! cos-js-sdk-v5 */ 23));\nvar _GenerateTestUserSig = __webpack_require__(/*! utils/GenerateTestUserSig.js */ 40);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //\n//\n//\n//\n//\n//\nvar _default = { data: function data() {return {};},\n  methods: {},\n\n\n  created: function created() {\n\n    var options = {\n      SDKAppID: 1400387972 // 接入时需要将0替换为您的即时通信 IM 应用的 SDKAppID\n    };\n    // 创建 SDK 实例，`TIM.create()`方法对于同一个 `SDKAppID` 只会返回同一份实例\n    var tim = _timJsSdk.default.create(options); // SDK 实例通常用 tim 表示\n\n    // 设置 SDK 日志输出级别，详细分级请参见 setLogLevel 接口的说明\n    tim.setLogLevel(0); // 普通级别，日志量较多，接入时建议使用\n    //tim.setLogLevel(1); // release 级别，SDK 输出关键信息，生产环境时建议使用\n\n    // 注册 COS SDK 插件\n    tim.registerPlugin({ 'cos-js-sdk': _cosJsSdkV.default });\n\n\n    // console.log(genTestUserSig());\n\n    // tim.login({userID: 'user2', userSig: ''}); \n    //----------------------------------------------------\n\n    // 监听事件，例如：\n    tim.on(_timJsSdk.default.EVENT.SDK_READY, function (event) {\n      // 收到离线消息和会话列表同步完毕通知，接入侧可以调用 sendMessage 等需要鉴权的接口\n      // event.name - TIM.EVENT.SDK_READY\n    });\n\n\n    tim.on(_timJsSdk.default.EVENT.MESSAGE_RECEIVED, function (event) {\n      // 收到推送的单聊、群聊、群提示、群系统通知的新消息，可通过遍历 event.data 获取消息列表数据并渲染到页面\n      // event.name - TIM.EVENT.MESSAGE_RECEIVED\n      // event.data - 存储 Message 对象的数组 - [Message]\n    });\n\n    tim.on(_timJsSdk.default.EVENT.MESSAGE_REVOKED, function (event) {\n      // 收到消息被撤回的通知\n      // event.name - TIM.EVENT.MESSAGE_REVOKED\n      // event.data - 存储 Message 对象的数组 - [Message] - 每个 Message 对象的 isRevoked 属性值为 true\n    });\n\n    tim.on(_timJsSdk.default.EVENT.CONVERSATION_LIST_UPDATED, function (event) {\n      // 收到会话列表更新通知，可通过遍历 event.data 获取会话列表数据并渲染到页面\n      // event.name - TIM.EVENT.CONVERSATION_LIST_UPDATED\n      // event.data - 存储 Conversation 对象的数组 - [Conversation]\n    });\n\n    tim.on(_timJsSdk.default.EVENT.GROUP_LIST_UPDATED, function (event) {\n      // 收到群组列表更新通知，可通过遍历 event.data 获取群组列表数据并渲染到页面\n      // event.name - TIM.EVENT.GROUP_LIST_UPDATED\n      // event.data - 存储 Group 对象的数组 - [Group]\n    });\n\n    tim.on(_timJsSdk.default.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED, function (event) {\n      // 收到新的群系统通知\n      // event.name - TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED\n      // event.data.type - 群系统通知的类型，详情请参见 GroupSystemNoticePayload 的 operationType 枚举值说明\n      // event.data.message - Message 对象，可将 event.data.message.content 渲染到到页面\n    });\n\n    tim.on(_timJsSdk.default.EVENT.PROFILE_UPDATED, function (event) {\n      // 收到自己或好友的资料变更通知\n      // event.name - TIM.EVENT.PROFILE_UPDATED\n      // event.data - 存储 Profile 对象的数组 - [Profile]\n    });\n\n    tim.on(_timJsSdk.default.EVENT.BLACKLIST_UPDATED, function (event) {\n      // 收到黑名单列表更新通知\n      // event.name - TIM.EVENT.BLACKLIST_UPDATED\n      // event.data - 存储 userID 的数组 - [userID]\n    });\n\n    tim.on(_timJsSdk.default.EVENT.ERROR, function (event) {\n      // 收到 SDK 发生错误通知，可以获取错误码和错误信息\n      // event.name - TIM.EVENT.ERROR\n      // event.data.code - 错误码\n      // event.data.message - 错误信息\n    });\n\n    tim.on(_timJsSdk.default.EVENT.SDK_NOT_READY, function (event) {\n      // 收到 SDK 进入 not ready 状态通知，此时 SDK 无法正常工作\n      // event.name - TIM.EVENT.SDK_NOT_READY\n    });\n\n    tim.on(_timJsSdk.default.EVENT.KICKED_OUT, function (event) {\n      // 收到被踢下线通知\n      // event.name - TIM.EVENT.KICKED_OUT\n      // event.data.type - 被踢下线的原因，例如:\n      //    - TIM.TYPES.KICKED_OUT_MULT_ACCOUNT 多实例登录被踢\n      //    - TIM.TYPES.KICKED_OUT_MULT_DEVICE 多终端登录被踢\n      //    - TIM.TYPES.KICKED_OUT_USERSIG_EXPIRED 签名过期被踢 （v2.4.0起支持）。 \n    });\n\n    tim.on(_timJsSdk.default.EVENT.NET_STATE_CHANGE, function (event) {\n      //  网络状态发生改变（v2.5.0 起支持）。 \n      // event.name - TIM.EVENT.NET_STATE_CHANGE \n      // event.data.state 当前网络状态，枚举值及说明如下： \n      //     \\- TIM.TYPES.NET_STATE_CONNECTED - 已接入网络 \n      //     \\- TIM.TYPES.NET_STATE_CONNECTING - 连接中。很可能遇到网络抖动，SDK 在重试。接入侧可根据此状态提示“当前网络不稳定”或“连接中” \n      //    \\- TIM.TYPES.NET_STATE_DISCONNECTED - 未接入网络。接入侧可根据此状态提示“当前网络不可用”。SDK 仍会继续重试，若用户网络恢复，SDK 会自动同步消息  \n    });\n\n\n  } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!***************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/tim-js-sdk/tim-js.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, wx, __f__, Page) {!function (e, t) { true ? module.exports = t() : undefined;}(this, function () {var e = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};function t(e, t) {return e(t = { exports: {} }, t.exports), t.exports;}var n = function n(e) {return e && e.Math == Math && e;},r = n(\"object\" == typeof globalThis && globalThis) || n(\"object\" == typeof window && window) || n(\"object\" == typeof self && self) || n(\"object\" == typeof e && e) || Function(\"return this\")(),o = function o(e) {try {return !!e();} catch (t) {return !0;}},i = !o(function () {return 7 != Object.defineProperty({}, 1, { get: function get() {return 7;} })[1];}),s = {}.propertyIsEnumerable,a = Object.getOwnPropertyDescriptor,u = { f: a && !s.call({ 1: 2 }, 1) ? function (e) {var t = a(this, e);return !!t && t.enumerable;} : s },c = function c(e, t) {return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };},l = {}.toString,p = function p(e) {return l.call(e).slice(8, -1);},f = \"\".split,h = o(function () {return !Object(\"z\").propertyIsEnumerable(0);}) ? function (e) {return \"String\" == p(e) ? f.call(e, \"\") : Object(e);} : Object,d = function d(e) {if (null == e) throw TypeError(\"Can't call method on \" + e);return e;},g = function g(e) {return h(d(e));},m = function m(e) {return \"object\" == typeof e ? null !== e : \"function\" == typeof e;},v = function v(e, t) {if (!m(e)) return e;var n, r;if (t && \"function\" == typeof (n = e.toString) && !m(r = n.call(e))) return r;if (\"function\" == typeof (n = e.valueOf) && !m(r = n.call(e))) return r;if (!t && \"function\" == typeof (n = e.toString) && !m(r = n.call(e))) return r;throw TypeError(\"Can't convert object to primitive value\");},y = {}.hasOwnProperty,_ = function _(e, t) {return y.call(e, t);},I = r.document,E = m(I) && m(I.createElement),C = function C(e) {return E ? I.createElement(e) : {};},M = !i && !o(function () {return 7 != Object.defineProperty(C(\"div\"), \"a\", { get: function get() {return 7;} }).a;}),S = Object.getOwnPropertyDescriptor,T = { f: i ? S : function (e, t) {if (e = g(e), t = v(t, !0), M) try {return S(e, t);} catch (n) {}if (_(e, t)) return c(!u.f.call(e, t), e[t]);} },D = function D(e) {if (!m(e)) throw TypeError(String(e) + \" is not an object\");return e;},A = Object.defineProperty,k = { f: i ? A : function (e, t, n) {if (D(e), t = v(t, !0), D(n), M) try {return A(e, t, n);} catch (r) {}if (\"get\" in n || \"set\" in n) throw TypeError(\"Accessors not supported\");return \"value\" in n && (e[t] = n.value), e;} },R = i ? function (e, t, n) {return k.f(e, t, c(1, n));} : function (e, t, n) {return e[t] = n, e;},O = function O(e, t) {try {R(r, e, t);} catch (n) {r[e] = t;}return t;},w = r[\"__core-js_shared__\"] || O(\"__core-js_shared__\", {}),N = Function.toString;\"function\" != typeof w.inspectSource && (w.inspectSource = function (e) {return N.call(e);});var L,b,P,G = w.inspectSource,U = r.WeakMap,x = \"function\" == typeof U && /native code/.test(G(U)),q = t(function (e) {(e.exports = function (e, t) {return w[e] || (w[e] = void 0 !== t ? t : {});})(\"versions\", []).push({ version: \"3.6.4\", mode: \"global\", copyright: \"© 2020 Denis Pushkarev (zloirock.ru)\" });}),F = 0,V = Math.random(),B = function B(e) {return \"Symbol(\" + String(void 0 === e ? \"\" : e) + \")_\" + (++F + V).toString(36);},j = q(\"keys\"),K = function K(e) {return j[e] || (j[e] = B(e));},H = {},Y = r.WeakMap;if (x) {var $ = new Y(),W = $.get,z = $.has,X = $.set;L = function L(e, t) {return X.call($, e, t), t;}, b = function b(e) {return W.call($, e) || {};}, P = function P(e) {return z.call($, e);};} else {var J = K(\"state\");H[J] = !0, L = function L(e, t) {return R(e, J, t), t;}, b = function b(e) {return _(e, J) ? e[J] : {};}, P = function P(e) {return _(e, J);};}var Q = { set: L, get: b, has: P, enforce: function enforce(e) {return P(e) ? b(e) : L(e, {});}, getterFor: function getterFor(e) {return function (t) {var n;if (!m(t) || (n = b(t)).type !== e) throw TypeError(\"Incompatible receiver, \" + e + \" required\");return n;};} },Z = t(function (e) {var t = Q.get,n = Q.enforce,o = String(String).split(\"String\");(e.exports = function (e, t, i, s) {var a = !!s && !!s.unsafe,u = !!s && !!s.enumerable,c = !!s && !!s.noTargetGet;\"function\" == typeof i && (\"string\" != typeof t || _(i, \"name\") || R(i, \"name\", t), n(i).source = o.join(\"string\" == typeof t ? t : \"\")), e !== r ? (a ? !c && e[t] && (u = !0) : delete e[t], u ? e[t] = i : R(e, t, i)) : u ? e[t] = i : O(t, i);})(Function.prototype, \"toString\", function () {return \"function\" == typeof this && t(this).source || G(this);});}),ee = r,te = function te(e) {return \"function\" == typeof e ? e : void 0;},ne = function ne(e, t) {return arguments.length < 2 ? te(ee[e]) || te(r[e]) : ee[e] && ee[e][t] || r[e] && r[e][t];},re = Math.ceil,oe = Math.floor,ie = function ie(e) {return isNaN(e = +e) ? 0 : (e > 0 ? oe : re)(e);},se = Math.min,ae = function ae(e) {return e > 0 ? se(ie(e), 9007199254740991) : 0;},ue = Math.max,ce = Math.min,le = function le(e, t) {var n = ie(e);return n < 0 ? ue(n + t, 0) : ce(n, t);},pe = function pe(e) {return function (t, n, r) {var o,i = g(t),s = ae(i.length),a = le(r, s);if (e && n != n) {for (; s > a;) {if ((o = i[a++]) != o) return !0;}} else for (; s > a; a++) {if ((e || a in i) && i[a] === n) return e || a || 0;}return !e && -1;};},fe = { includes: pe(!0), indexOf: pe(!1) },he = fe.indexOf,de = function de(e, t) {var n,r = g(e),o = 0,i = [];for (n in r) {!_(H, n) && _(r, n) && i.push(n);}for (; t.length > o;) {_(r, n = t[o++]) && (~he(i, n) || i.push(n));}return i;},ge = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\"],me = ge.concat(\"length\", \"prototype\"),ve = { f: Object.getOwnPropertyNames || function (e) {return de(e, me);} },ye = { f: Object.getOwnPropertySymbols },_e = ne(\"Reflect\", \"ownKeys\") || function (e) {var t = ve.f(D(e)),n = ye.f;return n ? t.concat(n(e)) : t;},Ie = function Ie(e, t) {for (var n = _e(t), r = k.f, o = T.f, i = 0; i < n.length; i++) {var s = n[i];_(e, s) || r(e, s, o(t, s));}},Ee = /#|\\.prototype\\./,Ce = function Ce(e, t) {var n = Se[Me(e)];return n == De || n != Te && (\"function\" == typeof t ? o(t) : !!t);},Me = Ce.normalize = function (e) {return String(e).replace(Ee, \".\").toLowerCase();},Se = Ce.data = {},Te = Ce.NATIVE = \"N\",De = Ce.POLYFILL = \"P\",Ae = Ce,ke = T.f,Re = function Re(e, t) {var n,o,i,s,a,u = e.target,c = e.global,l = e.stat;if (n = c ? r : l ? r[u] || O(u, {}) : (r[u] || {}).prototype) for (o in t) {if (s = t[o], i = e.noTargetGet ? (a = ke(n, o)) && a.value : n[o], !Ae(c ? o : u + (l ? \".\" : \"#\") + o, e.forced) && void 0 !== i) {if (typeof s == typeof i) continue;Ie(s, i);}(e.sham || i && i.sham) && R(s, \"sham\", !0), Z(n, o, s, e);}},Oe = function Oe(e) {if (\"function\" != typeof e) throw TypeError(String(e) + \" is not a function\");return e;},we = function we(e, t, n) {if (Oe(e), void 0 === t) return e;switch (n) {case 0:return function () {return e.call(t);};case 1:return function (n) {return e.call(t, n);};case 2:return function (n, r) {return e.call(t, n, r);};case 3:return function (n, r, o) {return e.call(t, n, r, o);};}return function () {return e.apply(t, arguments);};},Ne = function Ne(e) {return Object(d(e));},Le = Array.isArray || function (e) {return \"Array\" == p(e);},be = !!Object.getOwnPropertySymbols && !o(function () {return !String(Symbol());}),Pe = be && !Symbol.sham && \"symbol\" == typeof Symbol.iterator,Ge = q(\"wks\"),Ue = r.Symbol,xe = Pe ? Ue : Ue && Ue.withoutSetter || B,qe = function qe(e) {return _(Ge, e) || (be && _(Ue, e) ? Ge[e] = Ue[e] : Ge[e] = xe(\"Symbol.\" + e)), Ge[e];},Fe = qe(\"species\"),Ve = function Ve(e, t) {var n;return Le(e) && (\"function\" != typeof (n = e.constructor) || n !== Array && !Le(n.prototype) ? m(n) && null === (n = n[Fe]) && (n = void 0) : n = void 0), new (void 0 === n ? Array : n)(0 === t ? 0 : t);},Be = [].push,je = function je(e) {var t = 1 == e,n = 2 == e,r = 3 == e,o = 4 == e,i = 6 == e,s = 5 == e || i;return function (a, u, c, l) {for (var p, f, d = Ne(a), g = h(d), m = we(u, c, 3), v = ae(g.length), y = 0, _ = l || Ve, I = t ? _(a, v) : n ? _(a, 0) : void 0; v > y; y++) {if ((s || y in g) && (f = m(p = g[y], y, d), e)) if (t) I[y] = f;else if (f) switch (e) {case 3:return !0;case 5:return p;case 6:return y;case 2:Be.call(I, p);} else if (o) return !1;}return i ? -1 : r || o ? o : I;};},Ke = { forEach: je(0), map: je(1), filter: je(2), some: je(3), every: je(4), find: je(5), findIndex: je(6) },He = function He(e, t) {var n = [][e];return !!n && o(function () {n.call(null, t || function () {throw 1;}, 1);});},Ye = Object.defineProperty,$e = {},We = function We(e) {throw e;},ze = function ze(e, t) {if (_($e, e)) return $e[e];t || (t = {});var n = [][e],r = !!_(t, \"ACCESSORS\") && t.ACCESSORS,s = _(t, 0) ? t[0] : We,a = _(t, 1) ? t[1] : void 0;return $e[e] = !!n && !o(function () {if (r && !i) return !0;var e = { length: -1 };r ? Ye(e, 1, { enumerable: !0, get: We }) : e[1] = 1, n.call(e, s, a);});},Xe = Ke.forEach,Je = He(\"forEach\"),Qe = ze(\"forEach\"),Ze = Je && Qe ? [].forEach : function (e) {return Xe(this, e, arguments.length > 1 ? arguments[1] : void 0);};Re({ target: \"Array\", proto: !0, forced: [].forEach != Ze }, { forEach: Ze });var et = function et(e, t, n, r) {try {return r ? t(D(n)[0], n[1]) : t(n);} catch (i) {var o = e.return;throw void 0 !== o && D(o.call(e)), i;}},tt = {},nt = qe(\"iterator\"),rt = Array.prototype,ot = function ot(e) {return void 0 !== e && (tt.Array === e || rt[nt] === e);},it = function it(e, t, n) {var r = v(t);r in e ? k.f(e, r, c(0, n)) : e[r] = n;},st = {};st[qe(\"toStringTag\")] = \"z\";var at = \"[object z]\" === String(st),ut = qe(\"toStringTag\"),ct = \"Arguments\" == p(function () {return arguments;}()),lt = at ? p : function (e) {var t, n, r;return void 0 === e ? \"Undefined\" : null === e ? \"Null\" : \"string\" == typeof (n = function (e, t) {try {return e[t];} catch (n) {}}(t = Object(e), ut)) ? n : ct ? p(t) : \"Object\" == (r = p(t)) && \"function\" == typeof t.callee ? \"Arguments\" : r;},pt = qe(\"iterator\"),ft = function ft(e) {if (null != e) return e[pt] || e[\"@@iterator\"] || tt[lt(e)];},ht = function ht(e) {var t,n,r,o,i,s,a = Ne(e),u = \"function\" == typeof this ? this : Array,c = arguments.length,l = c > 1 ? arguments[1] : void 0,p = void 0 !== l,f = ft(a),h = 0;if (p && (l = we(l, c > 2 ? arguments[2] : void 0, 2)), null == f || u == Array && ot(f)) for (n = new u(t = ae(a.length)); t > h; h++) {s = p ? l(a[h], h) : a[h], it(n, h, s);} else for (i = (o = f.call(a)).next, n = new u(); !(r = i.call(o)).done; h++) {s = p ? et(o, l, [r.value, h], !0) : r.value, it(n, h, s);}return n.length = h, n;},dt = qe(\"iterator\"),gt = !1;try {var mt = 0,vt = { next: function next() {return { done: !!mt++ };}, return: function _return() {gt = !0;} };vt[dt] = function () {return this;}, Array.from(vt, function () {throw 2;});} catch (c_) {}var yt = function yt(e, t) {if (!t && !gt) return !1;var n = !1;try {var r = {};r[dt] = function () {return { next: function next() {return { done: n = !0 };} };}, e(r);} catch (c_) {}return n;},_t = !yt(function (e) {Array.from(e);});Re({ target: \"Array\", stat: !0, forced: _t }, { from: ht });var It,Et = Object.keys || function (e) {return de(e, ge);},Ct = i ? Object.defineProperties : function (e, t) {D(e);for (var n, r = Et(t), o = r.length, i = 0; o > i;) {k.f(e, n = r[i++], t[n]);}return e;},Mt = ne(\"document\", \"documentElement\"),St = K(\"IE_PROTO\"),Tt = function Tt() {},Dt = function Dt(e) {return \"<script>\" + e + \"<\\/script>\";},_At = function At() {try {It = document.domain && new ActiveXObject(\"htmlfile\");} catch (c_) {}var e, t;_At = It ? function (e) {e.write(Dt(\"\")), e.close();var t = e.parentWindow.Object;return e = null, t;}(It) : ((t = C(\"iframe\")).style.display = \"none\", Mt.appendChild(t), t.src = String(\"javascript:\"), (e = t.contentWindow.document).open(), e.write(Dt(\"document.F=Object\")), e.close(), e.F);for (var n = ge.length; n--;) {delete _At.prototype[ge[n]];}return _At();};H[St] = !0;var kt = Object.create || function (e, t) {var n;return null !== e ? (Tt.prototype = D(e), n = new Tt(), Tt.prototype = null, n[St] = e) : n = _At(), void 0 === t ? n : Ct(n, t);};Re({ target: \"Object\", stat: !0, sham: !i }, { create: kt });var Rt = o(function () {Et(1);});Re({ target: \"Object\", stat: !0, forced: Rt }, { keys: function keys(e) {return Et(Ne(e));} });var Ot,wt,Nt,Lt = function Lt(e) {return function (t, n) {var r,o,i = String(d(t)),s = ie(n),a = i.length;return s < 0 || s >= a ? e ? \"\" : void 0 : (r = i.charCodeAt(s)) < 55296 || r > 56319 || s + 1 === a || (o = i.charCodeAt(s + 1)) < 56320 || o > 57343 ? e ? i.charAt(s) : r : e ? i.slice(s, s + 2) : o - 56320 + (r - 55296 << 10) + 65536;};},bt = { codeAt: Lt(!1), charAt: Lt(!0) },Pt = !o(function () {function e() {}return e.prototype.constructor = null, Object.getPrototypeOf(new e()) !== e.prototype;}),Gt = K(\"IE_PROTO\"),Ut = Object.prototype,xt = Pt ? Object.getPrototypeOf : function (e) {return e = Ne(e), _(e, Gt) ? e[Gt] : \"function\" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? Ut : null;},qt = qe(\"iterator\"),Ft = !1;[].keys && (\"next\" in (Nt = [].keys()) ? (wt = xt(xt(Nt))) !== Object.prototype && (Ot = wt) : Ft = !0), null == Ot && (Ot = {}), _(Ot, qt) || R(Ot, qt, function () {return this;});var Vt = { IteratorPrototype: Ot, BUGGY_SAFARI_ITERATORS: Ft },Bt = k.f,jt = qe(\"toStringTag\"),Kt = function Kt(e, t, n) {e && !_(e = n ? e : e.prototype, jt) && Bt(e, jt, { configurable: !0, value: t });},Ht = Vt.IteratorPrototype,Yt = function Yt() {return this;},$t = function $t(e, t, n) {var r = t + \" Iterator\";return e.prototype = kt(Ht, { next: c(1, n) }), Kt(e, r, !1), tt[r] = Yt, e;},Wt = Object.setPrototypeOf || (\"__proto__\" in {} ? function () {var e,t = !1,n = {};try {(e = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set).call(n, []), t = n instanceof Array;} catch (c_) {}return function (n, r) {return D(n), function (e) {if (!m(e) && null !== e) throw TypeError(\"Can't set \" + String(e) + \" as a prototype\");}(r), t ? e.call(n, r) : n.__proto__ = r, n;};}() : void 0),zt = Vt.IteratorPrototype,Xt = Vt.BUGGY_SAFARI_ITERATORS,Jt = qe(\"iterator\"),Qt = function Qt() {return this;},Zt = function Zt(e, t, n, r, o, i, s) {$t(n, t, r);var a,u,c,l = function l(e) {if (e === o && g) return g;if (!Xt && e in h) return h[e];switch (e) {case \"keys\":case \"values\":case \"entries\":return function () {return new n(this, e);};}return function () {return new n(this);};},p = t + \" Iterator\",f = !1,h = e.prototype,d = h[Jt] || h[\"@@iterator\"] || o && h[o],g = !Xt && d || l(o),m = \"Array\" == t && h.entries || d;if (m && (a = xt(m.call(new e())), zt !== Object.prototype && a.next && (xt(a) !== zt && (Wt ? Wt(a, zt) : \"function\" != typeof a[Jt] && R(a, Jt, Qt)), Kt(a, p, !0))), \"values\" == o && d && \"values\" !== d.name && (f = !0, g = function g() {return d.call(this);}), h[Jt] !== g && R(h, Jt, g), tt[t] = g, o) if (u = { values: l(\"values\"), keys: i ? g : l(\"keys\"), entries: l(\"entries\") }, s) for (c in u) {(Xt || f || !(c in h)) && Z(h, c, u[c]);} else Re({ target: t, proto: !0, forced: Xt || f }, u);return u;},en = bt.charAt,tn = Q.set,nn = Q.getterFor(\"String Iterator\");Zt(String, \"String\", function (e) {tn(this, { type: \"String Iterator\", string: String(e), index: 0 });}, function () {var e,t = nn(this),n = t.string,r = t.index;return r >= n.length ? { value: void 0, done: !0 } : (e = en(n, r), t.index += e.length, { value: e, done: !1 });});var rn = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };for (var on in rn) {var sn = r[on],an = sn && sn.prototype;if (an && an.forEach !== Ze) try {R(an, \"forEach\", Ze);} catch (c_) {an.forEach = Ze;}}var un,cn,ln = { SDK_READY: \"sdkStateReady\", SDK_NOT_READY: \"sdkStateNotReady\", SDK_DESTROY: \"sdkDestroy\", MESSAGE_RECEIVED: \"onMessageReceived\", MESSAGE_REVOKED: \"onMessageRevoked\", MESSAGE_READ_BY_PEER: \"onMessageReadByPeer\", CONVERSATION_LIST_UPDATED: \"onConversationListUpdated\", GROUP_LIST_UPDATED: \"onGroupListUpdated\", GROUP_SYSTEM_NOTICE_RECEIVED: \"receiveGroupSystemNotice\", PROFILE_UPDATED: \"onProfileUpdated\", BLACKLIST_UPDATED: \"blacklistUpdated\", KICKED_OUT: \"kickedOut\", ERROR: \"error\", NET_STATE_CHANGE: \"netStateChange\" },pn = { MSG_TEXT: \"TIMTextElem\", MSG_IMAGE: \"TIMImageElem\", MSG_SOUND: \"TIMSoundElem\", MSG_AUDIO: \"TIMSoundElem\", MSG_FILE: \"TIMFileElem\", MSG_FACE: \"TIMFaceElem\", MSG_VIDEO: \"TIMVideoFileElem\", MSG_GEO: \"TIMLocationElem\", MSG_GRP_TIP: \"TIMGroupTipElem\", MSG_GRP_SYS_NOTICE: \"TIMGroupSystemNoticeElem\", MSG_CUSTOM: \"TIMCustomElem\", MSG_PRIORITY_HIGH: \"High\", MSG_PRIORITY_NORMAL: \"Normal\", MSG_PRIORITY_LOW: \"Low\", MSG_PRIORITY_LOWEST: \"Lowest\", CONV_C2C: \"C2C\", CONV_GROUP: \"GROUP\", CONV_SYSTEM: \"@TIM#SYSTEM\", GRP_PRIVATE: \"Private\", GRP_WORK: \"Private\", GRP_PUBLIC: \"Public\", GRP_CHATROOM: \"ChatRoom\", GRP_MEETING: \"ChatRoom\", GRP_AVCHATROOM: \"AVChatRoom\", GRP_MBR_ROLE_OWNER: \"Owner\", GRP_MBR_ROLE_ADMIN: \"Admin\", GRP_MBR_ROLE_MEMBER: \"Member\", GRP_TIP_MBR_JOIN: 1, GRP_TIP_MBR_QUIT: 2, GRP_TIP_MBR_KICKED_OUT: 3, GRP_TIP_MBR_SET_ADMIN: 4, GRP_TIP_MBR_CANCELED_ADMIN: 5, GRP_TIP_GRP_PROFILE_UPDATED: 6, GRP_TIP_MBR_PROFILE_UPDATED: 7, MSG_REMIND_ACPT_AND_NOTE: \"AcceptAndNotify\", MSG_REMIND_ACPT_NOT_NOTE: \"AcceptNotNotify\", MSG_REMIND_DISCARD: \"Discard\", GENDER_UNKNOWN: \"Gender_Type_Unknown\", GENDER_FEMALE: \"Gender_Type_Female\", GENDER_MALE: \"Gender_Type_Male\", KICKED_OUT_MULT_ACCOUNT: \"multipleAccount\", KICKED_OUT_MULT_DEVICE: \"multipleDevice\", KICKED_OUT_USERSIG_EXPIRED: \"userSigExpired\", ALLOW_TYPE_ALLOW_ANY: \"AllowType_Type_AllowAny\", ALLOW_TYPE_NEED_CONFIRM: \"AllowType_Type_NeedConfirm\", ALLOW_TYPE_DENY_ANY: \"AllowType_Type_DenyAny\", FORBID_TYPE_NONE: \"AdminForbid_Type_None\", FORBID_TYPE_SEND_OUT: \"AdminForbid_Type_SendOut\", JOIN_OPTIONS_FREE_ACCESS: \"FreeAccess\", JOIN_OPTIONS_NEED_PERMISSION: \"NeedPermission\", JOIN_OPTIONS_DISABLE_APPLY: \"DisableApply\", JOIN_STATUS_SUCCESS: \"JoinedSuccess\", JOIN_STATUS_ALREADY_IN_GROUP: \"AlreadyInGroup\", JOIN_STATUS_WAIT_APPROVAL: \"WaitAdminApproval\", GRP_PROFILE_OWNER_ID: \"ownerID\", GRP_PROFILE_CREATE_TIME: \"createTime\", GRP_PROFILE_LAST_INFO_TIME: \"lastInfoTime\", GRP_PROFILE_MEMBER_NUM: \"memberNum\", GRP_PROFILE_MAX_MEMBER_NUM: \"maxMemberNum\", GRP_PROFILE_JOIN_OPTION: \"joinOption\", GRP_PROFILE_INTRODUCTION: \"introduction\", GRP_PROFILE_NOTIFICATION: \"notification\", GRP_PROFILE_MUTE_ALL_MBRS: \"muteAllMembers\", NET_STATE_CONNECTED: \"connected\", NET_STATE_CONNECTING: \"connecting\", NET_STATE_DISCONNECTED: \"disconnected\" },fn = ne(\"navigator\", \"userAgent\") || \"\",hn = r.process,dn = hn && hn.versions,gn = dn && dn.v8;gn ? cn = (un = gn.split(\".\"))[0] + un[1] : fn && (!(un = fn.match(/Edge\\/(\\d+)/)) || un[1] >= 74) && (un = fn.match(/Chrome\\/(\\d+)/)) && (cn = un[1]);var mn = cn && +cn,vn = qe(\"species\"),yn = function yn(e) {return mn >= 51 || !o(function () {var t = [];return (t.constructor = {})[vn] = function () {return { foo: 1 };}, 1 !== t[e](Boolean).foo;});},_n = Ke.map,In = yn(\"map\"),En = ze(\"map\");Re({ target: \"Array\", proto: !0, forced: !In || !En }, { map: function map(e) {return _n(this, e, arguments.length > 1 ? arguments[1] : void 0);} });var Cn = [].slice,Mn = {},Sn = function Sn(e, t, n) {if (!(t in Mn)) {for (var r = [], o = 0; o < t; o++) {r[o] = \"a[\" + o + \"]\";}Mn[t] = Function(\"C,a\", \"return new C(\" + r.join(\",\") + \")\");}return Mn[t](e, n);},Tn = Function.bind || function (e) {var t = Oe(this),n = Cn.call(arguments, 1),r = function r() {var o = n.concat(Cn.call(arguments));return this instanceof r ? Sn(t, o.length, o) : t.apply(e, o);};return m(t.prototype) && (r.prototype = t.prototype), r;};function Dn(e) {return (Dn = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {return typeof e;} : function (e) {return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;})(e);}function An(e, t) {if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");}function kn(e, t) {for (var n = 0; n < t.length; n++) {var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);}}function Rn(e, t, n) {return t && kn(e.prototype, t), n && kn(e, n), e;}function On(e, t, n) {return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;}function wn(e, t) {var n = Object.keys(e);if (Object.getOwnPropertySymbols) {var r = Object.getOwnPropertySymbols(e);t && (r = r.filter(function (t) {return Object.getOwnPropertyDescriptor(e, t).enumerable;})), n.push.apply(n, r);}return n;}function Nn(e) {for (var t = 1; t < arguments.length; t++) {var n = null != arguments[t] ? arguments[t] : {};t % 2 ? wn(Object(n), !0).forEach(function (t) {On(e, t, n[t]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : wn(Object(n)).forEach(function (t) {Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));});}return e;}function Ln(e, t) {if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function\");e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), t && Pn(e, t);}function bn(e) {return (bn = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {return e.__proto__ || Object.getPrototypeOf(e);})(e);}function Pn(e, t) {return (Pn = Object.setPrototypeOf || function (e, t) {return e.__proto__ = t, e;})(e, t);}function Gn() {if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;if (Reflect.construct.sham) return !1;if (\"function\" == typeof Proxy) return !0;try {return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;} catch (e) {return !1;}}function Un(e, t, n) {return (Un = Gn() ? Reflect.construct : function (e, t, n) {var r = [null];r.push.apply(r, t);var o = new (Function.bind.apply(e, r))();return n && Pn(o, n.prototype), o;}).apply(null, arguments);}function xn(e) {var t = \"function\" == typeof Map ? new Map() : void 0;return (xn = function xn(e) {if (null === e || (n = e, -1 === Function.toString.call(n).indexOf(\"[native code]\"))) return e;var n;if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\");if (void 0 !== t) {if (t.has(e)) return t.get(e);t.set(e, r);}function r() {return Un(e, arguments, bn(this).constructor);}return r.prototype = Object.create(e.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } }), Pn(r, e);})(e);}function qn(e) {if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e;}function Fn(e, t) {return !t || \"object\" != typeof t && \"function\" != typeof t ? qn(e) : t;}function Vn(e) {return function () {var t,n = bn(e);if (Gn()) {var r = bn(this).constructor;t = Reflect.construct(n, arguments, r);} else t = n.apply(this, arguments);return Fn(this, t);};}function Bn(e, t) {return function (e) {if (Array.isArray(e)) return e;}(e) || function (e, t) {if (\"undefined\" == typeof Symbol || !(Symbol.iterator in Object(e))) return;var n = [],r = !0,o = !1,i = void 0;try {for (var s, a = e[Symbol.iterator](); !(r = (s = a.next()).done) && (n.push(s.value), !t || n.length !== t); r = !0) {;}} catch (u) {o = !0, i = u;} finally {try {r || null == a.return || a.return();} finally {if (o) throw i;}}return n;}(e, t) || Kn(e, t) || function () {throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}();}function jn(e) {return function (e) {if (Array.isArray(e)) return Hn(e);}(e) || function (e) {if (\"undefined\" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);}(e) || Kn(e) || function () {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}();}function Kn(e, t) {if (e) {if (\"string\" == typeof e) return Hn(e, t);var n = Object.prototype.toString.call(e).slice(8, -1);return \"Object\" === n && e.constructor && (n = e.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(n) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Hn(e, t) : void 0;}}function Hn(e, t) {(null == t || t > e.length) && (t = e.length);for (var n = 0, r = new Array(t); n < t; n++) {r[n] = e[n];}return r;}function Yn(e) {if (\"undefined\" == typeof Symbol || null == e[Symbol.iterator]) {if (Array.isArray(e) || (e = Kn(e))) {var t = 0,n = function n() {};return { s: n, n: function n() {return t >= e.length ? { done: !0 } : { done: !1, value: e[t++] };}, e: function e(_e2) {throw _e2;}, f: n };}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var r,o,i = !0,s = !1;return { s: function s() {r = e[Symbol.iterator]();}, n: function n() {var e = r.next();return i = e.done, e;}, e: function e(_e3) {s = !0, o = _e3;}, f: function f() {try {i || null == r.return || r.return();} finally {if (s) throw o;}} };}Re({ target: \"Function\", proto: !0 }, { bind: Tn });var $n = function () {function e() {An(this, e), this.cache = [], this.options = null;}return Rn(e, [{ key: \"use\", value: function value(e) {if (\"function\" != typeof e) throw \"middleware must be a function\";return this.cache.push(e), this;} }, { key: \"next\", value: function value(e) {if (this.middlewares && this.middlewares.length > 0) return this.middlewares.shift().call(this, this.options, this.next.bind(this));} }, { key: \"run\", value: function value(e) {return this.middlewares = this.cache.map(function (e) {return e;}), this.options = e, this.next();} }]), e;}(),Wn = qe(\"isConcatSpreadable\"),zn = mn >= 51 || !o(function () {var e = [];return e[Wn] = !1, e.concat()[0] !== e;}),Xn = yn(\"concat\"),Jn = function Jn(e) {if (!m(e)) return !1;var t = e[Wn];return void 0 !== t ? !!t : Le(e);};Re({ target: \"Array\", proto: !0, forced: !zn || !Xn }, { concat: function concat(e) {var t,n,r,o,i,s = Ne(this),a = Ve(s, 0),u = 0;for (t = -1, r = arguments.length; t < r; t++) {if (i = -1 === t ? s : arguments[t], Jn(i)) {if (u + (o = ae(i.length)) > 9007199254740991) throw TypeError(\"Maximum allowed index exceeded\");for (n = 0; n < o; n++, u++) {n in i && it(a, u, i[n]);}} else {if (u >= 9007199254740991) throw TypeError(\"Maximum allowed index exceeded\");it(a, u++, i);}}return a.length = u, a;} });var Qn = k.f,Zn = Function.prototype,er = Zn.toString,tr = /^\\s*function ([^ (]*)/;i && !(\"name\" in Zn) && Qn(Zn, \"name\", { configurable: !0, get: function get() {try {return er.call(this).match(tr)[1];} catch (c_) {return \"\";}} });var nr = t(function (t, n) {var r, o, i, s, a, u, c, l, p, f, h, d, g, m, v, y, _, I;t.exports = (r = \"function\" == typeof Promise, o = \"object\" == typeof self ? self : e, i = \"undefined\" != typeof Symbol, s = \"undefined\" != typeof Map, a = \"undefined\" != typeof Set, u = \"undefined\" != typeof WeakMap, c = \"undefined\" != typeof WeakSet, l = \"undefined\" != typeof DataView, p = i && void 0 !== Symbol.iterator, f = i && void 0 !== Symbol.toStringTag, h = a && \"function\" == typeof Set.prototype.entries, d = s && \"function\" == typeof Map.prototype.entries, g = h && Object.getPrototypeOf(new Set().entries()), m = d && Object.getPrototypeOf(new Map().entries()), v = p && \"function\" == typeof Array.prototype[Symbol.iterator], y = v && Object.getPrototypeOf([][Symbol.iterator]()), _ = p && \"function\" == typeof String.prototype[Symbol.iterator], I = _ && Object.getPrototypeOf(\"\"[Symbol.iterator]()), function (e) {var t = typeof e;if (\"object\" !== t) return t;if (null === e) return \"null\";if (e === o) return \"global\";if (Array.isArray(e) && (!1 === f || !(Symbol.toStringTag in e))) return \"Array\";if (\"object\" == typeof window && null !== window) {if (\"object\" == typeof window.location && e === window.location) return \"Location\";if (\"object\" == typeof window.document && e === window.document) return \"Document\";if (\"object\" == typeof window.navigator) {if (\"object\" == typeof window.navigator.mimeTypes && e === window.navigator.mimeTypes) return \"MimeTypeArray\";if (\"object\" == typeof window.navigator.plugins && e === window.navigator.plugins) return \"PluginArray\";}if ((\"function\" == typeof window.HTMLElement || \"object\" == typeof window.HTMLElement) && e instanceof window.HTMLElement) {if (\"BLOCKQUOTE\" === e.tagName) return \"HTMLQuoteElement\";if (\"TD\" === e.tagName) return \"HTMLTableDataCellElement\";if (\"TH\" === e.tagName) return \"HTMLTableHeaderCellElement\";}}var n = f && e[Symbol.toStringTag];if (\"string\" == typeof n) return n;var i = Object.getPrototypeOf(e);return i === RegExp.prototype ? \"RegExp\" : i === Date.prototype ? \"Date\" : r && i === Promise.prototype ? \"Promise\" : a && i === Set.prototype ? \"Set\" : s && i === Map.prototype ? \"Map\" : c && i === WeakSet.prototype ? \"WeakSet\" : u && i === WeakMap.prototype ? \"WeakMap\" : l && i === DataView.prototype ? \"DataView\" : s && i === m ? \"Map Iterator\" : a && i === g ? \"Set Iterator\" : v && i === y ? \"Array Iterator\" : _ && i === I ? \"String Iterator\" : null === i ? \"Object\" : Object.prototype.toString.call(e).slice(8, -1);});});Re({ target: \"Array\", stat: !0 }, { isArray: Le });var rr = qe(\"unscopables\"),or = Array.prototype;null == or[rr] && k.f(or, rr, { configurable: !0, value: kt(null) });var ir = function ir(e) {or[rr][e] = !0;},sr = Ke.find,ar = !0,ur = ze(\"find\");\"find\" in [] && Array(1).find(function () {ar = !1;}), Re({ target: \"Array\", proto: !0, forced: ar || !ur }, { find: function find(e) {return sr(this, e, arguments.length > 1 ? arguments[1] : void 0);} }), ir(\"find\");var cr = fe.includes,lr = ze(\"indexOf\", { ACCESSORS: !0, 1: 0 });Re({ target: \"Array\", proto: !0, forced: !lr }, { includes: function includes(e) {return cr(this, e, arguments.length > 1 ? arguments[1] : void 0);} }), ir(\"includes\");var pr = fe.indexOf,fr = [].indexOf,hr = !!fr && 1 / [1].indexOf(1, -0) < 0,dr = He(\"indexOf\"),gr = ze(\"indexOf\", { ACCESSORS: !0, 1: 0 });Re({ target: \"Array\", proto: !0, forced: hr || !dr || !gr }, { indexOf: function indexOf(e) {return hr ? fr.apply(this, arguments) || 0 : pr(this, e, arguments.length > 1 ? arguments[1] : void 0);} });var mr = Q.set,vr = Q.getterFor(\"Array Iterator\"),yr = Zt(Array, \"Array\", function (e, t) {mr(this, { type: \"Array Iterator\", target: g(e), index: 0, kind: t });}, function () {var e = vr(this),t = e.target,n = e.kind,r = e.index++;return !t || r >= t.length ? (e.target = void 0, { value: void 0, done: !0 }) : \"keys\" == n ? { value: r, done: !1 } : \"values\" == n ? { value: t[r], done: !1 } : { value: [r, t[r]], done: !1 };}, \"values\");tt.Arguments = tt.Array, ir(\"keys\"), ir(\"values\"), ir(\"entries\");var _r = [].join,Ir = h != Object,Er = He(\"join\", \",\");Re({ target: \"Array\", proto: !0, forced: Ir || !Er }, { join: function join(e) {return _r.call(g(this), void 0 === e ? \",\" : e);} });var Cr = yn(\"slice\"),Mr = ze(\"slice\", { ACCESSORS: !0, 0: 0, 1: 2 }),Sr = qe(\"species\"),Tr = [].slice,Dr = Math.max;Re({ target: \"Array\", proto: !0, forced: !Cr || !Mr }, { slice: function slice(e, t) {var n,r,o,i = g(this),s = ae(i.length),a = le(e, s),u = le(void 0 === t ? s : t, s);if (Le(i) && (\"function\" != typeof (n = i.constructor) || n !== Array && !Le(n.prototype) ? m(n) && null === (n = n[Sr]) && (n = void 0) : n = void 0, n === Array || void 0 === n)) return Tr.call(i, a, u);for (r = new (void 0 === n ? Array : n)(Dr(u - a, 0)), o = 0; a < u; a++, o++) {a in i && it(r, o, i[a]);}return r.length = o, r;} }), Re({ target: \"Date\", stat: !0 }, { now: function now() {return new Date().getTime();} });var Ar = \"\".repeat || function (e) {var t = String(d(this)),n = \"\",r = ie(e);if (r < 0 || Infinity == r) throw RangeError(\"Wrong number of repetitions\");for (; r > 0; (r >>>= 1) && (t += t)) {1 & r && (n += t);}return n;},kr = Math.ceil,Rr = function Rr(e) {return function (t, n, r) {var o,i,s = String(d(t)),a = s.length,u = void 0 === r ? \" \" : String(r),c = ae(n);return c <= a || \"\" == u ? s : (o = c - a, (i = Ar.call(u, kr(o / u.length))).length > o && (i = i.slice(0, o)), e ? s + i : i + s);};},Or = { start: Rr(!1), end: Rr(!0) }.start,wr = Math.abs,Nr = Date.prototype,Lr = Nr.getTime,br = Nr.toISOString,Pr = o(function () {return \"0385-07-25T07:06:39.999Z\" != br.call(new Date(-50000000000001));}) || !o(function () {br.call(new Date(NaN));}) ? function () {if (!isFinite(Lr.call(this))) throw RangeError(\"Invalid time value\");var e = this.getUTCFullYear(),t = this.getUTCMilliseconds(),n = e < 0 ? \"-\" : e > 9999 ? \"+\" : \"\";return n + Or(wr(e), n ? 6 : 4, 0) + \"-\" + Or(this.getUTCMonth() + 1, 2, 0) + \"-\" + Or(this.getUTCDate(), 2, 0) + \"T\" + Or(this.getUTCHours(), 2, 0) + \":\" + Or(this.getUTCMinutes(), 2, 0) + \":\" + Or(this.getUTCSeconds(), 2, 0) + \".\" + Or(t, 3, 0) + \"Z\";} : br;Re({ target: \"Date\", proto: !0, forced: Date.prototype.toISOString !== Pr }, { toISOString: Pr });var Gr = Date.prototype,Ur = Gr.toString,xr = Gr.getTime;new Date(NaN) + \"\" != \"Invalid Date\" && Z(Gr, \"toString\", function () {var e = xr.call(this);return e == e ? Ur.call(this) : \"Invalid Date\";});var qr = function qr(e, t, n) {var r, o;return Wt && \"function\" == typeof (r = t.constructor) && r !== n && m(o = r.prototype) && o !== n.prototype && Wt(e, o), e;},Fr = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\",Vr = \"[\" + Fr + \"]\",Br = RegExp(\"^\" + Vr + Vr + \"*\"),jr = RegExp(Vr + Vr + \"*$\"),Kr = function Kr(e) {return function (t) {var n = String(d(t));return 1 & e && (n = n.replace(Br, \"\")), 2 & e && (n = n.replace(jr, \"\")), n;};},Hr = { start: Kr(1), end: Kr(2), trim: Kr(3) },Yr = ve.f,$r = T.f,Wr = k.f,zr = Hr.trim,Xr = r.Number,Jr = Xr.prototype,Qr = \"Number\" == p(kt(Jr)),Zr = function Zr(e) {var t,n,r,o,i,s,a,u,c = v(e, !1);if (\"string\" == typeof c && c.length > 2) if (43 === (t = (c = zr(c)).charCodeAt(0)) || 45 === t) {if (88 === (n = c.charCodeAt(2)) || 120 === n) return NaN;} else if (48 === t) {switch (c.charCodeAt(1)) {case 66:case 98:r = 2, o = 49;break;case 79:case 111:r = 8, o = 55;break;default:return +c;}for (s = (i = c.slice(2)).length, a = 0; a < s; a++) {if ((u = i.charCodeAt(a)) < 48 || u > o) return NaN;}return parseInt(i, r);}return +c;};if (Ae(\"Number\", !Xr(\" 0o1\") || !Xr(\"0b1\") || Xr(\"+0x1\"))) {for (var eo, to = function to(e) {var t = arguments.length < 1 ? 0 : e,n = this;return n instanceof to && (Qr ? o(function () {Jr.valueOf.call(n);}) : \"Number\" != p(n)) ? qr(new Xr(Zr(t)), n, to) : Zr(t);}, no = i ? Yr(Xr) : \"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger\".split(\",\"), ro = 0; no.length > ro; ro++) {_(Xr, eo = no[ro]) && !_(to, eo) && Wr(to, eo, $r(Xr, eo));}to.prototype = Jr, Jr.constructor = to, Z(r, \"Number\", to);}var oo = ve.f,io = {}.toString,so = \"object\" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],ao = { f: function f(e) {return so && \"[object Window]\" == io.call(e) ? function (e) {try {return oo(e);} catch (c_) {return so.slice();}}(e) : oo(g(e));} },uo = ao.f,co = o(function () {return !Object.getOwnPropertyNames(1);});Re({ target: \"Object\", stat: !0, forced: co }, { getOwnPropertyNames: uo });var lo = o(function () {xt(1);});Re({ target: \"Object\", stat: !0, forced: lo, sham: !Pt }, { getPrototypeOf: function getPrototypeOf(e) {return xt(Ne(e));} });var po = at ? {}.toString : function () {return \"[object \" + lt(this) + \"]\";};at || Z(Object.prototype, \"toString\", po, { unsafe: !0 });var fo = Hr.trim,ho = r.parseInt,go = /^[+-]?0[Xx]/,mo = 8 !== ho(Fr + \"08\") || 22 !== ho(Fr + \"0x16\") ? function (e, t) {var n = fo(String(e));return ho(n, t >>> 0 || (go.test(n) ? 16 : 10));} : ho;Re({ global: !0, forced: parseInt != mo }, { parseInt: mo });var vo,yo,_o,Io = r.Promise,Eo = function Eo(e, t, n) {for (var r in t) {Z(e, r, t[r], n);}return e;},Co = qe(\"species\"),Mo = function Mo(e) {var t = ne(e),n = k.f;i && t && !t[Co] && n(t, Co, { configurable: !0, get: function get() {return this;} });},So = function So(e, t, n) {if (!(e instanceof t)) throw TypeError(\"Incorrect \" + (n ? n + \" \" : \"\") + \"invocation\");return e;},To = t(function (e) {var t = function t(e, _t2) {this.stopped = e, this.result = _t2;};(e.exports = function (e, n, r, o, i) {var s,a,u,c,l,p,f,h = we(n, r, o ? 2 : 1);if (i) s = e;else {if (\"function\" != typeof (a = ft(e))) throw TypeError(\"Target is not iterable\");if (ot(a)) {for (u = 0, c = ae(e.length); c > u; u++) {if ((l = o ? h(D(f = e[u])[0], f[1]) : h(e[u])) && l instanceof t) return l;}return new t(!1);}s = a.call(e);}for (p = s.next; !(f = p.call(s)).done;) {if (\"object\" == typeof (l = et(s, h, f.value, o)) && l && l instanceof t) return l;}return new t(!1);}).stop = function (e) {return new t(!0, e);};}),Do = qe(\"species\"),Ao = function Ao(e, t) {var n,r = D(e).constructor;return void 0 === r || null == (n = D(r)[Do]) ? t : Oe(n);},ko = /(iphone|ipod|ipad).*applewebkit/i.test(fn),Ro = r.location,Oo = r.setImmediate,wo = r.clearImmediate,No = r.process,Lo = r.MessageChannel,bo = r.Dispatch,Po = 0,Go = {},Uo = function Uo(e) {if (Go.hasOwnProperty(e)) {var t = Go[e];delete Go[e], t();}},xo = function xo(e) {return function () {Uo(e);};},qo = function qo(e) {Uo(e.data);},Fo = function Fo(e) {r.postMessage(e + \"\", Ro.protocol + \"//\" + Ro.host);};Oo && wo || (Oo = function Oo(e) {for (var t = [], n = 1; arguments.length > n;) {t.push(arguments[n++]);}return Go[++Po] = function () {(\"function\" == typeof e ? e : Function(e)).apply(void 0, t);}, vo(Po), Po;}, wo = function wo(e) {delete Go[e];}, \"process\" == p(No) ? vo = function vo(e) {No.nextTick(xo(e));} : bo && bo.now ? vo = function vo(e) {bo.now(xo(e));} : Lo && !ko ? (_o = (yo = new Lo()).port2, yo.port1.onmessage = qo, vo = we(_o.postMessage, _o, 1)) : !r.addEventListener || \"function\" != typeof postMessage || r.importScripts || o(Fo) ? vo = \"onreadystatechange\" in C(\"script\") ? function (e) {Mt.appendChild(C(\"script\")).onreadystatechange = function () {Mt.removeChild(this), Uo(e);};} : function (e) {setTimeout(xo(e), 0);} : (vo = Fo, r.addEventListener(\"message\", qo, !1)));var Vo,Bo,jo,Ko,Ho,Yo,$o,Wo,zo = { set: Oo, clear: wo },Xo = T.f,Jo = zo.set,Qo = r.MutationObserver || r.WebKitMutationObserver,Zo = r.process,ei = r.Promise,ti = \"process\" == p(Zo),ni = Xo(r, \"queueMicrotask\"),ri = ni && ni.value;ri || (Vo = function Vo() {var e, t;for (ti && (e = Zo.domain) && e.exit(); Bo;) {t = Bo.fn, Bo = Bo.next;try {t();} catch (c_) {throw Bo ? Ko() : jo = void 0, c_;}}jo = void 0, e && e.enter();}, ti ? Ko = function Ko() {Zo.nextTick(Vo);} : Qo && !ko ? (Ho = !0, Yo = document.createTextNode(\"\"), new Qo(Vo).observe(Yo, { characterData: !0 }), Ko = function Ko() {Yo.data = Ho = !Ho;}) : ei && ei.resolve ? ($o = ei.resolve(void 0), Wo = $o.then, Ko = function Ko() {Wo.call($o, Vo);}) : Ko = function Ko() {Jo.call(r, Vo);});var oi,ii,si,ai,ui = ri || function (e) {var t = { fn: e, next: void 0 };jo && (jo.next = t), Bo || (Bo = t, Ko()), jo = t;},ci = function ci(e) {var t, n;this.promise = new e(function (e, r) {if (void 0 !== t || void 0 !== n) throw TypeError(\"Bad Promise constructor\");t = e, n = r;}), this.resolve = Oe(t), this.reject = Oe(n);},li = { f: function f(e) {return new ci(e);} },pi = function pi(e, t) {if (D(e), m(t) && t.constructor === e) return t;var n = li.f(e);return (0, n.resolve)(t), n.promise;},fi = function fi(e) {try {return { error: !1, value: e() };} catch (c_) {return { error: !0, value: c_ };}},hi = zo.set,di = qe(\"species\"),gi = \"Promise\",mi = Q.get,vi = Q.set,yi = Q.getterFor(gi),_i2 = Io,Ii = r.TypeError,Ei = r.document,Ci = r.process,Mi = ne(\"fetch\"),Si = li.f,Ti = Si,Di = \"process\" == p(Ci),Ai = !!(Ei && Ei.createEvent && r.dispatchEvent),ki = Ae(gi, function () {if (!(G(_i2) !== String(_i2))) {if (66 === mn) return !0;if (!Di && \"function\" != typeof PromiseRejectionEvent) return !0;}if (mn >= 51 && /native code/.test(_i2)) return !1;var e = _i2.resolve(1),t = function t(e) {e(function () {}, function () {});};return (e.constructor = {})[di] = t, !(e.then(function () {}) instanceof t);}),Ri = ki || !yt(function (e) {_i2.all(e).catch(function () {});}),Oi = function Oi(e) {var t;return !(!m(e) || \"function\" != typeof (t = e.then)) && t;},wi = function wi(e, t, n) {if (!t.notified) {t.notified = !0;var r = t.reactions;ui(function () {for (var o = t.value, i = 1 == t.state, s = 0; r.length > s;) {var a,u,c,l = r[s++],p = i ? l.ok : l.fail,f = l.resolve,h = l.reject,d = l.domain;try {p ? (i || (2 === t.rejection && Pi(e, t), t.rejection = 1), !0 === p ? a = o : (d && d.enter(), a = p(o), d && (d.exit(), c = !0)), a === l.promise ? h(Ii(\"Promise-chain cycle\")) : (u = Oi(a)) ? u.call(a, f, h) : f(a)) : h(o);} catch (c_) {d && !c && d.exit(), h(c_);}}t.reactions = [], t.notified = !1, n && !t.rejection && Li(e, t);});}},Ni = function Ni(e, t, n) {var o, i;Ai ? ((o = Ei.createEvent(\"Event\")).promise = t, o.reason = n, o.initEvent(e, !1, !0), r.dispatchEvent(o)) : o = { promise: t, reason: n }, (i = r[\"on\" + e]) ? i(o) : \"unhandledrejection\" === e && function (e, t) {var n = r.console;n && n.error && (1 === arguments.length ? n.error(e) : n.error(e, t));}(\"Unhandled promise rejection\", n);},Li = function Li(e, t) {hi.call(r, function () {var n,r = t.value;if (bi(t) && (n = fi(function () {Di ? Ci.emit(\"unhandledRejection\", r, e) : Ni(\"unhandledrejection\", e, r);}), t.rejection = Di || bi(t) ? 2 : 1, n.error)) throw n.value;});},bi = function bi(e) {return 1 !== e.rejection && !e.parent;},Pi = function Pi(e, t) {hi.call(r, function () {Di ? Ci.emit(\"rejectionHandled\", e) : Ni(\"rejectionhandled\", e, t.value);});},Gi = function Gi(e, t, n, r) {return function (o) {e(t, n, o, r);};},Ui = function Ui(e, t, n, r) {t.done || (t.done = !0, r && (t = r), t.value = n, t.state = 2, wi(e, t, !0));},xi = function xi(e, t, n, r) {if (!t.done) {t.done = !0, r && (t = r);try {if (e === n) throw Ii(\"Promise can't be resolved itself\");var o = Oi(n);o ? ui(function () {var r = { done: !1 };try {o.call(n, Gi(xi, e, r, t), Gi(Ui, e, r, t));} catch (c_) {Ui(e, r, c_, t);}}) : (t.value = n, t.state = 1, wi(e, t, !1));} catch (c_) {Ui(e, { done: !1 }, c_, t);}}};ki && (_i2 = function _i(e) {So(this, _i2, gi), Oe(e), oi.call(this);var t = mi(this);try {e(Gi(xi, this, t), Gi(Ui, this, t));} catch (c_) {Ui(this, t, c_);}}, (oi = function oi(e) {vi(this, { type: gi, done: !1, notified: !1, parent: !1, reactions: [], rejection: !1, state: 0, value: void 0 });}).prototype = Eo(_i2.prototype, { then: function then(e, t) {var n = yi(this),r = Si(Ao(this, _i2));return r.ok = \"function\" != typeof e || e, r.fail = \"function\" == typeof t && t, r.domain = Di ? Ci.domain : void 0, n.parent = !0, n.reactions.push(r), 0 != n.state && wi(this, n, !1), r.promise;}, catch: function _catch(e) {return this.then(void 0, e);} }), ii = function ii() {var e = new oi(),t = mi(e);this.promise = e, this.resolve = Gi(xi, e, t), this.reject = Gi(Ui, e, t);}, li.f = Si = function Si(e) {return e === _i2 || e === si ? new ii(e) : Ti(e);}, \"function\" == typeof Io && (ai = Io.prototype.then, Z(Io.prototype, \"then\", function (e, t) {var n = this;return new _i2(function (e, t) {ai.call(n, e, t);}).then(e, t);}, { unsafe: !0 }), \"function\" == typeof Mi && Re({ global: !0, enumerable: !0, forced: !0 }, { fetch: function fetch(e) {return pi(_i2, Mi.apply(r, arguments));} }))), Re({ global: !0, wrap: !0, forced: ki }, { Promise: _i2 }), Kt(_i2, gi, !1), Mo(gi), si = ne(gi), Re({ target: gi, stat: !0, forced: ki }, { reject: function reject(e) {var t = Si(this);return t.reject.call(void 0, e), t.promise;} }), Re({ target: gi, stat: !0, forced: ki }, { resolve: function resolve(e) {return pi(this, e);} }), Re({ target: gi, stat: !0, forced: Ri }, { all: function all(e) {var t = this,n = Si(t),r = n.resolve,o = n.reject,i = fi(function () {var n = Oe(t.resolve),i = [],s = 0,a = 1;To(e, function (e) {var u = s++,c = !1;i.push(void 0), a++, n.call(t, e).then(function (e) {c || (c = !0, i[u] = e, --a || r(i));}, o);}), --a || r(i);});return i.error && o(i.value), n.promise;}, race: function race(e) {var t = this,n = Si(t),r = n.reject,o = fi(function () {var o = Oe(t.resolve);To(e, function (e) {o.call(t, e).then(n.resolve, r);});});return o.error && r(o.value), n.promise;} });var qi = function qi() {var e = D(this),t = \"\";return e.global && (t += \"g\"), e.ignoreCase && (t += \"i\"), e.multiline && (t += \"m\"), e.dotAll && (t += \"s\"), e.unicode && (t += \"u\"), e.sticky && (t += \"y\"), t;};function Fi(e, t) {return RegExp(e, t);}var Vi,Bi,ji = { UNSUPPORTED_Y: o(function () {var e = Fi(\"a\", \"y\");return e.lastIndex = 2, null != e.exec(\"abcd\");}), BROKEN_CARET: o(function () {var e = Fi(\"^r\", \"gy\");return e.lastIndex = 2, null != e.exec(\"str\");}) },Ki = RegExp.prototype.exec,Hi = String.prototype.replace,Yi = Ki,$i = (Vi = /a/, Bi = /b*/g, Ki.call(Vi, \"a\"), Ki.call(Bi, \"a\"), 0 !== Vi.lastIndex || 0 !== Bi.lastIndex),Wi = ji.UNSUPPORTED_Y || ji.BROKEN_CARET,zi = void 0 !== /()??/.exec(\"\")[1];($i || zi || Wi) && (Yi = function Yi(e) {var t,n,r,o,i = this,s = Wi && i.sticky,a = qi.call(i),u = i.source,c = 0,l = e;return s && (-1 === (a = a.replace(\"y\", \"\")).indexOf(\"g\") && (a += \"g\"), l = String(e).slice(i.lastIndex), i.lastIndex > 0 && (!i.multiline || i.multiline && \"\\n\" !== e[i.lastIndex - 1]) && (u = \"(?: \" + u + \")\", l = \" \" + l, c++), n = new RegExp(\"^(?:\" + u + \")\", a)), zi && (n = new RegExp(\"^\" + u + \"$(?!\\\\s)\", a)), $i && (t = i.lastIndex), r = Ki.call(s ? n : i, l), s ? r ? (r.input = r.input.slice(c), r[0] = r[0].slice(c), r.index = i.lastIndex, i.lastIndex += r[0].length) : i.lastIndex = 0 : $i && r && (i.lastIndex = i.global ? r.index + r[0].length : t), zi && r && r.length > 1 && Hi.call(r[0], n, function () {for (o = 1; o < arguments.length - 2; o++) {void 0 === arguments[o] && (r[o] = void 0);}}), r;});var Xi = Yi;Re({ target: \"RegExp\", proto: !0, forced: /./.exec !== Xi }, { exec: Xi });var Ji = RegExp.prototype,Qi = Ji.toString,Zi = o(function () {return \"/a/b\" != Qi.call({ source: \"a\", flags: \"b\" });}),es = \"toString\" != Qi.name;(Zi || es) && Z(RegExp.prototype, \"toString\", function () {var e = D(this),t = String(e.source),n = e.flags;return \"/\" + t + \"/\" + String(void 0 === n && e instanceof RegExp && !(\"flags\" in Ji) ? qi.call(e) : n);}, { unsafe: !0 });var ts = qe(\"match\"),ns = function ns(e) {var t;return m(e) && (void 0 !== (t = e[ts]) ? !!t : \"RegExp\" == p(e));},rs = function rs(e) {if (ns(e)) throw TypeError(\"The method doesn't accept regular expressions\");return e;},os = qe(\"match\"),is = function is(e) {var t = /./;try {\"/./\"[e](t);} catch (n) {try {return t[os] = !1, \"/./\"[e](t);} catch (r) {}}return !1;};Re({ target: \"String\", proto: !0, forced: !is(\"includes\") }, { includes: function includes(e) {return !!~String(d(this)).indexOf(rs(e), arguments.length > 1 ? arguments[1] : void 0);} });var ss = qe(\"species\"),as = !o(function () {var e = /./;return e.exec = function () {var e = [];return e.groups = { a: \"7\" }, e;}, \"7\" !== \"\".replace(e, \"$<a>\");}),us = \"$0\" === \"a\".replace(/./, \"$0\"),cs = qe(\"replace\"),ls = !!/./[cs] && \"\" === /./[cs](\"a\", \"$0\"),ps = !o(function () {var e = /(?:)/,t = e.exec;e.exec = function () {return t.apply(this, arguments);};var n = \"ab\".split(e);return 2 !== n.length || \"a\" !== n[0] || \"b\" !== n[1];}),fs = function fs(e, t, n, r) {var i = qe(e),s = !o(function () {var t = {};return t[i] = function () {return 7;}, 7 != \"\"[e](t);}),a = s && !o(function () {var t = !1,n = /a/;return \"split\" === e && ((n = {}).constructor = {}, n.constructor[ss] = function () {return n;}, n.flags = \"\", n[i] = /./[i]), n.exec = function () {return t = !0, null;}, n[i](\"\"), !t;});if (!s || !a || \"replace\" === e && (!as || !us || ls) || \"split\" === e && !ps) {var u = /./[i],c = n(i, \"\"[e], function (e, t, n, r, o) {return t.exec === Xi ? s && !o ? { done: !0, value: u.call(t, n, r) } : { done: !0, value: e.call(n, t, r) } : { done: !1 };}, { REPLACE_KEEPS_$0: us, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: ls }),l = c[0],p = c[1];Z(String.prototype, e, l), Z(RegExp.prototype, i, 2 == t ? function (e, t) {return p.call(e, this, t);} : function (e) {return p.call(e, this);});}r && R(RegExp.prototype[i], \"sham\", !0);},hs = bt.charAt,ds = function ds(e, t, n) {return t + (n ? hs(e, t).length : 1);},gs = function gs(e, t) {var n = e.exec;if (\"function\" == typeof n) {var r = n.call(e, t);if (\"object\" != typeof r) throw TypeError(\"RegExp exec method returned something other than an Object or null\");return r;}if (\"RegExp\" !== p(e)) throw TypeError(\"RegExp#exec called on incompatible receiver\");return Xi.call(e, t);};fs(\"match\", 1, function (e, t, n) {return [function (t) {var n = d(this),r = null == t ? void 0 : t[e];return void 0 !== r ? r.call(t, n) : new RegExp(t)[e](String(n));}, function (e) {var r = n(t, e, this);if (r.done) return r.value;var o = D(e),i = String(this);if (!o.global) return gs(o, i);var s = o.unicode;o.lastIndex = 0;for (var a, u = [], c = 0; null !== (a = gs(o, i));) {var l = String(a[0]);u[c] = l, \"\" === l && (o.lastIndex = ds(i, ae(o.lastIndex), s)), c++;}return 0 === c ? null : u;}];});var ms = Math.max,vs = Math.min,ys = Math.floor,_s = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g,Is = /\\$([$&'`]|\\d\\d?)/g;fs(\"replace\", 2, function (e, t, n, r) {var o = r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,i = r.REPLACE_KEEPS_$0,s = o ? \"$\" : \"$0\";return [function (n, r) {var o = d(this),i = null == n ? void 0 : n[e];return void 0 !== i ? i.call(n, o, r) : t.call(String(o), n, r);}, function (e, r) {if (!o && i || \"string\" == typeof r && -1 === r.indexOf(s)) {var u = n(t, e, this, r);if (u.done) return u.value;}var c = D(e),l = String(this),p = \"function\" == typeof r;p || (r = String(r));var f = c.global;if (f) {var h = c.unicode;c.lastIndex = 0;}for (var d = [];;) {var g = gs(c, l);if (null === g) break;if (d.push(g), !f) break;\"\" === String(g[0]) && (c.lastIndex = ds(l, ae(c.lastIndex), h));}for (var m, v = \"\", y = 0, _ = 0; _ < d.length; _++) {g = d[_];for (var I = String(g[0]), E = ms(vs(ie(g.index), l.length), 0), C = [], M = 1; M < g.length; M++) {C.push(void 0 === (m = g[M]) ? m : String(m));}var S = g.groups;if (p) {var T = [I].concat(C, E, l);void 0 !== S && T.push(S);var A = String(r.apply(void 0, T));} else A = a(I, l, E, C, S, r);E >= y && (v += l.slice(y, E) + A, y = E + I.length);}return v + l.slice(y);}];function a(e, n, r, o, i, s) {var a = r + e.length,u = o.length,c = Is;return void 0 !== i && (i = Ne(i), c = _s), t.call(s, c, function (t, s) {var c;switch (s.charAt(0)) {case \"$\":return \"$\";case \"&\":return e;case \"`\":return n.slice(0, r);case \"'\":return n.slice(a);case \"<\":c = i[s.slice(1, -1)];break;default:var l = +s;if (0 === l) return t;if (l > u) {var p = ys(l / 10);return 0 === p ? t : p <= u ? void 0 === o[p - 1] ? s.charAt(1) : o[p - 1] + s.charAt(1) : t;}c = o[l - 1];}return void 0 === c ? \"\" : c;});}});var Es = qe(\"iterator\"),Cs = qe(\"toStringTag\"),Ms = yr.values;for (var Ss in rn) {var Ts = r[Ss],Ds = Ts && Ts.prototype;if (Ds) {if (Ds[Es] !== Ms) try {R(Ds, Es, Ms);} catch (c_) {Ds[Es] = Ms;}if (Ds[Cs] || R(Ds, Cs, Ss), rn[Ss]) for (var As in yr) {if (Ds[As] !== yr[As]) try {R(Ds, As, yr[As]);} catch (c_) {Ds[As] = yr[As];}}}}var ks = Hr.trim,Rs = r.parseFloat,Os = 1 / Rs(Fr + \"-0\") != -Infinity ? function (e) {var t = ks(String(e)),n = Rs(t);return 0 === n && \"-\" == t.charAt(0) ? -0 : n;} : Rs;Re({ global: !0, forced: parseFloat != Os }, { parseFloat: Os });var ws = \"undefined\" != typeof window,Ns = \"undefined\" != typeof wx && \"function\" == typeof wx.getSystemInfoSync,Ls = ws && window.navigator && window.navigator.userAgent || \"\",bs = /AppleWebKit\\/([\\d.]+)/i.exec(Ls),Ps = (bs && parseFloat(bs.pop()), /iPad/i.test(Ls)),Gs = (/iPhone/i.test(Ls), /iPod/i.test(Ls), function () {var e = Ls.match(/OS (\\d+)_/i);e && e[1] && e[1];}(), /Android/i.test(Ls)),Us = function () {var e = Ls.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);if (!e) return null;var t = e[1] && parseFloat(e[1]),n = e[2] && parseFloat(e[2]);return t && n ? parseFloat(e[1] + \".\" + e[2]) : t || null;}(),xs = (Gs && /webkit/i.test(Ls), /Firefox/i.test(Ls), /Edge/i.test(Ls)),qs = !xs && /Chrome/i.test(Ls),Fs = (function () {var e = Ls.match(/Chrome\\/(\\d+)/);e && e[1] && parseFloat(e[1]);}(), /MSIE/.test(Ls)),Vs = (/MSIE\\s8\\.0/.test(Ls), function () {var e = /MSIE\\s(\\d+)\\.\\d/.exec(Ls),t = e && parseFloat(e[1]);return !t && /Trident\\/7.0/i.test(Ls) && /rv:11.0/.test(Ls) && (t = 11), t;}()),Bs = (/Safari/i.test(Ls), /TBS\\/\\d+/i.test(Ls)),js = (function () {var e = Ls.match(/TBS\\/(\\d+)/i);if (e && e[1]) e[1];}(), !Bs && /MQQBrowser\\/\\d+/i.test(Ls), !Bs && / QQBrowser\\/\\d+/i.test(Ls), /(micromessenger|webbrowser)/i.test(Ls)),Ks = (/Windows/i.test(Ls), /MAC OS X/i.test(Ls), /MicroMessenger/i.test(Ls), yn(\"splice\")),Hs = ze(\"splice\", { ACCESSORS: !0, 0: 0, 1: 2 }),Ys = Math.max,$s = Math.min;Re({ target: \"Array\", proto: !0, forced: !Ks || !Hs }, { splice: function splice(e, t) {var n,r,o,i,s,a,u = Ne(this),c = ae(u.length),l = le(e, c),p = arguments.length;if (0 === p ? n = r = 0 : 1 === p ? (n = 0, r = c - l) : (n = p - 2, r = $s(Ys(ie(t), 0), c - l)), c + n - r > 9007199254740991) throw TypeError(\"Maximum allowed length exceeded\");for (o = Ve(u, r), i = 0; i < r; i++) {(s = l + i) in u && it(o, i, u[s]);}if (o.length = r, n < r) {for (i = l; i < c - r; i++) {a = i + n, (s = i + r) in u ? u[a] = u[s] : delete u[a];}for (i = c; i > c - r + n; i--) {delete u[i - 1];}} else if (n > r) for (i = c - r; i > l; i--) {a = i + n - 1, (s = i + r - 1) in u ? u[a] = u[s] : delete u[a];}for (i = 0; i < n; i++) {u[i + l] = arguments[i + 2];}return u.length = c - r + n, o;} });var Ws,zs,Xs = !o(function () {return Object.isExtensible(Object.preventExtensions({}));}),Js = t(function (e) {var t = k.f,n = B(\"meta\"),r = 0,o = Object.isExtensible || function () {return !0;},i = function i(e) {t(e, n, { value: { objectID: \"O\" + ++r, weakData: {} } });},s = e.exports = { REQUIRED: !1, fastKey: function fastKey(e, t) {if (!m(e)) return \"symbol\" == typeof e ? e : (\"string\" == typeof e ? \"S\" : \"P\") + e;if (!_(e, n)) {if (!o(e)) return \"F\";if (!t) return \"E\";i(e);}return e[n].objectID;}, getWeakData: function getWeakData(e, t) {if (!_(e, n)) {if (!o(e)) return !0;if (!t) return !1;i(e);}return e[n].weakData;}, onFreeze: function onFreeze(e) {return Xs && s.REQUIRED && o(e) && !_(e, n) && i(e), e;} };H[n] = !0;}),Qs = (Js.REQUIRED, Js.fastKey, Js.getWeakData, Js.onFreeze, k.f),Zs = Js.fastKey,ea = Q.set,ta = Q.getterFor,na = (function (e, t, n) {var i = -1 !== e.indexOf(\"Map\"),s = -1 !== e.indexOf(\"Weak\"),a = i ? \"set\" : \"add\",u = r[e],c = u && u.prototype,l = u,p = {},f = function f(e) {var t = c[e];Z(c, e, \"add\" == e ? function (e) {return t.call(this, 0 === e ? 0 : e), this;} : \"delete\" == e ? function (e) {return !(s && !m(e)) && t.call(this, 0 === e ? 0 : e);} : \"get\" == e ? function (e) {return s && !m(e) ? void 0 : t.call(this, 0 === e ? 0 : e);} : \"has\" == e ? function (e) {return !(s && !m(e)) && t.call(this, 0 === e ? 0 : e);} : function (e, n) {return t.call(this, 0 === e ? 0 : e, n), this;});};if (Ae(e, \"function\" != typeof u || !(s || c.forEach && !o(function () {new u().entries().next();})))) l = n.getConstructor(t, e, i, a), Js.REQUIRED = !0;else if (Ae(e, !0)) {var h = new l(),d = h[a](s ? {} : -0, 1) != h,g = o(function () {h.has(1);}),v = yt(function (e) {new u(e);}),y = !s && o(function () {for (var e = new u(), t = 5; t--;) {e[a](t, t);}return !e.has(-0);});v || ((l = t(function (t, n) {So(t, l, e);var r = qr(new u(), t, l);return null != n && To(n, r[a], r, i), r;})).prototype = c, c.constructor = l), (g || y) && (f(\"delete\"), f(\"has\"), i && f(\"get\")), (y || d) && f(a), s && c.clear && delete c.clear;}p[e] = l, Re({ global: !0, forced: l != u }, p), Kt(l, e), s || n.setStrong(l, e, i);}(\"Map\", function (e) {return function () {return e(this, arguments.length ? arguments[0] : void 0);};}, { getConstructor: function getConstructor(e, t, n, r) {var o = e(function (e, s) {So(e, o, t), ea(e, { type: t, index: kt(null), first: void 0, last: void 0, size: 0 }), i || (e.size = 0), null != s && To(s, e[r], e, n);}),s = ta(t),a = function a(e, t, n) {var r,o,a = s(e),c = u(e, t);return c ? c.value = n : (a.last = c = { index: o = Zs(t, !0), key: t, value: n, previous: r = a.last, next: void 0, removed: !1 }, a.first || (a.first = c), r && (r.next = c), i ? a.size++ : e.size++, \"F\" !== o && (a.index[o] = c)), e;},u = function u(e, t) {var n,r = s(e),o = Zs(t);if (\"F\" !== o) return r.index[o];for (n = r.first; n; n = n.next) {if (n.key == t) return n;}};return Eo(o.prototype, { clear: function clear() {for (var e = s(this), t = e.index, n = e.first; n;) {n.removed = !0, n.previous && (n.previous = n.previous.next = void 0), delete t[n.index], n = n.next;}e.first = e.last = void 0, i ? e.size = 0 : this.size = 0;}, delete: function _delete(e) {var t = s(this),n = u(this, e);if (n) {var r = n.next,o = n.previous;delete t.index[n.index], n.removed = !0, o && (o.next = r), r && (r.previous = o), t.first == n && (t.first = r), t.last == n && (t.last = o), i ? t.size-- : this.size--;}return !!n;}, forEach: function forEach(e) {for (var t, n = s(this), r = we(e, arguments.length > 1 ? arguments[1] : void 0, 3); t = t ? t.next : n.first;) {for (r(t.value, t.key, this); t && t.removed;) {t = t.previous;}}}, has: function has(e) {return !!u(this, e);} }), Eo(o.prototype, n ? { get: function get(e) {var t = u(this, e);return t && t.value;}, set: function set(e, t) {return a(this, 0 === e ? 0 : e, t);} } : { add: function add(e) {return a(this, e = 0 === e ? 0 : e, e);} }), i && Qs(o.prototype, \"size\", { get: function get() {return s(this).size;} }), o;}, setStrong: function setStrong(e, t, n) {var r = t + \" Iterator\",o = ta(t),i = ta(r);Zt(e, t, function (e, t) {ea(this, { type: r, target: e, state: o(e), kind: t, last: void 0 });}, function () {for (var e = i(this), t = e.kind, n = e.last; n && n.removed;) {n = n.previous;}return e.target && (e.last = n = n ? n.next : e.state.first) ? \"keys\" == t ? { value: n.key, done: !1 } : \"values\" == t ? { value: n.value, done: !1 } : { value: [n.key, n.value], done: !1 } : (e.target = void 0, { value: void 0, done: !0 });}, n ? \"entries\" : \"values\", !n, !0), Mo(t);} }), \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});Ws = \"undefined\" != typeof console ? console : void 0 !== na && na.console ? na.console : \"undefined\" != typeof window && window.console ? window.console : {};for (var ra = function ra() {}, oa = [\"assert\", \"clear\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"exception\", \"group\", \"groupCollapsed\", \"groupEnd\", \"info\", \"log\", \"markTimeline\", \"profile\", \"profileEnd\", \"table\", \"time\", \"timeEnd\", \"timeStamp\", \"trace\", \"warn\"], ia = oa.length; ia--;) {zs = oa[ia], console[zs] || (Ws[zs] = ra);}Ws.methods = oa;var sa = Ws,aa = 0,ua = new Map();function ca() {var e = new Date();return \"TIM \" + e.toLocaleTimeString(\"en-US\", { hour12: !1 }) + \".\" + function (e) {var t;switch (e.toString().length) {case 1:t = \"00\" + e;break;case 2:t = \"0\" + e;break;default:t = e;}return t;}(e.getMilliseconds()) + \":\";}var la = { _data: [], _length: 0, _visible: !1, arguments2String: function arguments2String(e) {var t;if (1 === e.length) t = ca() + e[0];else {t = ca();for (var n = 0, r = e.length; n < r; n++) {ya(e[n]) ? Ia(e[n]) ? t += Da(e[n]) : t += JSON.stringify(e[n]) : t += e[n], t += \" \";}}return t;}, debug: function debug() {if (aa <= -1) {var e = this.arguments2String(arguments);la.record(e, \"debug\"), sa.debug(e);}}, log: function log() {if (aa <= 0) {var e = this.arguments2String(arguments);la.record(e, \"log\"), sa.log(e);}}, info: function info() {if (aa <= 1) {var e = this.arguments2String(arguments);la.record(e, \"info\"), sa.info(e);}}, warn: function warn() {if (aa <= 2) {var e = this.arguments2String(arguments);la.record(e, \"warn\"), sa.warn(e);}}, error: function error() {if (aa <= 3) {var e = this.arguments2String(arguments);la.record(e, \"error\"), sa.error(e);}}, time: function time(e) {ua.set(e, Sa.now());}, timeEnd: function timeEnd(e) {if (ua.has(e)) {var t = Sa.now() - ua.get(e);return ua.delete(e), t;}return sa.warn(\"未找到对应label: \".concat(e, \", 请在调用 logger.timeEnd 前，调用 logger.time\")), 0;}, setLevel: function setLevel(e) {e < 4 && sa.log(ca() + \"set level from \" + aa + \" to \" + e), aa = e;}, record: function record(e, t) {1100 === la._length && (la._data.splice(0, 100), la._length = 1e3), la._length++, la._data.push(\"\".concat(e, \" [\").concat(t, \"] \\n\"));}, getLog: function getLog() {return la._data;} },pa = function pa(e) {return \"file\" === Ea(e);},fa = function fa(e) {return null !== e && (\"number\" == typeof e && !isNaN(e - 0) || \"object\" === Dn(e) && e.constructor === Number);},ha = function ha(e) {return \"string\" == typeof e;},da = function da(e) {return null !== e && \"object\" === Dn(e);},ga = function ga(e) {if (\"object\" !== Dn(e) || null === e) return !1;var t = Object.getPrototypeOf(e);if (null === t) return !0;for (var n = t; null !== Object.getPrototypeOf(n);) {n = Object.getPrototypeOf(n);}return t === n;},ma = function ma(e) {return \"function\" == typeof Array.isArray ? Array.isArray(e) : \"array\" === Ea(e);},va = function va(e) {return void 0 === e;},ya = function ya(e) {return ma(e) || da(e);},_a = function _a(e) {return \"function\" == typeof e;},Ia = function Ia(e) {return e instanceof Error;},Ea = function Ea(e) {return Object.prototype.toString.call(e).match(/^\\[object (.*)\\]$/)[1].toLowerCase();},Ca = function Ca(e) {if (\"string\" != typeof e) return !1;var t = e[0];return !/[^a-zA-Z0-9]/.test(t);},Ma = 0;Date.now || (Date.now = function () {return new Date().getTime();});var Sa = { now: function now() {0 === Ma && (Ma = Date.now() - 1);var e = Date.now() - Ma;return e > 4294967295 ? (Ma += 4294967295, Date.now() - Ma) : e;}, utc: function utc() {return Math.round(Date.now() / 1e3);} },Ta = function e(t, n, r, o) {if (!ya(t) || !ya(n)) return 0;for (var i, s = 0, a = Object.keys(n), u = 0, c = a.length; u < c; u++) {if (i = a[u], !(va(n[i]) || r && r.includes(i))) if (ya(t[i]) && ya(n[i])) s += e(t[i], n[i], r, o);else {if (o && o.includes(n[i])) continue;t[i] !== n[i] && (t[i] = n[i], s += 1);}}return s;},Da = function Da(e) {return JSON.stringify(e, [\"message\", \"code\"]);},Aa = function Aa() {var e = new Date(),t = e.toISOString(),n = e.getTimezoneOffset() / 60,r = \"\";return r = n < 0 ? n > -10 ? \"+0\" + Math.abs(100 * n) : \"+\" + Math.abs(100 * n) : n >= 10 ? \"-\" + 100 * n : \"-0\" + 100 * n, t.replace(\"Z\", r);},ka = function ka(e) {if (0 === e.length) return 0;for (var t = 0, n = 0, r = \"undefined\" != typeof document && void 0 !== document.characterSet ? document.characterSet : \"UTF-8\"; void 0 !== e[t];) {n += e[t++].charCodeAt[t] <= 255 ? 1 : !1 === r ? 3 : 2;}return n;},Ra = function Ra(e) {var t = e || 99999999;return Math.round(Math.random() * t);},Oa = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",wa = Oa.length,Na = function Na(e, t) {for (var n in e) {if (e[n] === t) return !0;}return !1;},La = {},ba = function ba() {if (Ns) return \"https:\";var e = window.location.protocol;return [\"http:\", \"https:\"].indexOf(e) < 0 && (e = \"http:\"), e;},Pa = function Pa(e) {return -1 === e.indexOf(\"http://\") || -1 === e.indexOf(\"https://\") ? \"https://\" + e : e.replace(/https|http/, \"https\");};function Ga(e, t) {ma(e) && ma(t) ? t.forEach(function (t) {var n = t.key,r = t.value,o = e.find(function (e) {return e.key === n;});o ? o.value = r : e.push({ key: n, value: r });}) : la.warn(\"updateCustomField target 或 source 不是数组，忽略此次更新。\");}var Ua = function Ua(e) {return e === pn.GRP_PUBLIC;},xa = function xa(e) {return e === pn.GRP_MEETING;},qa = function qa(e) {return e === pn.GRP_AVCHATROOM;},Fa = function Fa(e) {return ha(e) && e === pn.CONV_SYSTEM;};function Va(e, t) {var n = {};return Object.keys(e).forEach(function (r) {n[r] = t(e[r], r);}), n;}var Ba = Object.prototype.hasOwnProperty;function ja(e) {if (null == e) return !0;if (\"boolean\" == typeof e) return !1;if (\"number\" == typeof e) return 0 === e;if (\"string\" == typeof e) return 0 === e.length;if (\"function\" == typeof e) return 0 === e.length;if (Array.isArray(e)) return 0 === e.length;if (e instanceof Error) return \"\" === e.message;if (ga(e)) {for (var t in e) {if (Ba.call(e, t)) return !1;}return !0;}return !(\"map\" !== Ea(e) && !function (e) {return \"set\" === Ea(e);}(e) && !pa(e)) && 0 === e.size;}function Ka(e, t, n) {if (void 0 === t) return !0;var r = !0;if (\"object\" === nr(t).toLowerCase()) Object.keys(t).forEach(function (o) {var i = 1 === e.length ? e[0][o] : void 0;r = !!Ha(i, t[o], n, o) && r;});else if (\"array\" === nr(t).toLowerCase()) for (var o = 0; o < t.length; o++) {r = !!Ha(e[o], t[o], n, t[o].name) && r;}if (r) return r;throw new Error(\"Params validate failed.\");}function Ha(e, t, n, r) {if (void 0 === t) return !0;var o = !0;return t.required && ja(e) && (sa.error(\"TIM [\".concat(n, '] Missing required params: \"').concat(r, '\".')), o = !1), ja(e) || nr(e).toLowerCase() === t.type.toLowerCase() || (sa.error(\"TIM [\".concat(n, '] Invalid params: type check failed for \"').concat(r, '\".Expected ').concat(t.type, \".\")), o = !1), t.validator && !t.validator(e) && (sa.error(\"TIM [\".concat(n, \"] Invalid params: custom validator check failed for params.\")), o = !1), o;}var Ya = { f: qe },$a = k.f,Wa = Ke.forEach,za = K(\"hidden\"),Xa = qe(\"toPrimitive\"),Ja = Q.set,Qa = Q.getterFor(\"Symbol\"),Za = Object.prototype,_eu = r.Symbol,tu = ne(\"JSON\", \"stringify\"),nu = T.f,ru = k.f,ou = ao.f,iu = u.f,su = q(\"symbols\"),au = q(\"op-symbols\"),uu = q(\"string-to-symbol-registry\"),cu = q(\"symbol-to-string-registry\"),lu = q(\"wks\"),pu = r.QObject,fu = !pu || !pu.prototype || !pu.prototype.findChild,hu = i && o(function () {return 7 != kt(ru({}, \"a\", { get: function get() {return ru(this, \"a\", { value: 7 }).a;} })).a;}) ? function (e, t, n) {var r = nu(Za, t);r && delete Za[t], ru(e, t, n), r && e !== Za && ru(Za, t, r);} : ru,du = function du(e, t) {var n = su[e] = kt(_eu.prototype);return Ja(n, { type: \"Symbol\", tag: e, description: t }), i || (n.description = t), n;},gu = Pe ? function (e) {return \"symbol\" == typeof e;} : function (e) {return Object(e) instanceof _eu;},mu = function mu(e, t, n) {e === Za && mu(au, t, n), D(e);var r = v(t, !0);return D(n), _(su, r) ? (n.enumerable ? (_(e, za) && e[za][r] && (e[za][r] = !1), n = kt(n, { enumerable: c(0, !1) })) : (_(e, za) || ru(e, za, c(1, {})), e[za][r] = !0), hu(e, r, n)) : ru(e, r, n);},vu = function vu(e, t) {D(e);var n = g(t),r = Et(n).concat(Eu(n));return Wa(r, function (t) {i && !yu.call(n, t) || mu(e, t, n[t]);}), e;},yu = function yu(e) {var t = v(e, !0),n = iu.call(this, t);return !(this === Za && _(su, t) && !_(au, t)) && (!(n || !_(this, t) || !_(su, t) || _(this, za) && this[za][t]) || n);},_u = function _u(e, t) {var n = g(e),r = v(t, !0);if (n !== Za || !_(su, r) || _(au, r)) {var o = nu(n, r);return !o || !_(su, r) || _(n, za) && n[za][r] || (o.enumerable = !0), o;}},Iu = function Iu(e) {var t = ou(g(e)),n = [];return Wa(t, function (e) {_(su, e) || _(H, e) || n.push(e);}), n;},Eu = function Eu(e) {var t = e === Za,n = ou(t ? au : g(e)),r = [];return Wa(n, function (e) {!_(su, e) || t && !_(Za, e) || r.push(su[e]);}), r;};if (be || (Z((_eu = function eu() {if (this instanceof _eu) throw TypeError(\"Symbol is not a constructor\");var e = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0,t = B(e),n = function n(e) {this === Za && n.call(au, e), _(this, za) && _(this[za], t) && (this[za][t] = !1), hu(this, t, c(1, e));};return i && fu && hu(Za, t, { configurable: !0, set: n }), du(t, e);}).prototype, \"toString\", function () {return Qa(this).tag;}), Z(_eu, \"withoutSetter\", function (e) {return du(B(e), e);}), u.f = yu, k.f = mu, T.f = _u, ve.f = ao.f = Iu, ye.f = Eu, Ya.f = function (e) {return du(qe(e), e);}, i && (ru(_eu.prototype, \"description\", { configurable: !0, get: function get() {return Qa(this).description;} }), Z(Za, \"propertyIsEnumerable\", yu, { unsafe: !0 }))), Re({ global: !0, wrap: !0, forced: !be, sham: !be }, { Symbol: _eu }), Wa(Et(lu), function (e) {!function (e) {var t = ee.Symbol || (ee.Symbol = {});_(t, e) || $a(t, e, { value: Ya.f(e) });}(e);}), Re({ target: \"Symbol\", stat: !0, forced: !be }, { for: function _for(e) {var t = String(e);if (_(uu, t)) return uu[t];var n = _eu(t);return uu[t] = n, cu[n] = t, n;}, keyFor: function keyFor(e) {if (!gu(e)) throw TypeError(e + \" is not a symbol\");if (_(cu, e)) return cu[e];}, useSetter: function useSetter() {fu = !0;}, useSimple: function useSimple() {fu = !1;} }), Re({ target: \"Object\", stat: !0, forced: !be, sham: !i }, { create: function create(e, t) {return void 0 === t ? kt(e) : vu(kt(e), t);}, defineProperty: mu, defineProperties: vu, getOwnPropertyDescriptor: _u }), Re({ target: \"Object\", stat: !0, forced: !be }, { getOwnPropertyNames: Iu, getOwnPropertySymbols: Eu }), Re({ target: \"Object\", stat: !0, forced: o(function () {ye.f(1);}) }, { getOwnPropertySymbols: function getOwnPropertySymbols(e) {return ye.f(Ne(e));} }), tu) {var Cu = !be || o(function () {var e = _eu();return \"[null]\" != tu([e]) || \"{}\" != tu({ a: e }) || \"{}\" != tu(Object(e));});Re({ target: \"JSON\", stat: !0, forced: Cu }, { stringify: function stringify(e, t, n) {for (var r, o = [e], i = 1; arguments.length > i;) {o.push(arguments[i++]);}if (r = t, (m(t) || void 0 !== e) && !gu(e)) return Le(t) || (t = function t(e, _t3) {if (\"function\" == typeof r && (_t3 = r.call(this, e, _t3)), !gu(_t3)) return _t3;}), o[1] = t, tu.apply(null, o);} });}_eu.prototype[Xa] || R(_eu.prototype, Xa, _eu.prototype.valueOf), Kt(_eu, \"Symbol\"), H[za] = !0;var Mu = k.f,Su = r.Symbol;if (i && \"function\" == typeof Su && (!(\"description\" in Su.prototype) || void 0 !== Su().description)) {var Tu = {},Du = function Du() {var e = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),t = this instanceof Du ? new Su(e) : void 0 === e ? Su() : Su(e);return \"\" === e && (Tu[t] = !0), t;};Ie(Du, Su);var Au = Du.prototype = Su.prototype;Au.constructor = Du;var ku = Au.toString,Ru = \"Symbol(test)\" == String(Su(\"test\")),Ou = /^Symbol\\((.*)\\)[^)]+$/;Mu(Au, \"description\", { configurable: !0, get: function get() {var e = m(this) ? this.valueOf() : this,t = ku.call(e);if (_(Tu, e)) return \"\";var n = Ru ? t.slice(7, -1) : t.replace(Ou, \"$1\");return \"\" === n ? void 0 : n;} }), Re({ global: !0, forced: !0 }, { Symbol: Du });}var wu = u.f,Nu = function Nu(e) {return function (t) {for (var n, r = g(t), o = Et(r), s = o.length, a = 0, u = []; s > a;) {n = o[a++], i && !wu.call(r, n) || u.push(e ? [n, r[n]] : r[n]);}return u;};},Lu = { entries: Nu(!0), values: Nu(!1) }.values;Re({ target: \"Object\", stat: !0 }, { values: function values(e) {return Lu(e);} });var bu = { SUCCESS: \"JoinedSuccess\", WAIT_APPROVAL: \"WaitAdminApproval\" },Pu = { SUCCESS: 0 },Gu = { IS_LOGIN: 1, IS_NOT_LOGIN: 0 },Uu = { UNSEND: \"unSend\", SUCCESS: \"success\", FAIL: \"fail\" },xu = { NOT_START: \"notStart\", PENDING: \"pengding\", RESOLVED: \"resolved\", REJECTED: \"rejected\" },qu = function () {function e(t) {An(this, e), this.type = pn.MSG_TEXT, this.content = { text: t.text || \"\" };}return Rn(e, [{ key: \"setText\", value: function value(e) {this.content.text = e;} }, { key: \"sendable\", value: function value() {return 0 !== this.content.text.length;} }]), e;}(),Fu = qe(\"iterator\"),Vu = !o(function () {var e = new URL(\"b?a=1&b=2&c=3\", \"http://a\"),t = e.searchParams,n = \"\";return e.pathname = \"c%20d\", t.forEach(function (e, r) {t.delete(\"b\"), n += r + e;}), !t.sort || \"http://a/c%20d?a=1&c=3\" !== e.href || \"3\" !== t.get(\"c\") || \"a=1\" !== String(new URLSearchParams(\"?a=1\")) || !t[Fu] || \"a\" !== new URL(\"https://a@b\").username || \"b\" !== new URLSearchParams(new URLSearchParams(\"a=b\")).get(\"a\") || \"xn--e1aybc\" !== new URL(\"http://тест\").host || \"#%D0%B1\" !== new URL(\"http://a#б\").hash || \"a1c3\" !== n || \"x\" !== new URL(\"http://x\", void 0).host;}),Bu = Object.assign,ju = Object.defineProperty,Ku = !Bu || o(function () {if (i && 1 !== Bu({ b: 1 }, Bu(ju({}, \"a\", { enumerable: !0, get: function get() {ju(this, \"b\", { value: 3, enumerable: !1 });} }), { b: 2 })).b) return !0;var e = {},t = {},n = Symbol();return e[n] = 7, \"abcdefghijklmnopqrst\".split(\"\").forEach(function (e) {t[e] = e;}), 7 != Bu({}, e)[n] || \"abcdefghijklmnopqrst\" != Et(Bu({}, t)).join(\"\");}) ? function (e, t) {for (var n = Ne(e), r = arguments.length, o = 1, s = ye.f, a = u.f; r > o;) {for (var c, l = h(arguments[o++]), p = s ? Et(l).concat(s(l)) : Et(l), f = p.length, d = 0; f > d;) {c = p[d++], i && !a.call(l, c) || (n[c] = l[c]);}}return n;} : Bu,Hu = /[^\\0-\\u007E]/,Yu = /[.\\u3002\\uFF0E\\uFF61]/g,$u = \"Overflow: input needs wider integers to process\",Wu = Math.floor,zu = String.fromCharCode,Xu = function Xu(e) {return e + 22 + 75 * (e < 26);},Ju = function Ju(e, t, n) {var r = 0;for (e = n ? Wu(e / 700) : e >> 1, e += Wu(e / t); e > 455; r += 36) {e = Wu(e / 35);}return Wu(r + 36 * e / (e + 38));},Qu = function Qu(e) {var t,n,r = [],o = (e = function (e) {for (var t = [], n = 0, r = e.length; n < r;) {var o = e.charCodeAt(n++);if (o >= 55296 && o <= 56319 && n < r) {var i = e.charCodeAt(n++);56320 == (64512 & i) ? t.push(((1023 & o) << 10) + (1023 & i) + 65536) : (t.push(o), n--);} else t.push(o);}return t;}(e)).length,i = 128,s = 0,a = 72;for (t = 0; t < e.length; t++) {(n = e[t]) < 128 && r.push(zu(n));}var u = r.length,c = u;for (u && r.push(\"-\"); c < o;) {var l = 2147483647;for (t = 0; t < e.length; t++) {(n = e[t]) >= i && n < l && (l = n);}var p = c + 1;if (l - i > Wu((2147483647 - s) / p)) throw RangeError($u);for (s += (l - i) * p, i = l, t = 0; t < e.length; t++) {if ((n = e[t]) < i && ++s > 2147483647) throw RangeError($u);if (n == i) {for (var f = s, h = 36;; h += 36) {var d = h <= a ? 1 : h >= a + 26 ? 26 : h - a;if (f < d) break;var g = f - d,m = 36 - d;r.push(zu(Xu(d + g % m))), f = Wu(g / m);}r.push(zu(Xu(f))), a = Ju(s, p, c == u), s = 0, ++c;}}++s, ++i;}return r.join(\"\");},Zu = function Zu(e) {var t = ft(e);if (\"function\" != typeof t) throw TypeError(String(e) + \" is not iterable\");return D(t.call(e));},ec = ne(\"fetch\"),tc = ne(\"Headers\"),nc = qe(\"iterator\"),rc = Q.set,oc = Q.getterFor(\"URLSearchParams\"),ic = Q.getterFor(\"URLSearchParamsIterator\"),sc = /\\+/g,ac = Array(4),uc = function uc(e) {return ac[e - 1] || (ac[e - 1] = RegExp(\"((?:%[\\\\da-f]{2}){\" + e + \"})\", \"gi\"));},cc = function cc(e) {try {return decodeURIComponent(e);} catch (c_) {return e;}},lc = function lc(e) {var t = e.replace(sc, \" \"),n = 4;try {return decodeURIComponent(t);} catch (c_) {for (; n;) {t = t.replace(uc(n--), cc);}return t;}},pc = /[!'()~]|%20/g,fc = { \"!\": \"%21\", \"'\": \"%27\", \"(\": \"%28\", \")\": \"%29\", \"~\": \"%7E\", \"%20\": \"+\" },hc = function hc(e) {return fc[e];},dc = function dc(e) {return encodeURIComponent(e).replace(pc, hc);},gc = function gc(e, t) {if (t) for (var n, r, o = t.split(\"&\"), i = 0; i < o.length;) {(n = o[i++]).length && (r = n.split(\"=\"), e.push({ key: lc(r.shift()), value: lc(r.join(\"=\")) }));}},mc = function mc(e) {this.entries.length = 0, gc(this.entries, e);},vc = function vc(e, t) {if (e < t) throw TypeError(\"Not enough arguments\");},yc = $t(function (e, t) {rc(this, { type: \"URLSearchParamsIterator\", iterator: Zu(oc(e).entries), kind: t });}, \"Iterator\", function () {var e = ic(this),t = e.kind,n = e.iterator.next(),r = n.value;return n.done || (n.value = \"keys\" === t ? r.key : \"values\" === t ? r.value : [r.key, r.value]), n;}),_c = function _c() {So(this, _c, \"URLSearchParams\");var e,t,n,r,o,i,s,a,u,c = arguments.length > 0 ? arguments[0] : void 0,l = this,p = [];if (rc(l, { type: \"URLSearchParams\", entries: p, updateURL: function updateURL() {}, updateSearchParams: mc }), void 0 !== c) if (m(c)) {if (\"function\" == typeof (e = ft(c))) for (n = (t = e.call(c)).next; !(r = n.call(t)).done;) {if ((s = (i = (o = Zu(D(r.value))).next).call(o)).done || (a = i.call(o)).done || !i.call(o).done) throw TypeError(\"Expected sequence with length 2\");p.push({ key: s.value + \"\", value: a.value + \"\" });} else for (u in c) {_(c, u) && p.push({ key: u, value: c[u] + \"\" });}} else gc(p, \"string\" == typeof c ? \"?\" === c.charAt(0) ? c.slice(1) : c : c + \"\");},Ic = _c.prototype;Eo(Ic, { append: function append(e, t) {vc(arguments.length, 2);var n = oc(this);n.entries.push({ key: e + \"\", value: t + \"\" }), n.updateURL();}, delete: function _delete(e) {vc(arguments.length, 1);for (var t = oc(this), n = t.entries, r = e + \"\", o = 0; o < n.length;) {n[o].key === r ? n.splice(o, 1) : o++;}t.updateURL();}, get: function get(e) {vc(arguments.length, 1);for (var t = oc(this).entries, n = e + \"\", r = 0; r < t.length; r++) {if (t[r].key === n) return t[r].value;}return null;}, getAll: function getAll(e) {vc(arguments.length, 1);for (var t = oc(this).entries, n = e + \"\", r = [], o = 0; o < t.length; o++) {t[o].key === n && r.push(t[o].value);}return r;}, has: function has(e) {vc(arguments.length, 1);for (var t = oc(this).entries, n = e + \"\", r = 0; r < t.length;) {if (t[r++].key === n) return !0;}return !1;}, set: function set(e, t) {vc(arguments.length, 1);for (var n, r = oc(this), o = r.entries, i = !1, s = e + \"\", a = t + \"\", u = 0; u < o.length; u++) {(n = o[u]).key === s && (i ? o.splice(u--, 1) : (i = !0, n.value = a));}i || o.push({ key: s, value: a }), r.updateURL();}, sort: function sort() {var e,t,n,r = oc(this),o = r.entries,i = o.slice();for (o.length = 0, n = 0; n < i.length; n++) {for (e = i[n], t = 0; t < n; t++) {if (o[t].key > e.key) {o.splice(t, 0, e);break;}}t === n && o.push(e);}r.updateURL();}, forEach: function forEach(e) {for (var t, n = oc(this).entries, r = we(e, arguments.length > 1 ? arguments[1] : void 0, 3), o = 0; o < n.length;) {r((t = n[o++]).value, t.key, this);}}, keys: function keys() {return new yc(this, \"keys\");}, values: function values() {return new yc(this, \"values\");}, entries: function entries() {return new yc(this, \"entries\");} }, { enumerable: !0 }), Z(Ic, nc, Ic.entries), Z(Ic, \"toString\", function () {for (var e, t = oc(this).entries, n = [], r = 0; r < t.length;) {e = t[r++], n.push(dc(e.key) + \"=\" + dc(e.value));}return n.join(\"&\");}, { enumerable: !0 }), Kt(_c, \"URLSearchParams\"), Re({ global: !0, forced: !Vu }, { URLSearchParams: _c }), Vu || \"function\" != typeof ec || \"function\" != typeof tc || Re({ global: !0, enumerable: !0, forced: !0 }, { fetch: function fetch(e) {var t,n,r,o = [e];return arguments.length > 1 && (t = arguments[1], m(t) && (n = t.body, \"URLSearchParams\" === lt(n) && ((r = t.headers ? new tc(t.headers) : new tc()).has(\"content-type\") || r.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"), t = kt(t, { body: c(0, String(n)), headers: c(0, r) }))), o.push(t)), ec.apply(this, o);} });var Ec,Cc = { URLSearchParams: _c, getState: oc },Mc = bt.codeAt,Sc = r.URL,Tc = Cc.URLSearchParams,Dc = Cc.getState,Ac = Q.set,kc = Q.getterFor(\"URL\"),Rc = Math.floor,Oc = Math.pow,wc = /[A-Za-z]/,Nc = /[\\d+\\-.A-Za-z]/,Lc = /\\d/,bc = /^(0x|0X)/,Pc = /^[0-7]+$/,Gc = /^\\d+$/,Uc = /^[\\dA-Fa-f]+$/,xc = /[\\u0000\\u0009\\u000A\\u000D #%/:?@[\\\\]]/,qc = /[\\u0000\\u0009\\u000A\\u000D #/:?@[\\\\]]/,Fc = /^[\\u0000-\\u001F ]+|[\\u0000-\\u001F ]+$/g,Vc = /[\\u0009\\u000A\\u000D]/g,Bc = function Bc(e, t) {var n, r, o;if (\"[\" == t.charAt(0)) {if (\"]\" != t.charAt(t.length - 1)) return \"Invalid host\";if (!(n = Kc(t.slice(1, -1)))) return \"Invalid host\";e.host = n;} else if (Qc(e)) {if (t = function (e) {var t,n,r = [],o = e.toLowerCase().replace(Yu, \".\").split(\".\");for (t = 0; t < o.length; t++) {n = o[t], r.push(Hu.test(n) ? \"xn--\" + Qu(n) : n);}return r.join(\".\");}(t), xc.test(t)) return \"Invalid host\";if (null === (n = jc(t))) return \"Invalid host\";e.host = n;} else {if (qc.test(t)) return \"Invalid host\";for (n = \"\", r = ht(t), o = 0; o < r.length; o++) {n += Xc(r[o], Yc);}e.host = n;}},jc = function jc(e) {var t,n,r,o,i,s,a,u = e.split(\".\");if (u.length && \"\" == u[u.length - 1] && u.pop(), (t = u.length) > 4) return e;for (n = [], r = 0; r < t; r++) {if (\"\" == (o = u[r])) return e;if (i = 10, o.length > 1 && \"0\" == o.charAt(0) && (i = bc.test(o) ? 16 : 8, o = o.slice(8 == i ? 1 : 2)), \"\" === o) s = 0;else {if (!(10 == i ? Gc : 8 == i ? Pc : Uc).test(o)) return e;s = parseInt(o, i);}n.push(s);}for (r = 0; r < t; r++) {if (s = n[r], r == t - 1) {if (s >= Oc(256, 5 - t)) return null;} else if (s > 255) return null;}for (a = n.pop(), r = 0; r < n.length; r++) {a += n[r] * Oc(256, 3 - r);}return a;},Kc = function Kc(e) {var t,n,r,o,i,s,a,u = [0, 0, 0, 0, 0, 0, 0, 0],c = 0,l = null,p = 0,f = function f() {return e.charAt(p);};if (\":\" == f()) {if (\":\" != e.charAt(1)) return;p += 2, l = ++c;}for (; f();) {if (8 == c) return;if (\":\" != f()) {for (t = n = 0; n < 4 && Uc.test(f());) {t = 16 * t + parseInt(f(), 16), p++, n++;}if (\".\" == f()) {if (0 == n) return;if (p -= n, c > 6) return;for (r = 0; f();) {if (o = null, r > 0) {if (!(\".\" == f() && r < 4)) return;p++;}if (!Lc.test(f())) return;for (; Lc.test(f());) {if (i = parseInt(f(), 10), null === o) o = i;else {if (0 == o) return;o = 10 * o + i;}if (o > 255) return;p++;}u[c] = 256 * u[c] + o, 2 != ++r && 4 != r || c++;}if (4 != r) return;break;}if (\":\" == f()) {if (p++, !f()) return;} else if (f()) return;u[c++] = t;} else {if (null !== l) return;p++, l = ++c;}}if (null !== l) for (s = c - l, c = 7; 0 != c && s > 0;) {a = u[c], u[c--] = u[l + s - 1], u[l + --s] = a;} else if (8 != c) return;return u;},Hc = function Hc(e) {var t, n, r, o;if (\"number\" == typeof e) {for (t = [], n = 0; n < 4; n++) {t.unshift(e % 256), e = Rc(e / 256);}return t.join(\".\");}if (\"object\" == typeof e) {for (t = \"\", r = function (e) {for (var t = null, n = 1, r = null, o = 0, i = 0; i < 8; i++) {0 !== e[i] ? (o > n && (t = r, n = o), r = null, o = 0) : (null === r && (r = i), ++o);}return o > n && (t = r, n = o), t;}(e), n = 0; n < 8; n++) {o && 0 === e[n] || (o && (o = !1), r === n ? (t += n ? \":\" : \"::\", o = !0) : (t += e[n].toString(16), n < 7 && (t += \":\")));}return \"[\" + t + \"]\";}return e;},Yc = {},$c = Ku({}, Yc, { \" \": 1, '\"': 1, \"<\": 1, \">\": 1, \"`\": 1 }),Wc = Ku({}, $c, { \"#\": 1, \"?\": 1, \"{\": 1, \"}\": 1 }),zc = Ku({}, Wc, { \"/\": 1, \":\": 1, \";\": 1, \"=\": 1, \"@\": 1, \"[\": 1, \"\\\\\": 1, \"]\": 1, \"^\": 1, \"|\": 1 }),Xc = function Xc(e, t) {var n = Mc(e, 0);return n > 32 && n < 127 && !_(t, e) ? e : encodeURIComponent(e);},Jc = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 },Qc = function Qc(e) {return _(Jc, e.scheme);},Zc = function Zc(e) {return \"\" != e.username || \"\" != e.password;},el = function el(e) {return !e.host || e.cannotBeABaseURL || \"file\" == e.scheme;},tl = function tl(e, t) {var n;return 2 == e.length && wc.test(e.charAt(0)) && (\":\" == (n = e.charAt(1)) || !t && \"|\" == n);},nl = function nl(e) {var t;return e.length > 1 && tl(e.slice(0, 2)) && (2 == e.length || \"/\" === (t = e.charAt(2)) || \"\\\\\" === t || \"?\" === t || \"#\" === t);},rl = function rl(e) {var t = e.path,n = t.length;!n || \"file\" == e.scheme && 1 == n && tl(t[0], !0) || t.pop();},ol = function ol(e) {return \".\" === e || \"%2e\" === e.toLowerCase();},il = {},sl = {},al = {},ul = {},cl = {},ll = {},pl = {},fl = {},hl = {},dl = {},gl = {},ml = {},vl = {},yl = {},_l = {},Il = {},El = {},Cl = {},Ml = {},Sl = {},Tl = {},Dl = function Dl(e, t, n, r) {var o,i,s,a,u,c = n || il,l = 0,p = \"\",f = !1,h = !1,d = !1;for (n || (e.scheme = \"\", e.username = \"\", e.password = \"\", e.host = null, e.port = null, e.path = [], e.query = null, e.fragment = null, e.cannotBeABaseURL = !1, t = t.replace(Fc, \"\")), t = t.replace(Vc, \"\"), o = ht(t); l <= o.length;) {switch (i = o[l], c) {case il:if (!i || !wc.test(i)) {if (n) return \"Invalid scheme\";c = al;continue;}p += i.toLowerCase(), c = sl;break;case sl:if (i && (Nc.test(i) || \"+\" == i || \"-\" == i || \".\" == i)) p += i.toLowerCase();else {if (\":\" != i) {if (n) return \"Invalid scheme\";p = \"\", c = al, l = 0;continue;}if (n && (Qc(e) != _(Jc, p) || \"file\" == p && (Zc(e) || null !== e.port) || \"file\" == e.scheme && !e.host)) return;if (e.scheme = p, n) return void (Qc(e) && Jc[e.scheme] == e.port && (e.port = null));p = \"\", \"file\" == e.scheme ? c = yl : Qc(e) && r && r.scheme == e.scheme ? c = ul : Qc(e) ? c = fl : \"/\" == o[l + 1] ? (c = cl, l++) : (e.cannotBeABaseURL = !0, e.path.push(\"\"), c = Ml);}break;case al:if (!r || r.cannotBeABaseURL && \"#\" != i) return \"Invalid scheme\";if (r.cannotBeABaseURL && \"#\" == i) {e.scheme = r.scheme, e.path = r.path.slice(), e.query = r.query, e.fragment = \"\", e.cannotBeABaseURL = !0, c = Tl;break;}c = \"file\" == r.scheme ? yl : ll;continue;case ul:if (\"/\" != i || \"/\" != o[l + 1]) {c = ll;continue;}c = hl, l++;break;case cl:if (\"/\" == i) {c = dl;break;}c = Cl;continue;case ll:if (e.scheme = r.scheme, i == Ec) e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = r.query;else if (\"/\" == i || \"\\\\\" == i && Qc(e)) c = pl;else if (\"?\" == i) e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = \"\", c = Sl;else {if (\"#\" != i) {e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.path.pop(), c = Cl;continue;}e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, e.path = r.path.slice(), e.query = r.query, e.fragment = \"\", c = Tl;}break;case pl:if (!Qc(e) || \"/\" != i && \"\\\\\" != i) {if (\"/\" != i) {e.username = r.username, e.password = r.password, e.host = r.host, e.port = r.port, c = Cl;continue;}c = dl;} else c = hl;break;case fl:if (c = hl, \"/\" != i || \"/\" != p.charAt(l + 1)) continue;l++;break;case hl:if (\"/\" != i && \"\\\\\" != i) {c = dl;continue;}break;case dl:if (\"@\" == i) {f && (p = \"%40\" + p), f = !0, s = ht(p);for (var g = 0; g < s.length; g++) {var m = s[g];if (\":\" != m || d) {var v = Xc(m, zc);d ? e.password += v : e.username += v;} else d = !0;}p = \"\";} else if (i == Ec || \"/\" == i || \"?\" == i || \"#\" == i || \"\\\\\" == i && Qc(e)) {if (f && \"\" == p) return \"Invalid authority\";l -= ht(p).length + 1, p = \"\", c = gl;} else p += i;break;case gl:case ml:if (n && \"file\" == e.scheme) {c = Il;continue;}if (\":\" != i || h) {if (i == Ec || \"/\" == i || \"?\" == i || \"#\" == i || \"\\\\\" == i && Qc(e)) {if (Qc(e) && \"\" == p) return \"Invalid host\";if (n && \"\" == p && (Zc(e) || null !== e.port)) return;if (a = Bc(e, p)) return a;if (p = \"\", c = El, n) return;continue;}\"[\" == i ? h = !0 : \"]\" == i && (h = !1), p += i;} else {if (\"\" == p) return \"Invalid host\";if (a = Bc(e, p)) return a;if (p = \"\", c = vl, n == ml) return;}break;case vl:if (!Lc.test(i)) {if (i == Ec || \"/\" == i || \"?\" == i || \"#\" == i || \"\\\\\" == i && Qc(e) || n) {if (\"\" != p) {var y = parseInt(p, 10);if (y > 65535) return \"Invalid port\";e.port = Qc(e) && y === Jc[e.scheme] ? null : y, p = \"\";}if (n) return;c = El;continue;}return \"Invalid port\";}p += i;break;case yl:if (e.scheme = \"file\", \"/\" == i || \"\\\\\" == i) c = _l;else {if (!r || \"file\" != r.scheme) {c = Cl;continue;}if (i == Ec) e.host = r.host, e.path = r.path.slice(), e.query = r.query;else if (\"?\" == i) e.host = r.host, e.path = r.path.slice(), e.query = \"\", c = Sl;else {if (\"#\" != i) {nl(o.slice(l).join(\"\")) || (e.host = r.host, e.path = r.path.slice(), rl(e)), c = Cl;continue;}e.host = r.host, e.path = r.path.slice(), e.query = r.query, e.fragment = \"\", c = Tl;}}break;case _l:if (\"/\" == i || \"\\\\\" == i) {c = Il;break;}r && \"file\" == r.scheme && !nl(o.slice(l).join(\"\")) && (tl(r.path[0], !0) ? e.path.push(r.path[0]) : e.host = r.host), c = Cl;continue;case Il:if (i == Ec || \"/\" == i || \"\\\\\" == i || \"?\" == i || \"#\" == i) {if (!n && tl(p)) c = Cl;else if (\"\" == p) {if (e.host = \"\", n) return;c = El;} else {if (a = Bc(e, p)) return a;if (\"localhost\" == e.host && (e.host = \"\"), n) return;p = \"\", c = El;}continue;}p += i;break;case El:if (Qc(e)) {if (c = Cl, \"/\" != i && \"\\\\\" != i) continue;} else if (n || \"?\" != i) {if (n || \"#\" != i) {if (i != Ec && (c = Cl, \"/\" != i)) continue;} else e.fragment = \"\", c = Tl;} else e.query = \"\", c = Sl;break;case Cl:if (i == Ec || \"/\" == i || \"\\\\\" == i && Qc(e) || !n && (\"?\" == i || \"#\" == i)) {if (\"..\" === (u = (u = p).toLowerCase()) || \"%2e.\" === u || \".%2e\" === u || \"%2e%2e\" === u ? (rl(e), \"/\" == i || \"\\\\\" == i && Qc(e) || e.path.push(\"\")) : ol(p) ? \"/\" == i || \"\\\\\" == i && Qc(e) || e.path.push(\"\") : (\"file\" == e.scheme && !e.path.length && tl(p) && (e.host && (e.host = \"\"), p = p.charAt(0) + \":\"), e.path.push(p)), p = \"\", \"file\" == e.scheme && (i == Ec || \"?\" == i || \"#\" == i)) for (; e.path.length > 1 && \"\" === e.path[0];) {e.path.shift();}\"?\" == i ? (e.query = \"\", c = Sl) : \"#\" == i && (e.fragment = \"\", c = Tl);} else p += Xc(i, Wc);break;case Ml:\"?\" == i ? (e.query = \"\", c = Sl) : \"#\" == i ? (e.fragment = \"\", c = Tl) : i != Ec && (e.path[0] += Xc(i, Yc));break;case Sl:n || \"#\" != i ? i != Ec && (\"'\" == i && Qc(e) ? e.query += \"%27\" : e.query += \"#\" == i ? \"%23\" : Xc(i, Yc)) : (e.fragment = \"\", c = Tl);break;case Tl:i != Ec && (e.fragment += Xc(i, $c));}l++;}},Al = function Al(e) {var t,n,r = So(this, Al, \"URL\"),o = arguments.length > 1 ? arguments[1] : void 0,s = String(e),a = Ac(r, { type: \"URL\" });if (void 0 !== o) if (o instanceof Al) t = kc(o);else if (n = Dl(t = {}, String(o))) throw TypeError(n);if (n = Dl(a, s, null, t)) throw TypeError(n);var u = a.searchParams = new Tc(),c = Dc(u);c.updateSearchParams(a.query), c.updateURL = function () {a.query = String(u) || null;}, i || (r.href = Rl.call(r), r.origin = Ol.call(r), r.protocol = wl.call(r), r.username = Nl.call(r), r.password = Ll.call(r), r.host = bl.call(r), r.hostname = Pl.call(r), r.port = Gl.call(r), r.pathname = Ul.call(r), r.search = xl.call(r), r.searchParams = ql.call(r), r.hash = Fl.call(r));},kl = Al.prototype,Rl = function Rl() {var e = kc(this),t = e.scheme,n = e.username,r = e.password,o = e.host,i = e.port,s = e.path,a = e.query,u = e.fragment,c = t + \":\";return null !== o ? (c += \"//\", Zc(e) && (c += n + (r ? \":\" + r : \"\") + \"@\"), c += Hc(o), null !== i && (c += \":\" + i)) : \"file\" == t && (c += \"//\"), c += e.cannotBeABaseURL ? s[0] : s.length ? \"/\" + s.join(\"/\") : \"\", null !== a && (c += \"?\" + a), null !== u && (c += \"#\" + u), c;},Ol = function Ol() {var e = kc(this),t = e.scheme,n = e.port;if (\"blob\" == t) try {return new URL(t.path[0]).origin;} catch (c_) {return \"null\";}return \"file\" != t && Qc(e) ? t + \"://\" + Hc(e.host) + (null !== n ? \":\" + n : \"\") : \"null\";},wl = function wl() {return kc(this).scheme + \":\";},Nl = function Nl() {return kc(this).username;},Ll = function Ll() {return kc(this).password;},bl = function bl() {var e = kc(this),t = e.host,n = e.port;return null === t ? \"\" : null === n ? Hc(t) : Hc(t) + \":\" + n;},Pl = function Pl() {var e = kc(this).host;return null === e ? \"\" : Hc(e);},Gl = function Gl() {var e = kc(this).port;return null === e ? \"\" : String(e);},Ul = function Ul() {var e = kc(this),t = e.path;return e.cannotBeABaseURL ? t[0] : t.length ? \"/\" + t.join(\"/\") : \"\";},xl = function xl() {var e = kc(this).query;return e ? \"?\" + e : \"\";},ql = function ql() {return kc(this).searchParams;},Fl = function Fl() {var e = kc(this).fragment;return e ? \"#\" + e : \"\";},Vl = function Vl(e, t) {return { get: e, set: t, configurable: !0, enumerable: !0 };};if (i && Ct(kl, { href: Vl(Rl, function (e) {var t = kc(this),n = String(e),r = Dl(t, n);if (r) throw TypeError(r);Dc(t.searchParams).updateSearchParams(t.query);}), origin: Vl(Ol), protocol: Vl(wl, function (e) {var t = kc(this);Dl(t, String(e) + \":\", il);}), username: Vl(Nl, function (e) {var t = kc(this),n = ht(String(e));if (!el(t)) {t.username = \"\";for (var r = 0; r < n.length; r++) {t.username += Xc(n[r], zc);}}}), password: Vl(Ll, function (e) {var t = kc(this),n = ht(String(e));if (!el(t)) {t.password = \"\";for (var r = 0; r < n.length; r++) {t.password += Xc(n[r], zc);}}}), host: Vl(bl, function (e) {var t = kc(this);t.cannotBeABaseURL || Dl(t, String(e), gl);}), hostname: Vl(Pl, function (e) {var t = kc(this);t.cannotBeABaseURL || Dl(t, String(e), ml);}), port: Vl(Gl, function (e) {var t = kc(this);el(t) || (\"\" == (e = String(e)) ? t.port = null : Dl(t, e, vl));}), pathname: Vl(Ul, function (e) {var t = kc(this);t.cannotBeABaseURL || (t.path = [], Dl(t, e + \"\", El));}), search: Vl(xl, function (e) {var t = kc(this);\"\" == (e = String(e)) ? t.query = null : (\"?\" == e.charAt(0) && (e = e.slice(1)), t.query = \"\", Dl(t, e, Sl)), Dc(t.searchParams).updateSearchParams(t.query);}), searchParams: Vl(ql), hash: Vl(Fl, function (e) {var t = kc(this);\"\" != (e = String(e)) ? (\"#\" == e.charAt(0) && (e = e.slice(1)), t.fragment = \"\", Dl(t, e, Tl)) : t.fragment = null;}) }), Z(kl, \"toJSON\", function () {return Rl.call(this);}, { enumerable: !0 }), Z(kl, \"toString\", function () {return Rl.call(this);}, { enumerable: !0 }), Sc) {var Bl = Sc.createObjectURL,jl = Sc.revokeObjectURL;Bl && Z(Al, \"createObjectURL\", function (e) {return Bl.apply(Sc, arguments);}), jl && Z(Al, \"revokeObjectURL\", function (e) {return jl.apply(Sc, arguments);});}Kt(Al, \"URL\"), Re({ global: !0, forced: !Vu, sham: !i }, { URL: Al });var Kl = { JSON: { TYPE: { C2C: { NOTICE: 1, COMMON: 9, EVENT: 10 }, GROUP: { COMMON: 3, TIP: 4, SYSTEM: 5, TIP2: 6 }, FRIEND: { NOTICE: 7 }, PROFILE: { NOTICE: 8 } }, SUBTYPE: { C2C: { COMMON: 0, READED: 92, KICKEDOUT: 96 }, GROUP: { COMMON: 0, LOVEMESSAGE: 1, TIP: 2, REDPACKET: 3 } }, OPTIONS: { GROUP: { JOIN: 1, QUIT: 2, KICK: 3, SET_ADMIN: 4, CANCEL_ADMIN: 5, MODIFY_GROUP_INFO: 6, MODIFY_MEMBER_INFO: 7 } } }, PROTOBUF: {}, IMAGE_TYPES: { ORIGIN: 1, LARGE: 2, SMALL: 3 }, IMAGE_FORMAT: { JPG: 1, JPEG: 1, GIF: 2, PNG: 3, BMP: 4, UNKNOWN: 255 } },Hl = 1,Yl = 2,$l = 3,Wl = 4,zl = 5,Xl = 7,Jl = 8,Ql = 9,Zl = 10,ep = 15,tp = 255,np = 2,rp = 0,op = 1,ip = { NICK: \"Tag_Profile_IM_Nick\", GENDER: \"Tag_Profile_IM_Gender\", BIRTHDAY: \"Tag_Profile_IM_BirthDay\", LOCATION: \"Tag_Profile_IM_Location\", SELFSIGNATURE: \"Tag_Profile_IM_SelfSignature\", ALLOWTYPE: \"Tag_Profile_IM_AllowType\", LANGUAGE: \"Tag_Profile_IM_Language\", AVATAR: \"Tag_Profile_IM_Image\", MESSAGESETTINGS: \"Tag_Profile_IM_MsgSettings\", ADMINFORBIDTYPE: \"Tag_Profile_IM_AdminForbidType\", LEVEL: \"Tag_Profile_IM_Level\", ROLE: \"Tag_Profile_IM_Role\" },sp = { UNKNOWN: \"Gender_Type_Unknown\", FEMALE: \"Gender_Type_Female\", MALE: \"Gender_Type_Male\" },ap = { NONE: \"AdminForbid_Type_None\", SEND_OUT: \"AdminForbid_Type_SendOut\" },up = { NEED_CONFIRM: \"AllowType_Type_NeedConfirm\", ALLOW_ANY: \"AllowType_Type_AllowAny\", DENY_ANY: \"AllowType_Type_DenyAny\" },cp = function () {function e(t) {An(this, e), this._imageMemoryURL = \"\", this._file = t.file, Ns ? this.createImageDataASURLInWXMiniApp(t.file) : this.createImageDataASURLInWeb(t.file), this._initImageInfoModel(), this.type = pn.MSG_IMAGE, this._percent = 0, this.content = { imageFormat: Kl.IMAGE_FORMAT[t.imageFormat] || Kl.IMAGE_FORMAT.UNKNOWN, uuid: t.uuid, imageInfoArray: [] }, this.initImageInfoArray(t.imageInfoArray), this._defaultImage = \"http://imgcache.qq.com/open/qcloud/video/act/webim-images/default.jpg\", this._autoFixUrl();}return Rn(e, [{ key: \"_initImageInfoModel\", value: function value() {var e = this;this._ImageInfoModel = function (t) {this.instanceID = Ra(9999999), this.sizeType = t.type || 0, this.size = t.size || 0, this.width = t.width || 0, this.height = t.height || 0, this.imageUrl = t.url || \"\", this.url = t.url || e._imageMemoryURL || e._defaultImage;}, this._ImageInfoModel.prototype = { setSizeType: function setSizeType(e) {this.sizeType = e;}, setImageUrl: function setImageUrl(e) {e && (this.imageUrl = e);}, getImageUrl: function getImageUrl() {return this.imageUrl;} };} }, { key: \"initImageInfoArray\", value: function value(e) {for (var t = 2, n = null, r = null; t >= 0;) {r = void 0 === e || void 0 === e[t] ? { type: 0, size: 0, width: 0, height: 0, url: \"\" } : e[t], (n = new this._ImageInfoModel(r)).setSizeType(t + 1), this.addImageInfo(n), t--;}} }, { key: \"updateImageInfoArray\", value: function value(e) {for (var t, n = this.content.imageInfoArray.length, r = 0; r < n; r++) {t = this.content.imageInfoArray[r], e.size && (t.size = e.size), e.url && t.setImageUrl(e.url), e.width && (t.width = e.width), e.height && (t.height = e.height);}} }, { key: \"_autoFixUrl\", value: function value() {for (var e = this.content.imageInfoArray.length, t = \"\", n = \"\", r = [\"http\", \"https\"], o = null, i = 0; i < e; i++) {this.content.imageInfoArray[i].url && \"\" !== (o = this.content.imageInfoArray[i]).imageUrl && (n = o.imageUrl.slice(0, o.imageUrl.indexOf(\"://\") + 1), t = o.imageUrl.slice(o.imageUrl.indexOf(\"://\") + 1), r.indexOf(n) < 0 && (n = \"https:\"), this.content.imageInfoArray[i].setImageUrl([n, t].join(\"\")));}} }, { key: \"updatePercent\", value: function value(e) {this._percent = e, this._percent > 1 && (this._percent = 1);} }, { key: \"updateImageFormat\", value: function value(e) {this.content.imageFormat = e;} }, { key: \"createImageDataASURLInWeb\", value: function value(e) {void 0 !== e && e.files.length > 0 && (this._imageMemoryURL = window.URL.createObjectURL(e.files[0]));} }, { key: \"createImageDataASURLInWXMiniApp\", value: function value(e) {e && e.url && (this._imageMemoryURL = e.url);} }, { key: \"replaceImageInfo\", value: function value(e, t) {this.content.imageInfoArray[t] instanceof this._ImageInfoModel || (this.content.imageInfoArray[t] = e);} }, { key: \"addImageInfo\", value: function value(e) {this.content.imageInfoArray.length >= 3 || this.content.imageInfoArray.push(e);} }, { key: \"sendable\", value: function value() {return 0 !== this.content.imageInfoArray.length && \"\" !== this.content.imageInfoArray[0].imageUrl && 0 !== this.content.imageInfoArray[0].size;} }]), e;}(),lp = function () {function e(t) {An(this, e), this.type = pn.MSG_FACE, this.content = t || null;}return Rn(e, [{ key: \"sendable\", value: function value() {return null !== this.content;} }]), e;}(),pp = function () {function e(t) {An(this, e), this.type = pn.MSG_AUDIO, this._percent = 0, this.content = { downloadFlag: 2, second: t.second, size: t.size, url: t.url, remoteAudioUrl: \"\", uuid: t.uuid };}return Rn(e, [{ key: \"updatePercent\", value: function value(e) {this._percent = e, this._percent > 1 && (this._percent = 1);} }, { key: \"updateAudioUrl\", value: function value(e) {this.content.remoteAudioUrl = e;} }, { key: \"sendable\", value: function value() {return \"\" !== this.content.remoteAudioUrl;} }]), e;}();Re({ target: \"Object\", stat: !0, forced: !i, sham: !i }, { defineProperty: k.f });var fp = { from: !0, groupID: !0, groupName: !0, to: !0 },hp = function () {function e(t) {An(this, e), this.type = pn.MSG_GRP_TIP, this.content = {}, this._initContent(t);}return Rn(e, [{ key: \"_initContent\", value: function value(e) {var t = this;Object.keys(e).forEach(function (n) {switch (n) {case \"remarkInfo\":break;case \"groupProfile\":t.content.groupProfile = {}, t._initGroupProfile(e[n]);break;case \"operatorInfo\":case \"memberInfoList\":break;case \"msgMemberInfo\":t.content.memberList = e[n], Object.defineProperty(t.content, \"msgMemberInfo\", { get: function get() {return la.warn(\"!!! 禁言的群提示消息中的 payload.msgMemberInfo 属性即将废弃，请使用 payload.memberList 属性替代。 \\n\", \"msgMemberInfo 中的 shutupTime 属性对应更改为 memberList 中的 muteTime 属性，表示禁言时长。 \\n\", \"参考：群提示消息 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/Message.html#.GroupTipPayload\"), t.content.memberList.map(function (e) {return { userID: e.userID, shutupTime: e.muteTime };});} });break;default:t.content[n] = e[n];}}), this.content.userIDList || (this.content.userIDList = [this.content.operatorID]);} }, { key: \"_initGroupProfile\", value: function value(e) {for (var t = Object.keys(e), n = 0; n < t.length; n++) {var r = t[n];fp[r] && (this.content.groupProfile[r] = e[r]);}} }]), e;}(),dp = { from: !0, groupID: !0, name: !0, to: !0 },gp = function () {function e(t) {An(this, e), this.type = pn.MSG_GRP_SYS_NOTICE, this.content = {}, this._initContent(t);}return Rn(e, [{ key: \"_initContent\", value: function value(e) {var t = this;Object.keys(e).forEach(function (n) {switch (n) {case \"memberInfoList\":break;case \"remarkInfo\":t.content.handleMessage = e[n];break;case \"groupProfile\":t.content.groupProfile = {}, t._initGroupProfile(e[n]);break;default:t.content[n] = e[n];}});} }, { key: \"_initGroupProfile\", value: function value(e) {for (var t = Object.keys(e), n = 0; n < t.length; n++) {var r = t[n];dp[r] && (this.content.groupProfile[r] = e[r]);}} }]), e;}(),mp = Math.min,vp = [].lastIndexOf,yp = !!vp && 1 / [1].lastIndexOf(1, -0) < 0,_p = He(\"lastIndexOf\"),Ip = ze(\"indexOf\", { ACCESSORS: !0, 1: 0 }),Ep = yp || !_p || !Ip ? function (e) {if (yp) return vp.apply(this, arguments) || 0;var t = g(this),n = ae(t.length),r = n - 1;for (arguments.length > 1 && (r = mp(r, ie(arguments[1]))), r < 0 && (r = n + r); r >= 0; r--) {if (r in t && t[r] === e) return r || 0;}return -1;} : vp;Re({ target: \"Array\", proto: !0, forced: Ep !== [].lastIndexOf }, { lastIndexOf: Ep });var Cp = { 70001: \"UserSig 已过期，请重新生成。建议 UserSig 有效期设置不小于24小时。\", 70002: \"UserSig 长度为0，请检查传入的 UserSig 是否正确。\", 70003: \"UserSig 非法，请使用官网提供的 API 重新生成 UserSig(https://cloud.tencent.com/document/product/269/32688)。\", 70005: \"UserSig 非法，请使用官网提供的 API 重新生成 UserSig(https://cloud.tencent.com/document/product/269/32688)。\", 70009: \"UserSig 验证失败，可能因为生成 UserSig 时混用了其他 SDKAppID 的私钥或密钥导致，请使用对应 SDKAppID 下的私钥或密钥重新生成 UserSig(https://cloud.tencent.com/document/product/269/32688)。\", 70013: \"请求中的 UserID 与生成 UserSig 时使用的 UserID 不匹配，您可以在即时通信 IM 控制台的【开发辅助工具(https://console.cloud.tencent.com/im-detail/tool-usersig)】页面校验 UserSig。\", 70014: \"请求中的 SDKAppID 与生成 UserSig 时使用的 SDKAppID 不匹配，您可以在即时通信 IM 控制台的【开发辅助工具(https://console.cloud.tencent.com/im-detail/tool-usersig)】页面校验 UserSig。\", 70016: \"密钥不存在，UserSig 验证失败，请在即时通信 IM 控制台获取密钥(https://cloud.tencent.com/document/product/269/32578#.E8.8E.B7.E5.8F.96.E5.AF.86.E9.92.A5)。\", 70020: \"SDKAppID 未找到，请在即时通信 IM 控制台确认应用信息。\", 70050: \"UserSig 验证次数过于频繁。请检查 UserSig 是否正确，并于1分钟后重新验证。您可以在即时通信 IM 控制台的【开发辅助工具(https://console.cloud.tencent.com/im-detail/tool-usersig)】页面校验 UserSig。\", 70051: \"帐号被拉入黑名单。\", 70052: \"UserSig 已经失效，请重新生成，再次尝试。\", 70107: \"因安全原因被限制登录，请不要频繁登录。\", 70169: \"请求的用户帐号不存在。\", 70114: \"服务端内部超时，请稍后重试。\", 70202: \"服务端内部超时，请稍后重试。\", 70206: \"请求中批量数量不合法。\", 70402: \"参数非法，请检查必填字段是否填充，或者字段的填充是否满足协议要求。\", 70403: \"请求失败，需要 App 管理员权限。\", 70398: \"帐号数超限。如需创建多于100个帐号，请将应用升级为专业版，具体操作指引请参见购买指引(https://cloud.tencent.com/document/product/269/32458)。\", 70500: \"服务端内部错误，请稍后重试。\", 71e3: \"删除帐号失败。仅支持删除体验版帐号，您当前应用为专业版，暂不支持帐号删除。\", 20001: \"请求包非法。\", 20002: \"UserSig 或 A2 失效。\", 20003: \"消息发送方或接收方 UserID 无效或不存在，请检查 UserID 是否已导入即时通信 IM。\", 20004: \"网络异常，请重试。\", 20005: \"服务端内部错误，请重试。\", 20006: \"触发发送单聊消息之前回调，App 后台返回禁止下发该消息。\", 20007: \"发送单聊消息，被对方拉黑，禁止发送。消息发送状态默认展示为失败，您可以登录控制台修改该场景下的消息发送状态展示结果，具体操作请参见消息保留设置(https://cloud.tencent.com/document/product/269/38656)。\", 20009: \"消息发送双方互相不是好友，禁止发送（配置单聊消息校验好友关系才会出现）。\", 20010: \"发送单聊消息，自己不是对方的好友（单向关系），禁止发送。\", 20011: \"发送单聊消息，对方不是自己的好友（单向关系），禁止发送。\", 20012: \"发送方被禁言，该条消息被禁止发送。\", 20016: \"消息撤回超过了时间限制（默认2分钟）。\", 20018: \"删除漫游内部错误。\", 90001: \"JSON 格式解析失败，请检查请求包是否符合 JSON 规范。\", 90002: \"JSON 格式请求包中 MsgBody 不符合消息格式描述，或者 MsgBody 不是 Array 类型，请参考 TIMMsgElement 对象的定义(https://cloud.tencent.com/document/product/269/2720#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0-timmsgelement)。\", 90003: \"JSON 格式请求包体中缺少 To_Account 字段或者 To_Account 帐号不存在。\", 90005: \"JSON 格式请求包体中缺少 MsgRandom 字段或者 MsgRandom 字段不是 Integer 类型。\", 90006: \"JSON 格式请求包体中缺少 MsgTimeStamp 字段或者 MsgTimeStamp 字段不是 Integer 类型。\", 90007: \"JSON 格式请求包体中 MsgBody 类型不是 Array 类型，请将其修改为 Array 类型。\", 90008: \"JSON 格式请求包体中缺少 From_Account 字段或者 From_Account 帐号不存在。\", 90009: \"请求需要 App 管理员权限。\", 90010: \"JSON 格式请求包不符合消息格式描述，请参考 TIMMsgElement 对象的定义(https://cloud.tencent.com/document/product/269/2720#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0-timmsgelement)。\", 90011: \"批量发消息目标帐号超过500，请减少 To_Account 中目标帐号数量。\", 90012: \"To_Account 没有注册或不存在，请确认 To_Account 是否导入即时通信 IM 或者是否拼写错误。\", 90026: \"消息离线存储时间错误（最多不能超过7天）。\", 90031: \"JSON 格式请求包体中 SyncOtherMachine 字段不是 Integer 类型。\", 90044: \"JSON 格式请求包体中 MsgLifeTime 字段不是 Integer 类型。\", 90048: \"请求的用户帐号不存在。\", 90054: \"撤回请求中的 MsgKey 不合法。\", 90994: \"服务内部错误，请重试。\", 90995: \"服务内部错误，请重试。\", 91e3: \"服务内部错误，请重试。\", 90992: \"服务内部错误，请重试；如果所有请求都返回该错误码，且 App 配置了第三方回调，请检查 App 服务端是否正常向即时通信 IM 后台服务端返回回调结果。\", 93e3: \"JSON 数据包超长，消息包体请不要超过8k。\", 91101: \"Web 端长轮询被踢（Web 端同时在线实例个数超出限制）。\", 10002: \"服务端内部错误，请重试。\", 10003: \"请求中的接口名称错误，请核对接口名称并重试。\", 10004: \"参数非法，请根据错误描述检查请求是否正确。\", 10005: \"请求包体中携带的帐号数量过多。\", 10006: \"操作频率限制，请尝试降低调用的频率。\", 10007: \"操作权限不足，例如 Work 群组中普通成员尝试执行踢人操作，但只有 App 管理员才有权限。\", 10008: \"请求非法，可能是请求中携带的签名信息验证不正确，请再次尝试。\", 10009: \"该群不允许群主主动退出。\", 10010: \"群组不存在，或者曾经存在过，但是目前已经被解散。\", 10011: \"解析 JSON 包体失败，请检查包体的格式是否符合 JSON 格式。\", 10012: \"发起操作的 UserID 非法，请检查发起操作的用户 UserID 是否填写正确。\", 10013: \"被邀请加入的用户已经是群成员。\", 10014: \"群已满员，无法将请求中的用户加入群组，如果是批量加人，可以尝试减少加入用户的数量。\", 10015: \"找不到指定 ID 的群组。\", 10016: \"App 后台通过第三方回调拒绝本次操作。\", 10017: \"因被禁言而不能发送消息，请检查发送者是否被设置禁言。\", 10018: \"应答包长度超过最大包长（1MB），请求的内容过多，请尝试减少单次请求的数据量。\", 10019: \"请求的用户帐号不存在。\", 10021: \"群组 ID 已被使用，请选择其他的群组 ID。\", 10023: \"发消息的频率超限，请延长两次发消息时间的间隔。\", 10024: \"此邀请或者申请请求已经被处理。\", 10025: \"群组 ID 已被使用，并且操作者为群主，可以直接使用。\", 10026: \"该 SDKAppID 请求的命令字已被禁用。\", 10030: \"请求撤回的消息不存在。\", 10031: \"消息撤回超过了时间限制（默认2分钟）。\", 10032: \"请求撤回的消息不支持撤回操作。\", 10033: \"群组类型不支持消息撤回操作。\", 10034: \"该消息类型不支持删除操作。\", 10035: \"直播群和在线成员广播大群不支持删除消息。\", 10036: \"直播群创建数量超过了限制，请参考价格说明(https://cloud.tencent.com/document/product/269/11673)购买预付费套餐“IM直播群”。\", 10037: \"单个用户可创建和加入的群组数量超过了限制，请参考价格说明(https://cloud.tencent.com/document/product/269/11673)购买或升级预付费套餐“单人可创建与加入群组数”。\", 10038: \"群成员数量超过限制，请参考价格说明(https://cloud.tencent.com/document/product/269/11673)购买或升级预付费套餐“扩展群人数上限”。\", 10041: \"该应用（SDKAppID）已配置不支持群消息撤回。\" },Mp = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this)).code = e.code, r.message = Cp[e.code] || e.message, r.data = e.data || {}, r;}return n;}(xn(Error)),Sp = { NO_SDKAPPID: 2e3, NO_ACCOUNT_TYPE: 2001, NO_IDENTIFIER: 2002, NO_USERSIG: 2003, NO_TINYID: 2022, NO_A2KEY: 2023, COS_UNDETECTED: 2040, MESSAGE_SEND_FAIL: 2100, MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS: 2103, MESSAGE_SEND_NEED_MESSAGE_INSTANCE: 2105, MESSAGE_SEND_INVALID_CONVERSATION_TYPE: 2106, MESSAGE_FILE_IS_EMPTY: 2108, MESSAGE_ONPROGRESS_FUNCTION_ERROR: 2109, MESSAGE_REVOKE_FAIL: 2110, MESSAGE_IMAGE_SELECT_FILE_FIRST: 2251, MESSAGE_IMAGE_TYPES_LIMIT: 2252, MESSAGE_IMAGE_SIZE_LIMIT: 2253, MESSAGE_AUDIO_UPLOAD_FAIL: 2300, MESSAGE_AUDIO_SIZE_LIMIT: 2301, MESSAGE_VIDEO_UPLOAD_FAIL: 2350, MESSAGE_VIDEO_SIZE_LIMIT: 2351, MESSAGE_VIDEO_TYPES_LIMIT: 2352, MESSAGE_FILE_UPLOAD_FAIL: 2400, MESSAGE_FILE_SELECT_FILE_FIRST: 2401, MESSAGE_FILE_SIZE_LIMIT: 2402, MESSAGE_FILE_URL_IS_EMPTY: 2403, CONVERSATION_NOT_FOUND: 2500, USER_OR_GROUP_NOT_FOUND: 2501, CONVERSATION_UN_RECORDED_TYPE: 2502, ILLEGAL_GROUP_TYPE: 2600, CANNOT_JOIN_WORK: 2601, CANNOT_CHANGE_OWNER_IN_AVCHATROOM: 2620, CANNOT_CHANGE_OWNER_TO_SELF: 2621, CANNOT_DISMISS_Work: 2622, JOIN_GROUP_FAIL: 2660, CANNOT_ADD_MEMBER_IN_AVCHATROOM: 2661, CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN: 2662, CANNOT_KICK_MEMBER_IN_AVCHATROOM: 2680, NOT_OWNER: 2681, CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM: 2682, INVALID_MEMBER_ROLE: 2683, CANNOT_SET_SELF_MEMBER_ROLE: 2684, CANNOT_MUTE_SELF: 2685, DEL_FRIEND_INVALID_PARAM: 2700, UPDATE_PROFILE_INVALID_PARAM: 2721, UPDATE_PROFILE_NO_KEY: 2722, ADD_BLACKLIST_INVALID_PARAM: 2740, DEL_BLACKLIST_INVALID_PARAM: 2741, CANNOT_ADD_SELF_TO_BLACKLIST: 2742, NETWORK_ERROR: 2800, NETWORK_TIMEOUT: 2801, NETWORK_BASE_OPTIONS_NO_URL: 2802, NETWORK_UNDEFINED_SERVER_NAME: 2803, NETWORK_PACKAGE_UNDEFINED: 2804, NO_NETWORK: 2805, CONVERTOR_IRREGULAR_PARAMS: 2900, NOTICE_RUNLOOP_UNEXPECTED_CONDITION: 2901, NOTICE_RUNLOOP_OFFSET_LOST: 2902, UNCAUGHT_ERROR: 2903, GET_LONGPOLL_ID_FAILED: 2904, SDK_IS_NOT_READY: 2999, LONG_POLL_KICK_OUT: 91101, MESSAGE_A2KEY_EXPIRED: 20002, ACCOUNT_A2KEY_EXPIRED: 70001, LONG_POLL_API_PARAM_ERROR: 90001 },Tp = \"无 SDKAppID\",Dp = \"无 accountType\",Ap = \"无 userID\",kp = \"无 userSig\",Rp = \"无 tinyID\",Op = \"无 a2key\",wp = \"未检测到 COS 上传插件\",Np = \"消息发送失败\",Lp = \"MessageController.constructor() 需要参数 options\",bp = \"需要 Message 的实例\",Pp = 'Message.conversationType 只能为 \"C2C\" 或 \"GROUP\"',Gp = \"无法发送空文件\",Up = \"回调函数运行时遇到错误，请检查接入侧代码\",xp = \"消息撤回失败\",qp = \"请先选择一个图片\",Fp = \"只允许上传 jpg png jpeg gif 格式的图片\",Vp = \"图片大小超过20M，无法发送\",Bp = \"语音上传失败\",jp = \"语音大小大于20M，无法发送\",Kp = \"视频上传失败\",Hp = \"视频大小超过100M，无法发送\",Yp = \"只允许上传 mp4 格式的视频\",$p = \"文件上传失败\",Wp = \"请先选择一个文件\",zp = \"文件大小超过100M，无法发送 \",Xp = \"缺少必要的参数文件 URL\",Jp = \"没有找到相应的会话，请检查传入参数\",Qp = \"没有找到相应的用户或群组，请检查传入参数\",Zp = \"未记录的会话类型\",ef = \"非法的群类型，请检查传入参数\",tf = \"不能加入 Work 类型的群组\",nf = \"AVChatRoom 类型的群组不能转让群主\",rf = \"不能把群主转让给自己\",of = \"不能解散 Work 类型的群组\",sf = \"加群失败，请检查传入参数或重试\",af = \"AVChatRoom 类型的群不支持邀请群成员\",uf = \"非 AVChatRoom 类型的群组不允许匿名加群，请先登录后再加群\",cf = \"不能在 AVChatRoom 类型的群组踢人\",lf = \"你不是群主，只有群主才有权限操作\",pf = \"不能在 Work / AVChatRoom 类型的群中设置群成员身份\",ff = \"不合法的群成员身份，请检查传入参数\",hf = \"不能设置自己的群成员身份，请检查传入参数\",df = \"不能将自己禁言，请检查传入参数\",gf = \"传入 deleteFriend 接口的参数无效\",mf = \"传入 updateMyProfile 接口的参数无效\",vf = \"updateMyProfile 无标配资料字段或自定义资料字段\",yf = \"传入 addToBlacklist 接口的参数无效\",_f = \"传入 removeFromBlacklist 接口的参数无效\",If = \"不能拉黑自己\",Ef = \"网络层初始化错误，缺少 URL 参数\",Cf = \"打包错误，未定义的 serverName\",Mf = \"未定义的 packageConfig\",Sf = \"未连接到网络\",Tf = \"不规范的参数名称\",Df = \"意料外的通知条件\",Af = \"_syncOffset 丢失\",kf = \"获取 longpolling id 失败\",Rf = \"接口需要 SDK 处于 ready 状态后才能调用\",Of = [\"jpg\", \"jpeg\", \"gif\", \"png\"],wf = [\"mp4\"],Nf = function () {function e(t) {An(this, e);var n = this._check(t);if (n instanceof Mp) throw n;this.type = pn.MSG_FILE, this._percent = 0;var r = this._getFileInfo(t);this.content = { downloadFlag: 2, fileUrl: t.url || \"\", uuid: t.uuid, fileName: r.name || \"\", fileSize: r.size || 0 };}return Rn(e, [{ key: \"_getFileInfo\", value: function value(e) {if (e.fileName && e.fileSize) return { size: e.fileSize, name: e.fileName };if (Ns) return {};var t = e.file.files[0];return { size: t.size, name: t.name, type: t.type.slice(t.type.lastIndexOf(\"/\") + 1).toLowerCase() };} }, { key: \"updatePercent\", value: function value(e) {this._percent = e, this._percent > 1 && (this._percent = 1);} }, { key: \"updateFileUrl\", value: function value(e) {this.content.fileUrl = e;} }, { key: \"_check\", value: function value(e) {if (e.size > 104857600) return new Mp({ code: Sp.MESSAGE_FILE_SIZE_LIMIT, message: \"\".concat(zp, \": \").concat(104857600, \" bytes\") });} }, { key: \"sendable\", value: function value() {return \"\" !== this.content.fileUrl && \"\" !== this.content.fileName && 0 !== this.content.fileSize;} }]), e;}(),Lf = function () {function e(t) {An(this, e), this.type = pn.MSG_CUSTOM, this.content = { data: t.data || \"\", description: t.description || \"\", extension: t.extension || \"\" };}return Rn(e, [{ key: \"setData\", value: function value(e) {return this.content.data = e, this;} }, { key: \"setDescription\", value: function value(e) {return this.content.description = e, this;} }, { key: \"setExtension\", value: function value(e) {return this.content.extension = e, this;} }, { key: \"sendable\", value: function value() {return 0 !== this.content.data.length || 0 !== this.content.description.length || 0 !== this.content.extension.length;} }]), e;}(),bf = function () {function e(t) {An(this, e), this.type = pn.MSG_VIDEO, this._percent = 0, this.content = { remoteVideoUrl: t.remoteVideoUrl, videoFormat: t.videoFormat, videoSecond: parseInt(t.videoSecond, 10), videoSize: t.videoSize, videoUrl: t.videoUrl, videoDownloadFlag: 2, videoUUID: t.videoUUID, thumbUUID: t.thumbUUID, thumbFormat: t.thumbFormat, thumbWidth: t.thumbWidth, thumbHeight: t.thumbHeight, thumbSize: t.thumbSize, thumbDownloadFlag: 2, thumbUrl: t.thumbUrl };}return Rn(e, [{ key: \"updatePercent\", value: function value(e) {this._percent = e, this._percent > 1 && (this._percent = 1);} }, { key: \"updateVideoUrl\", value: function value(e) {e && (this.content.remoteVideoUrl = e);} }, { key: \"sendable\", value: function value() {return \"\" !== this.content.remoteVideoUrl;} }]), e;}(),Pf = function e(t) {An(this, e), this.type = pn.MSG_GEO, this.content = t;},Gf = { 1: pn.MSG_PRIORITY_HIGH, 2: pn.MSG_PRIORITY_NORMAL, 3: pn.MSG_PRIORITY_LOW, 4: pn.MSG_PRIORITY_LOWEST },Uf = function () {function e(t) {An(this, e), this.ID = \"\", this.conversationID = t.conversationID || null, this.conversationType = t.conversationType || pn.CONV_C2C, this.conversationSubType = t.conversationSubType, this.time = t.time || Math.ceil(Date.now() / 1e3), this.sequence = t.sequence || 0, this.clientSequence = t.clientSequence || t.sequence || 0, this.random = t.random || Ra(), this.priority = this._computePriority(t.priority), this.nick = \"\", this.avatar = \"\", this.isPeerRead = !1, this._elements = [], this.isPlaceMessage = t.isPlaceMessage || 0, this.isRevoked = 2 === t.isPlaceMessage || 8 === t.msgFlagBits, this.geo = {}, this.from = t.from || null, this.to = t.to || null, this.flow = \"\", this.isSystemMessage = t.isSystemMessage || !1, this.protocol = t.protocol || \"JSON\", this.isResend = !1, this.isRead = !1, this.status = t.status || Uu.SUCCESS, this.reInitialize(t.currentUser), this.extractGroupInfo(t.groupProfile || null);}return Rn(e, [{ key: \"getElements\", value: function value() {return this._elements;} }, { key: \"extractGroupInfo\", value: function value(e) {null !== e && (ha(e.fromAccountNick) && (this.nick = e.fromAccountNick), ha(e.fromAccountHeadurl) && (this.avatar = e.fromAccountHeadurl));} }, { key: \"_initProxy\", value: function value() {this.payload = this._elements[0].content, this.type = this._elements[0].type;} }, { key: \"reInitialize\", value: function value(e) {e && (this.status = this.from ? Uu.SUCCESS : Uu.UNSEND, !this.from && (this.from = e)), this._initFlow(e), this._initielizeSequence(e), this._concactConversationID(e), this.generateMessageID(e);} }, { key: \"isSendable\", value: function value() {return 0 !== this._elements.length && (\"function\" != typeof this._elements[0].sendable ? (la.warn(\"\".concat(this._elements[0].type, ' need \"boolean : sendable()\" method')), !1) : this._elements[0].sendable());} }, { key: \"_initTo\", value: function value(e) {this.conversationType === pn.CONV_GROUP && (this.to = e.groupID);} }, { key: \"_initielizeSequence\", value: function value(e) {0 === this.clientSequence && e && (this.clientSequence = function (e) {if (!e) return la.error(\"autoincrementIndex(string: key) need key parameter\"), !1;if (void 0 === La[e]) {var t = new Date(),n = \"3\".concat(t.getHours()).slice(-2),r = \"0\".concat(t.getMinutes()).slice(-2),o = \"0\".concat(t.getSeconds()).slice(-2);La[e] = parseInt([n, r, o, \"0001\"].join(\"\")), n = null, r = null, o = null, la.warn(\"utils.autoincrementIndex() create new sequence : \".concat(e, \" = \").concat(La[e]));}return La[e]++;}(e)), 0 === this.sequence && this.conversationType === pn.CONV_C2C && (this.sequence = this.clientSequence);} }, { key: \"generateMessageID\", value: function value(e) {var t = e === this.from ? 1 : 0,n = this.sequence > 0 ? this.sequence : this.clientSequence;this.ID = \"\".concat(this.conversationID, \"-\").concat(n, \"-\").concat(this.random, \"-\").concat(t);} }, { key: \"_initFlow\", value: function value(e) {\"\" !== e && (e === this.from ? (this.flow = \"out\", this.isRead = !0) : this.flow = \"in\");} }, { key: \"_concactConversationID\", value: function value(e) {var t = this.to,n = \"\",r = this.conversationType;r !== pn.CONV_SYSTEM ? (n = r === pn.CONV_C2C ? e === this.from ? t : this.from : this.to, this.conversationID = \"\".concat(r).concat(n)) : this.conversationID = pn.CONV_SYSTEM;} }, { key: \"isElement\", value: function value(e) {return e instanceof qu || e instanceof cp || e instanceof lp || e instanceof pp || e instanceof Nf || e instanceof bf || e instanceof hp || e instanceof gp || e instanceof Lf || e instanceof Pf;} }, { key: \"setElement\", value: function value(e) {var t = this;if (this.isElement(e)) return this._elements = [e], void this._initProxy();var n = function n(e) {switch (e.type) {case pn.MSG_TEXT:t.setTextElement(e.content);break;case pn.MSG_IMAGE:t.setImageElement(e.content);break;case pn.MSG_AUDIO:t.setAudioElement(e.content);break;case pn.MSG_FILE:t.setFileElement(e.content);break;case pn.MSG_VIDEO:t.setVideoElement(e.content);break;case pn.MSG_CUSTOM:t.setCustomElement(e.content);break;case pn.MSG_GEO:t.setGEOElement(e.content);break;case pn.MSG_GRP_TIP:t.setGroupTipElement(e.content);break;case pn.MSG_GRP_SYS_NOTICE:t.setGroupSystemNoticeElement(e.content);break;case pn.MSG_FACE:t.setFaceElement(e.content);break;default:la.warn(e.type, e.content, \"no operation......\");}};if (Array.isArray(e)) for (var r = 0; r < e.length; r++) {n(e[r]);} else n(e);this._initProxy();} }, { key: \"setTextElement\", value: function value(e) {var t = \"string\" == typeof e ? e : e.text,n = new qu({ text: t });this._elements.push(n);} }, { key: \"setImageElement\", value: function value(e) {var t = new cp(e);this._elements.push(t);} }, { key: \"setAudioElement\", value: function value(e) {var t = new pp(e);this._elements.push(t);} }, { key: \"setFileElement\", value: function value(e) {var t = new Nf(e);this._elements.push(t);} }, { key: \"setVideoElement\", value: function value(e) {var t = new bf(e);this._elements.push(t);} }, { key: \"setGEOElement\", value: function value(e) {var t = new Pf(e);this._elements.push(t);} }, { key: \"setCustomElement\", value: function value(e) {var t = new Lf(e);this._elements.push(t);} }, { key: \"setGroupTipElement\", value: function value(e) {if (e.operatorInfo) {var t = e.operatorInfo,n = t.nick,r = t.avatar;ha(n) && (this.nick = n), ha(r) && (this.avatar = r);}var o = new hp(e);this._elements.push(o);} }, { key: \"setGroupSystemNoticeElement\", value: function value(e) {var t = new gp(e);this._elements.push(t);} }, { key: \"setFaceElement\", value: function value(e) {var t = new lp(e);this._elements.push(t);} }, { key: \"setIsRead\", value: function value(e) {this.isRead = e;} }, { key: \"_computePriority\", value: function value(e) {if (va(e)) return pn.MSG_PRIORITY_NORMAL;if (ha(e) && -1 !== Object.values(Gf).indexOf(e)) return e;if (fa(e)) {var t = \"\" + e;if (-1 !== Object.keys(Gf).indexOf(t)) return Gf[t];}return pn.MSG_PRIORITY_NORMAL;} }, { key: \"elements\", get: function get() {return la.warn(\"！！！Message 实例的 elements 属性即将废弃，请尽快修改。使用 type 和 payload 属性处理单条消息，兼容组合消息使用 _elements 属性！！！\"), this._elements;} }]), e;}(),xf = function xf(e) {return !!e && (!!(function (e) {return ha(e) && e.slice(0, 3) === pn.CONV_C2C;}(e) || function (e) {return ha(e) && e.slice(0, 5) === pn.CONV_GROUP;}(e) || Fa(e)) || (__f__(\"warn\", \"非法的会话 ID:\".concat(e, \"。会话 ID 组成方式：\\n  C2C + userID（单聊）\\n  GROUP + groupID（群聊）\\n  @TIM#SYSTEM（系统通知会话）\"), \" at tim-js-sdk/tim-js.js:1\"), !1));},qf = { login: { userID: { type: \"String\", required: !0 }, userSig: { type: \"String\", required: !0 } }, addToBlacklist: { userIDList: { type: \"Array\", required: !0 } }, mutilParam: [{ name: \"paramName\", type: \"Number\", required: !0 }, { name: \"paramName\", type: \"String\", required: !0 }], on: [{ name: \"eventName\", type: \"String\", validator: function validator(e) {return \"string\" == typeof e && 0 !== e.length || (__f__(\"warn\", \"on 接口的 eventName 参数必须是 String 类型，且不能为空。\", \" at tim-js-sdk/tim-js.js:1\"), !1);} }, { name: \"handler\", type: \"Function\", validator: function validator(e) {return \"function\" != typeof e ? (__f__(\"warn\", \"on 接口的 handler 参数必须是 Function 类型。\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (\"\" === e.name && __f__(\"warn\", \"on 接口的 handler 参数推荐使用具名函数。具名函数可以使用 off 接口取消订阅，匿名函数无法取消订阅。\", \" at tim-js-sdk/tim-js.js:1\"), !0);} }], once: [{ name: \"eventName\", type: \"String\", validator: function validator(e) {return \"string\" == typeof e && 0 !== e.length || (__f__(\"warn\", \"once 接口的 eventName 参数必须是 String 类型，且不能为空。\", \" at tim-js-sdk/tim-js.js:1\"), !1);} }, { name: \"handler\", type: \"Function\", validator: function validator(e) {return \"function\" != typeof e ? (__f__(\"warn\", \"once 接口的 handler 参数必须是 Function 类型。\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (\"\" === e.name && __f__(\"warn\", \"once 接口的 handler 参数推荐使用具名函数。\", \" at tim-js-sdk/tim-js.js:1\"), !0);} }], off: [{ name: \"eventName\", type: \"String\", validator: function validator(e) {return \"string\" == typeof e && 0 !== e.length || (__f__(\"warn\", \"off 接口的 eventName 参数必须是 String 类型，且不能为空。\", \" at tim-js-sdk/tim-js.js:1\"), !1);} }, { name: \"handler\", type: \"Function\", validator: function validator(e) {return \"function\" != typeof e ? (__f__(\"warn\", \"off 接口的 handler 参数必须是 Function 类型。\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (\"\" === e.name && __f__(\"warn\", \"off 接口的 handler 参数为匿名函数，无法取消订阅。\", \" at tim-js-sdk/tim-js.js:1\"), !0);} }], sendMessage: [{ name: \"message\", type: \"Object\", required: !0 }], getMessageList: { conversationID: { type: \"String\", required: !0, validator: function validator(e) {return xf(e);} }, nextReqMessageID: { type: \"String\" }, count: { type: \"Number\", validator: function validator(e) {return !(!va(e) && !/^[1-9][0-9]*$/.test(e)) || (__f__(\"warn\", \"getMessageList 接口的 count 参数必须为正整数\", \" at tim-js-sdk/tim-js.js:1\"), !1);} } }, setMessageRead: { conversationID: { type: \"String\", required: !0, validator: function validator(e) {return xf(e);} } }, getConversationProfile: [{ name: \"conversationID\", type: \"String\", required: !0, validator: function validator(e) {return xf(e);} }], deleteConversation: [{ name: \"conversationID\", type: \"String\", required: !0, validator: function validator(e) {return xf(e);} }], getGroupList: { groupProfileFilter: { type: \"Array\" } }, getGroupProfile: { groupID: { type: \"String\", required: !0 }, groupCustomFieldFilter: { type: \"Array\" }, memberCustomFieldFilter: { type: \"Array\" } }, getGroupProfileAdvance: { groupIDList: { type: \"Array\", required: !0 } }, createGroup: { name: { type: \"String\", required: !0 } }, joinGroup: { groupID: { type: \"String\", required: !0 }, type: { type: \"String\" }, applyMessage: { type: \"String\" } }, quitGroup: [{ name: \"groupID\", type: \"String\", required: !0 }], handleApplication: { message: { type: \"Object\", required: !0 }, handleAction: { type: \"String\", required: !0 }, handleMessage: { type: \"String\" } }, changeGroupOwner: { groupID: { type: \"String\", required: !0 }, newOwnerID: { type: \"String\", required: !0 } }, updateGroupProfile: { groupID: { type: \"String\", required: !0 }, muteAllMembers: { type: \"Boolean\" } }, dismissGroup: [{ name: \"groupID\", type: \"String\", required: !0 }], searchGroupByID: [{ name: \"groupID\", type: \"String\", required: !0 }], getGroupMemberList: { groupID: { type: \"String\", required: !0 }, offset: { type: \"Number\" }, count: { type: \"Number\" } }, getGroupMemberProfile: { groupID: { type: \"String\", required: !0 }, userIDList: { type: \"Array\", required: !0 }, memberCustomFieldFilter: { type: \"Array\" } }, addGroupMemeber: { groupID: { type: \"String\", required: !0 }, userIDList: { type: \"Array\", required: !0 } }, setGroupMemberRole: { groupID: { type: \"String\", required: !0 }, userID: { type: \"String\", required: !0 }, role: { type: \"String\", required: !0 } }, setGroupMemberMuteTime: { groupID: { type: \"String\", required: !0 }, userID: { type: \"String\", required: !0 }, muteTime: { type: \"Number\", validator: function validator(e) {return e >= 0;} } }, setGroupMemberNameCard: { groupID: { type: \"String\", required: !0 }, userID: { type: \"String\" }, nameCard: { type: \"String\", required: !0, validator: function validator(e) {return !0 !== /^\\s+$/.test(e);} } }, setMessageRemindType: { groupID: { type: \"String\", required: !0 }, messageRemindType: { type: \"String\", required: !0 } }, setGroupMemberCustomField: { groupID: { type: \"String\", required: !0 }, userID: { type: \"String\" }, memberCustomField: { type: \"Array\", required: !0 } }, deleteGroupMember: { groupID: { type: \"String\", required: !0 } }, createTextMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {return ha(e.text) ? 0 !== e.text.length || (__f__(\"warn\", \"createTextMessage 消息内容不能为空。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createTextMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (__f__(\"warn\", \"createTextMessage payload.text 类型必须为字符串。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createTextMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1);} } }, createCustomMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {return e.data && !ha(e.data) ? (__f__(\"warn\", \"createCustomMessage payload.data 类型必须为 String。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createCustomMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1) : e.description && !ha(e.description) ? (__f__(\"warn\", \"createCustomMessage payload.description 类型必须为 String。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createCustomMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1) : !(e.extension && !ha(e.extension)) || (__f__(\"warn\", \"createCustomMessage payload.extension 类型必须为 String。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createCustomMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1);} } }, createImageMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {if (va(e.file)) return __f__(\"warn\", \"createImageMessage payload.file 不能为 undefined。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createImageMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (ws) {if (!(e.file instanceof HTMLInputElement || pa(e.file))) return __f__(\"warn\", \"createImageMessage payload.file 的类型必须是 HTMLInputElement 或 File。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createImageMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return __f__(\"warn\", \"createImageMessage 您没有选择文件，无法发送。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createImageMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;}return !0;}, onProgress: { type: \"Function\", required: !1, validator: function validator(e) {return va(e) && __f__(\"warn\", \"createImageMessage 没有 onProgress 回调，您将无法获取图片上传进度。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createImageMessage\", \" at tim-js-sdk/tim-js.js:1\"), !0;} } } }, createAudioMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0 }, onProgress: { type: \"Function\", required: !1, validator: function validator(e) {return va(e) && __f__(\"warn\", \"createAudioMessage 没有 onProgress 回调，您将无法获取音频上传进度。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createAudioMessage\", \" at tim-js-sdk/tim-js.js:1\"), !0;} } }, createVideoMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {if (va(e.file)) return __f__(\"warn\", \"createVideoMessage payload.file 不能为 undefined。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createVideoMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (ws) {if (!(e.file instanceof HTMLInputElement || pa(e.file))) return __f__(\"warn\", \"createVideoMessage payload.file 的类型必须是 HTMLInputElement 或 File。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createVideoMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return __f__(\"warn\", \"createVideoMessage 您没有选择文件，无法发送。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createVideoMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;}return !0;} }, onProgress: { type: \"Function\", required: !1, validator: function validator(e) {return va(e) && __f__(\"warn\", \"createVideoMessage 没有 onProgress 回调，您将无法获取视频上传进度。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createVideoMessage\", \" at tim-js-sdk/tim-js.js:1\"), !0;} } }, createFaceMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {return !!ga(e) && (fa(e.index) ? !!ha(e.data) || (__f__(\"warn\", \"createFaceMessage payload.data 类型必须为 String！\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (__f__(\"warn\", \"createFaceMessage payload.index 类型必须为 Number！\", \" at tim-js-sdk/tim-js.js:1\"), !1));} } }, createFileMessage: { to: { type: \"String\", required: !0 }, conversationType: { type: \"String\", required: !0 }, payload: { type: \"Object\", required: !0, validator: function validator(e) {if (va(e.file)) return __f__(\"warn\", \"createFileMessage payload.file 不能为 undefined。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createFileMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (ws) {if (!(e.file instanceof HTMLInputElement || pa(e.file))) return __f__(\"warn\", \"createFileMessage payload.file 的类型必须是 HTMLInputElement 或 File。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createFileMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return __f__(\"warn\", \"createFileMessage 您没有选择文件，无法发送。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createFileMessage\", \" at tim-js-sdk/tim-js.js:1\"), !1;}return !0;} }, onProgress: { type: \"Function\", required: !1, validator: function validator(e) {return va(e) && __f__(\"warn\", \"createFileMessage 没有 onProgress 回调，您将无法获取文件上传进度。请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#createFileMessage\", \" at tim-js-sdk/tim-js.js:1\"), !0;} } }, revokeMessage: [{ name: \"message\", type: \"Object\", required: !0, validator: function validator(e) {return e instanceof Uf ? e.conversationType === pn.CONV_SYSTEM ? (__f__(\"warn\", \"revokeMessage 不能撤回系统会话消息，只能撤回单聊消息或群消息\", \" at tim-js-sdk/tim-js.js:1\"), !1) : !0 !== e.isRevoked || (__f__(\"warn\", \"revokeMessage 消息已经被撤回，请勿重复操作\", \" at tim-js-sdk/tim-js.js:1\"), !1) : (__f__(\"warn\", \"revokeMessage 参数 message 必须为 Message(https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/Message.html) 实例。\", \" at tim-js-sdk/tim-js.js:1\"), !1);} }], getUserProfile: { userIDList: { type: \"Array\", validator: function validator(e) {return ma(e) ? (0 === e.length && __f__(\"warn\", \"getUserProfile userIDList 不能为空数组，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#getUserProfile\", \" at tim-js-sdk/tim-js.js:1\"), !0) : (__f__(\"warn\", \"getUserProfile userIDList 必须为数组，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#getUserProfile\", \" at tim-js-sdk/tim-js.js:1\"), !1);} } }, updateMyProfile: { profileCustomField: { type: \"Array\", validator: function validator(e) {return !!va(e) || !!ma(e) || (__f__(\"warn\", \"updateMyProfile profileCustomField 必须为数组，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#updateMyProfile\", \" at tim-js-sdk/tim-js.js:1\"), !1);} } } },Ff = { login: \"login\", logout: \"logout\", on: \"on\", once: \"once\", off: \"off\", setLogLevel: \"setLogLevel\", downloadLog: \"downloadLog\", registerPlugin: \"registerPlugin\", destroy: \"destroy\", createTextMessage: \"createTextMessage\", createImageMessage: \"createImageMessage\", createAudioMessage: \"createAudioMessage\", createVideoMessage: \"createVideoMessage\", createCustomMessage: \"createCustomMessage\", createFaceMessage: \"createFaceMessage\", createFileMessage: \"createFileMessage\", sendMessage: \"sendMessage\", resendMessage: \"resendMessage\", getMessageList: \"getMessageList\", setMessageRead: \"setMessageRead\", revokeMessage: \"revokeMessage\", getConversationList: \"getConversationList\", getConversationProfile: \"getConversationProfile\", deleteConversation: \"deleteConversation\", getGroupList: \"getGroupList\", getGroupProfile: \"getGroupProfile\", createGroup: \"createGroup\", joinGroup: \"joinGroup\", updateGroupProfile: \"updateGroupProfile\", quitGroup: \"quitGroup\", dismissGroup: \"dismissGroup\", changeGroupOwner: \"changeGroupOwner\", searchGroupByID: \"searchGroupByID\", setMessageRemindType: \"setMessageRemindType\", handleGroupApplication: \"handleGroupApplication\", getGroupMemberProfile: \"getGroupMemberProfile\", getGroupMemberList: \"getGroupMemberList\", addGroupMember: \"addGroupMember\", deleteGroupMember: \"deleteGroupMember\", setGroupMemberNameCard: \"setGroupMemberNameCard\", setGroupMemberMuteTime: \"setGroupMemberMuteTime\", setGroupMemberRole: \"setGroupMemberRole\", setGroupMemberCustomField: \"setGroupMemberCustomField\", getMyProfile: \"getMyProfile\", getUserProfile: \"getUserProfile\", updateMyProfile: \"updateMyProfile\", getBlacklist: \"getBlacklist\", addToBlacklist: \"addToBlacklist\", removeFromBlacklist: \"removeFromBlacklist\", getFriendList: \"getFriendList\" },Vf = \"1.7.3\",Bf = \"537048168\",jf = \"10\",Kf = \"protobuf\",Hf = \"json\",Yf = { HOST: { TYPE: 3, ACCESS_LAYER_TYPES: { SANDBOX: 1, TEST: 2, PRODUCTION: 3 }, CURRENT: { COMMON: \"https://webim.tim.qq.com\", PIC: \"https://pic.tim.qq.com\", COS: \"https://yun.tim.qq.com\" }, PRODUCTION: { COMMON: \"https://webim.tim.qq.com\", PIC: \"https://pic.tim.qq.com\", COS: \"https://yun.tim.qq.com\" }, SANDBOX: { COMMON: \"https://events.tim.qq.com\", PIC: \"https://pic.tim.qq.com\", COS: \"https://yun.tim.qq.com\" }, TEST: { COMMON: \"https://test.tim.qq.com\", PIC: \"https://pic.tim.qq.com\", COS: \"https://test.tim.qq.com\" }, setCurrent: function setCurrent() {var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3;switch (e) {case this.ACCESS_LAYER_TYPES.SANDBOX:this.CURRENT = this.SANDBOX, this.TYPE = this.ACCESS_LAYER_TYPES.SANDBOX;break;case this.ACCESS_LAYER_TYPES.TEST:this.CURRENT = this.TEST, this.TYPE = this.ACCESS_LAYER_TYPES.TEST;break;default:this.CURRENT = this.PRODUCTION, this.TYPE = this.ACCESS_LAYER_TYPES.PRODUCTION;}} }, NAME: { OPEN_IM: \"openim\", GROUP: \"group_open_http_svc\", FRIEND: \"sns\", PROFILE: \"profile\", RECENT_CONTACT: \"recentcontact\", PIC: \"openpic\", BIG_GROUP_NO_AUTH: \"group_open_http_noauth_svc\", BIG_GROUP_LONG_POLLING_NO_AUTH: \"group_open_long_polling_http_noauth_svc\", IM_OPEN_STAT: \"imopenstat\", WEB_IM: \"webim\", IM_COS_SIGN: \"im_cos_sign_svr\" }, CMD: { ACCESS_LAYER: \"accesslayer\", LOGIN: \"login\", LOGOUT_LONG_POLL: \"longpollinglogout\", LOGOUT_ALL: \"logout\", PORTRAIT_GET: \"portrait_get_all\", PORTRAIT_SET: \"portrait_set\", GET_LONG_POLL_ID: \"getlongpollingid\", LONG_POLL: \"longpolling\", AVCHATROOM_LONG_POLL: \"get_msg\", FRIEND_ADD: \"friend_add\", FRIEND_GET_ALL: \"friend_get_all\", FRIEND_DELETE: \"friend_delete\", RESPONSE_PENDENCY: \"friend_response\", GET_PENDENCY: \"pendency_get\", DELETE_PENDENCY: \"pendency_delete\", GET_GROUP_PENDENCY: \"get_pendency\", GET_BLACKLIST: \"black_list_get\", ADD_BLACKLIST: \"black_list_add\", DELETE_BLACKLIST: \"black_list_delete\", CREATE_GROUP: \"create_group\", GET_JOINED_GROUPS: \"get_joined_group_list\", SEND_MESSAGE: \"sendmsg\", REVOKE_C2C_MESSAGE: \"msgwithdraw\", SEND_GROUP_MESSAGE: \"send_group_msg\", REVOKE_GROUP_MESSAGE: \"group_msg_recall\", GET_GROUP_INFO: \"get_group_info\", GET_GROUP_MEMBER_INFO: \"get_specified_group_member_info\", GET_GROUP_MEMBER_LIST: \"get_group_member_info\", QUIT_GROUP: \"quit_group\", CHANGE_GROUP_OWNER: \"change_group_owner\", DESTROY_GROUP: \"destroy_group\", ADD_GROUP_MEMBER: \"add_group_member\", DELETE_GROUP_MEMBER: \"delete_group_member\", SEARCH_GROUP_BY_ID: \"get_group_public_info\", APPLY_JOIN_GROUP: \"apply_join_group\", HANDLE_APPLY_JOIN_GROUP: \"handle_apply_join_group\", MODIFY_GROUP_INFO: \"modify_group_base_info\", MODIFY_GROUP_MEMBER_INFO: \"modify_group_member_info\", DELETE_GROUP_SYSTEM_MESSAGE: \"deletemsg\", GET_CONVERSATION_LIST: \"get\", PAGING_GET_CONVERSATION_LIST: \"page_get\", DELETE_CONVERSATION: \"delete\", GET_MESSAGES: \"getmsg\", GET_C2C_ROAM_MESSAGES: \"getroammsg\", GET_GROUP_ROAM_MESSAGES: \"group_msg_get\", SET_C2C_MESSAGE_READ: \"msgreaded\", GET_PEER_READ_TIME: \"get_peer_read_time\", SET_GROUP_MESSAGE_READ: \"msg_read_report\", FILE_READ_AND_WRITE_AUTHKEY: \"authkey\", FILE_UPLOAD: \"pic_up\", COS_SIGN: \"cos\", TIM_WEB_REPORT: \"tim_web_report\", BIG_DATA_HALLWAY_AUTH_KEY: \"authkey\" }, CHANNEL: { SOCKET: 1, XHR: 2, AUTO: 0 }, NAME_VERSION: { openim: \"v4\", group_open_http_svc: \"v4\", sns: \"v4\", profile: \"v4\", recentcontact: \"v4\", openpic: \"v4\", group_open_http_noauth_svc: \"v1\", group_open_long_polling_http_noauth_svc: \"v1\", imopenstat: \"v4\", im_cos_sign_svr: \"v4\", webim: \"v4\" } };Yf.HOST.setCurrent(Yf.HOST.ACCESS_LAYER_TYPES.PRODUCTION);var $f = { request: { toAccount: \"To_Account\", fromAccount: \"From_Account\", to: \"To_Account\", from: \"From_Account\", groupID: \"GroupId\", avatar: \"FaceUrl\" }, response: { GroupId: \"groupID\", Member_Account: \"userID\", MsgList: \"messageList\", SyncFlag: \"syncFlag\", To_Account: \"to\", From_Account: \"from\", MsgSeq: \"sequence\", MsgRandom: \"random\", MsgTimeStamp: \"time\", MsgContent: \"content\", MsgBody: \"elements\", GroupWithdrawInfoArray: \"revokedInfos\", WithdrawC2cMsgNotify: \"c2cMessageRevokedNotify\", C2cWithdrawInfoArray: \"revokedInfos\", C2cReadedReceipt: \"c2cMessageReadReceipt\", LastReadTime: \"peerReadTime\", MsgRand: \"random\", MsgType: \"type\", MsgShow: \"messageShow\", NextMsgSeq: \"nextMessageSeq\", FaceUrl: \"avatar\", ProfileDataMod: \"profileModify\", Profile_Account: \"userID\", ValueBytes: \"value\", ValueNum: \"value\", NoticeSeq: \"noticeSequence\", NotifySeq: \"notifySequence\", MsgFrom_AccountExtraInfo: \"messageFromAccountExtraInformation\", Operator_Account: \"operatorID\", OpType: \"operationType\", ReportType: \"operationType\", UserId: \"userID\", User_Account: \"userID\", List_Account: \"userIDList\", MsgOperatorMemberExtraInfo: \"operatorInfo\", MsgMemberExtraInfo: \"memberInfoList\", ImageUrl: \"avatar\", NickName: \"nick\", MsgGroupNewInfo: \"newGroupProfile\", MsgAppDefinedData: \"groupCustomField\", Owner_Account: \"ownerID\", GroupName: \"name\", GroupFaceUrl: \"avatar\", GroupIntroduction: \"introduction\", GroupNotification: \"notification\", GroupApplyJoinOption: \"joinOption\", MsgKey: \"messageKey\", GroupInfo: \"groupProfile\", ShutupTime: \"muteTime\", Desc: \"description\", Ext: \"extension\" }, ignoreKeyWord: [\"C2C\", \"ID\", \"USP\"] },Wf = \"_contextWasUpdated\",zf = \"_contextWasReset\",Xf = \"_a2KeyAndTinyIDUpdated\",Jf = \"_specifiedConfigUpdated\",Qf = \"_noticeIsSynchronizing\",Zf = \"_noticeIsSynchronized\",eh = \"_messageSent\",th = \"_syncMessageProcessing\",nh = \"_syncMessageFinished\",rh = \"_receiveInstantMessage\",oh = \"_receiveGroupInstantMessage\",ih = \"_receveGroupSystemNotice\",sh = \"_messageRevoked\",ah = \"_longPollGetIDFailed\",uh = \"_longPollRequestFailed\",ch = \"_longPollResponseOK\",lh = \"_longPollFastStart\",ph = \"_longPollSlowStart\",fh = \"_longPollKickedOut\",hh = \"_longPollMitipuleDeviceKickedOut\",dh = \"_longPollGetNewC2CNotice\",gh = \"_longPollGetNewGroupMessages\",mh = \"_longPollGetNewGroupTips\",vh = \"_longPollGetNewGroupNotice\",yh = \"_longPollGetNewFriendMessages\",_h = \"_longPollProfileModified\",Ih = \"_longPollNoticeReceiveSystemOrders\",Eh = \" _longpollGroupMessageRevoked\",Ch = \"_longpollC2CMessageRevoked\",Mh = \"_longpollC2CMessageReadReceipt\",Sh = \"_avlongPollRequestFailed\",Th = \"_avlongPollResponseOK\",Dh = \"_onGroupListUpdated\",Ah = \"_loginSuccess\",kh = \"_signLogoutExcuting\",Rh = \"_logoutSuccess\",Oh = \"_a2keyExpired\",wh = \"_errorHasBeenDetected\",Nh = \"_onConversationListUpdated\",Lh = \"_onConversationListProfileUpdated\",bh = \"_conversationDeleted\",Ph = \"onProfileUpdated\",Gh = \"joinAVChatRoomSuccess\",Uh = \"joinAVChatRoomSuccessNoAuth\",xh = \"_sdkStateReady\",qh = Ke.filter,Fh = yn(\"filter\"),Vh = ze(\"filter\");Re({ target: \"Array\", proto: !0, forced: !Fh || !Vh }, { filter: function filter(e) {return qh(this, e, arguments.length > 1 ? arguments[1] : void 0);} }), Re({ target: \"Object\", stat: !0, forced: Object.assign !== Ku }, { assign: Ku });var Bh = Hr.trim;function jh(e, t) {if (\"string\" != typeof e && !Array.isArray(e)) throw new TypeError(\"Expected the input to be `string | string[]`\");t = Object.assign({ pascalCase: !1 }, t);var n;return 0 === (e = Array.isArray(e) ? e.map(function (e) {return e.trim();}).filter(function (e) {return e.length;}).join(\"-\") : e.trim()).length ? \"\" : 1 === e.length ? t.pascalCase ? e.toUpperCase() : e.toLowerCase() : (e !== e.toLowerCase() && (e = Kh(e)), e = e.replace(/^[_.\\- ]+/, \"\").toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (e, t) {return t.toUpperCase();}).replace(/\\d+(\\w|$)/g, function (e) {return e.toUpperCase();}), n = e, t.pascalCase ? n.charAt(0).toUpperCase() + n.slice(1) : n);}Re({ target: \"String\", proto: !0, forced: function (e) {return o(function () {return !!Fr[e]() || \"​᠎\" != \"​᠎\"[e]() || Fr[e].name !== e;});}(\"trim\") }, { trim: function trim() {return Bh(this);} });var Kh = function Kh(e) {for (var t = !1, n = !1, r = !1, o = 0; o < e.length; o++) {var i = e[o];t && /[a-zA-Z]/.test(i) && i.toUpperCase() === i ? (e = e.slice(0, o) + \"-\" + e.slice(o), t = !1, r = n, n = !0, o++) : n && r && /[a-zA-Z]/.test(i) && i.toLowerCase() === i ? (e = e.slice(0, o - 1) + \"-\" + e.slice(o - 1), r = n, n = !1, t = !0) : (t = i.toLowerCase() === i && i.toUpperCase() !== i, r = n, n = i.toUpperCase() === i && i.toLowerCase() !== i);}return e;};function Hh(e, t, n) {var r = [],o = 0,i = function e(t, n) {if (++o > 10) return o--, t;if (ma(t)) {var i = t.map(function (t) {return da(t) ? e(t, n) : t;});return o--, i;}if (da(t)) {var s = (a = t, u = function u(e, t) {if (!Ca(t)) return !1;if ((s = t) !== jh(s)) {for (var o = !0, i = 0; i < $f.ignoreKeyWord.length; i++) {if (t.includes($f.ignoreKeyWord[i])) {o = !1;break;}}o && r.push(t);}var s;return va(n[t]) ? function (e) {return \"OPPOChannelID\" === e ? e : e[0].toUpperCase() + jh(e).slice(1);}(t) : n[t];}, c = Object.create(null), Object.keys(a).forEach(function (e) {var t = u(a[e], e);t && (c[t] = a[e]);}), c);return s = Va(s, function (t, r) {return ma(t) || da(t) ? e(t, n) : t;}), o--, s;}var a, u, c;}(e, t = Nn({}, $f.request, {}, t));return r.length > 0 && n.innerEmitter.emit(wh, { code: Sp.CONVERTOR_IRREGULAR_PARAMS, message: Tf }), i;}function Yh(e, t) {if (t = Nn({}, $f.response, {}, t), ma(e)) return e.map(function (e) {return da(e) ? Yh(e, t) : e;});if (da(e)) {var n = (r = e, o = function o(e, n) {return va(t[n]) ? jh(n) : t[n];}, i = {}, Object.keys(r).forEach(function (e) {i[o(r[e], e)] = r[e];}), i);return n = Va(n, function (e) {return ma(e) || da(e) ? Yh(e, t) : e;});}var r, o, i;}var $h = function () {function e(t) {var n = this;An(this, e), this.url = \"\", this.requestData = null, this.method = t.method || \"POST\", this.callback = function (e) {return Yh(e = t.decode(e), n._getResponseMap(t));}, this._initializeServerMap(), this._initializeURL(t), this._initializeRequestData(t);}return Rn(e, [{ key: \"_initializeServerMap\", value: function value() {this._serverMap = Object.create(null);var e = \"\";for (var t in Yf.NAME) {if (Object.prototype.hasOwnProperty.call(Yf.NAME, t)) switch (e = Yf.NAME[t]) {case Yf.NAME.PIC:this._serverMap[e] = Yf.HOST.CURRENT.PIC;break;case Yf.NAME.IM_COS_SIGN:this._serverMap[e] = Yf.HOST.CURRENT.COS;break;default:this._serverMap[e] = Yf.HOST.CURRENT.COMMON;}}} }, { key: \"_getHost\", value: function value(e) {if (void 0 !== this._serverMap[e]) return this._serverMap[e];throw new Mp({ code: Sp.NETWORK_UNDEFINED_SERVER_NAME, message: Cf });} }, { key: \"_initializeURL\", value: function value(e) {var t = e.serverName,n = e.cmd,r = this._getHost(t),o = \"\".concat(r, \"/\").concat(Yf.NAME_VERSION[t], \"/\").concat(t, \"/\").concat(n);o += \"?\".concat(this._getQueryString(e.queryString)), this.url = o;} }, { key: \"getUrl\", value: function value() {return this.url.replace(/&reqtime=(\\d+)/, \"&reqtime=\".concat(Math.ceil(+new Date() / 1e3)));} }, { key: \"_initializeRequestData\", value: function value(e) {var t,n = e.requestData;t = this._requestDataCleaner(n), this.requestData = e.encode(t);} }, { key: \"_requestDataCleaner\", value: function value(e) {var t = Array.isArray(e) ? [] : Object.create(null);for (var n in e) {Object.prototype.hasOwnProperty.call(e, n) && Ca(n) && null !== e[n] && (\"object\" !== Dn(e[n]) ? t[n] = e[n] : t[n] = this._requestDataCleaner.bind(this)(e[n]));}return t;} }, { key: \"_getQueryString\", value: function value(e) {var t = [];for (var n in e) {Object.prototype.hasOwnProperty.call(e, n) && (\"function\" != typeof e[n] ? t.push(\"\".concat(n, \"=\").concat(e[n])) : t.push(\"\".concat(n, \"=\").concat(e[n]())));}return t.join(\"&\");} }, { key: \"_getResponseMap\", value: function value(e) {if (e.keyMaps && e.keyMaps.response && Object.keys(e.keyMaps.response).length > 0) return e.keyMaps.response;} }]), e;}(),Wh = [].slice,zh = /MSIE .\\./.test(fn),Xh = function Xh(e) {return function (t, n) {var r = arguments.length > 2,o = r ? Wh.call(arguments, 2) : void 0;return e(r ? function () {(\"function\" == typeof t ? t : Function(t)).apply(this, o);} : t, n);};};function Jh(e) {this.mixin(e);}Re({ global: !0, bind: !0, forced: zh }, { setTimeout: Xh(r.setTimeout), setInterval: Xh(r.setInterval) }), Jh.mixin = function (e) {var t = e.prototype || e;t._isReady = !1, t.ready = function (e) {var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];if (e) return this._isReady ? void (t ? e.call(this) : setTimeout(e, 1)) : (this._readyQueue = this._readyQueue || [], void this._readyQueue.push(e));}, t.triggerReady = function () {var e = this;this._isReady = !0, setTimeout(function () {var t = e._readyQueue;e._readyQueue = [], t && t.length > 0 && t.forEach(function (e) {e.call(this);}, e);}, 1);}, t.resetReady = function () {this._isReady = !1, this._readyQueue = [];}, t.isReady = function () {return this._isReady;};};var Qh = function () {function e(t) {An(this, e), Jh.mixin(this), this.tim = t;}return Rn(e, [{ key: \"isLoggedIn\", value: function value() {return this.tim.context.login === Gu.IS_LOGIN || !!this.tim.context.a2Key;} }, { key: \"createTransportCapsule\", value: function value(e) {var t = this.tim.packageConfig.get(e);return t ? new $h(t) : null;} }, { key: \"request\", value: function value(e) {var t = this.createTransportCapsule(e);return t || la.error(\"unknown transport capsule, please check!\", e), this.tim.connectionController.request(t);} }, { key: \"emitInnerEvent\", value: function value(e, t) {this.tim.innerEmitter.emit(e, t);} }, { key: \"emitOuterEvent\", value: function value(e, t) {this.tim.outerEmitter.emit(e, t);} }, { key: \"reset\", value: function value() {la.warn([\"method: IMController.reset() method must be implemented\"].join());} }, { key: \"probeNetwork\", value: function value() {return this.tim.netMonitor.probe();} }, { key: \"getNetworkType\", value: function value() {return this.tim.netMonitor.getNetworkType();} }, { key: \"getPlatform\", value: function value() {var e = \"web\";return js ? e = \"wechat\" : Ns && (e = \"wxmp\"), e;} }]), e;}(),Zh = function () {function e(t, n) {An(this, e), this.data = t, this._innerEmitter = n, this.defaultData = {}, Object.assign(this.defaultData, t), this.initGetterAndSetter();}return Rn(e, [{ key: \"initGetterAndSetter\", value: function value() {var e = this,t = function t(_t4) {Object.defineProperty(e, _t4, { enumerable: !0, configurable: !0, get: function get() {return e.data[_t4];}, set: function set(n) {e.data[_t4] !== n && (e.data[_t4] = n, e.onChange.bind(e)(_t4, n));} });};for (var n in e.data) {Object.prototype.hasOwnProperty.call(e.data, n) && t(n);}} }, { key: \"onChange\", value: function value(e, t) {this._innerEmitter.emit(Wf, { key: e, value: t });} }, { key: \"reset\", value: function value() {for (var e in la.log(\"Context.reset\"), this.data) {Object.prototype.hasOwnProperty.call(this.data, e) && (this.data[e] = this.defaultData.hasOwnProperty(e) ? this.defaultData[e] : null);}} }]), e;}(),ed = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;An(this, n);var o = (r = t.call(this, e)).tim.loginInfo;return r._context = new Zh({ login: Gu.IS_NOT_LOGIN, SDKAppID: o.SDKAppID, appIDAt3rd: null, accountType: o.accountType, identifier: o.identifier, tinyID: null, identifierNick: o.identifierNick, userSig: o.userSig, a2Key: null, contentType: \"json\", apn: 1, unlimitedAVChatRoom: o.unlimitedAVChatRoom }, r.tim.innerEmitter), r._initListener(), r;}return Rn(n, [{ key: \"reset\", value: function value() {this._context.reset(), this.emitInnerEvent(zf);} }, { key: \"_initListener\", value: function value() {this.tim.innerEmitter.on(Wf, this._onContextMemberChange, this), this.tim.innerEmitter.on(Ah, this._updateA2KeyAndTinyID, this);} }, { key: \"_updateA2KeyAndTinyID\", value: function value(e) {var t = e.data,n = t.a2Key,r = t.tinyID;this._context.a2Key = n, this._context.tinyID = r, this.emitInnerEvent(Xf), this.triggerReady();} }, { key: \"getContext\", value: function value() {return this._context;} }, { key: \"_onContextMemberChange\", value: function value(e) {var t = e.data,n = t.key,r = t.value;(\"tinyID\" === n || \"a2Key\" === n) && (r.length <= 0 ? this._context.login = Gu.IS_NOT_LOGIN : this._context.login = null !== this._context.a2Key ? Gu.IS_LOGIN : Gu.IS_NOT_LOGIN);} }]), n;}(Qh),td = function e(t) {An(this, e), this.code = 0, this.data = t || {};},nd = null,rd = function rd(e) {nd = e;},od = function od(e) {return e instanceof td ? (la.warn(\"IMPromise.resolve 此函数会自动用options创建IMResponse实例，调用侧不需创建，建议修改！\"), Promise.resolve(e)) : Promise.resolve(new td(e));},id = function id(e) {var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];if (e instanceof Mp) return t && null !== nd && nd.emit(ln.ERROR, e), Promise.reject(e);if (e instanceof Error) {var n = new Mp({ code: Sp.UNCAUGHT_ERROR, message: e.message });return t && null !== nd && nd.emit(ln.ERROR, n), Promise.reject(n);}if (va(e) || va(e.code) || va(e.message)) la.error(\"IMPromise.reject 必须指定code(错误码)和message(错误信息)!!!\");else {if (fa(e.code) && ha(e.message)) {var r = new Mp(e);return t && null !== nd && nd.emit(ln.ERROR, r), Promise.reject(r);}la.error(\"IMPromise.reject code(错误码)必须为数字，message(错误信息)必须为字符串!!!\");}},sd = { SDK_READY: \"sdkReady\", LOGIN: \"login\", LONG_POLLING: \"longpolling\", LONG_POLLING_AV: \"longpollingAV\", SEND_MESSAGE: \"sendMessage\", SEND_MESSAGE_C2C: \"sendMessageC2C\", SEND_MESSAGE_GROUP_WORK: \"sendMessageGroupWork\", SEND_MESSAGE_GROUP_PUBLIC: \"sendMessageGroupPublic\", SEND_MESSAGE_GROUP_MEETING: \"sendMessageGroupMeeting\", SEND_MESSAGE_GROUP_AV: \"sendMessageGroupAV\", MESSAGE_RECEIVED: \"messageReceived\", MESSAGE_RECEIVED_AV: \"messageReceivedAV\", INIT_CONVERSATION_LIST: \"initConversationList\", INIT_GROUP_LIST: \"initGroupList\", UPLOAD: \"upload\" },ad = function () {function e() {An(this, e), this.SDKAppID = \"\", this.version = \"\", this.tinyID = \"\", this.userID = \"\", this.platform = \"\", this.method = \"\", this.time = \"\", this.startts = 0, this.endts = 0, this.timespan = 0, this.codeint = 0, this.message = \"\", this.text = \"\", this.msgType = \"\", this.networkType = \"\", this.platform = \"\", this._sentFlag = !1;}return Rn(e, [{ key: \"setCommonInfo\", value: function value(e, t, n, r, o) {this.SDKAppID = \"\".concat(e), this.version = \"\".concat(t), this.tinyID = n, this.userID = r, this.platform = o, this.time = Aa(), this.startts && this.endts && !this.timespan && (this.timespan = Math.abs(this.endts - this.startts));} }, { key: \"setMethod\", value: function value(e) {return this.method = e, this;} }, { key: \"setStart\", value: function value() {this.startts = Date.now();} }, { key: \"setEnd\", value: function value() {var e = this,t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];this._sentFlag || (this.endts = Date.now(), t ? (this._sentFlag = !0, this._eventStatController.pushIn(this)) : setTimeout(function () {e._sentFlag = !0, e._eventStatController.pushIn(e);}, 0));} }, { key: \"setError\", value: function value(e, t, n) {return e instanceof Error ? (this._sentFlag || (this.setNetworkType(n), t ? (e.code && this.setCode(e.code), e.message && this.setMessage(e.message)) : (this.setCode(Sp.NO_NETWORK), this.setMessage(Sf))), this) : (la.warn(\"SSOLogData.setError value not instanceof Error, please check!\"), this);} }, { key: \"setCode\", value: function value(e) {return va(e) || this._sentFlag || (\"ECONNABORTED\" === e && (this.codeint = 103), fa(e) ? this.codeint = e : la.warn(\"SSOLogData.setCode value not a number, please check!\", e, Dn(e))), this;} }, { key: \"setMessage\", value: function value(e) {return va(e) || this._sentFlag ? this : ha(e) ? (this.message = e, this) : this;} }, { key: \"setText\", value: function value(e) {return fa(e) ? this.text = e.toString() : ha(e) && (this.text = e), this;} }, { key: \"setMessageType\", value: function value(e) {return this.msgType = e, this;} }, { key: \"setNetworkType\", value: function value(e) {return va(e) ? la.warn(\"SSOLogData.setNetworkType value is undefined, please check!\") : this.networkType = e, this;} }], [{ key: \"bindController\", value: function value(t) {e.prototype._eventStatController = t;} }]), e;}(),ud = \"sdkConstruct\",cd = \"sdkReady\",ld = \"accessLayer\",pd = \"login\",fd = \"logout\",hd = \"kickedOut\",dd = \"registerPlugin\",gd = \"getCosAuthKey\",md = \"upload\",vd = \"sendMessage\",yd = \"getC2CRoamingMessages\",_d = \"getGroupRoamingMessages\",Id = \"revokeMessage\",Ed = \"setC2CMessageRead\",Cd = \"setGroupMessageRead\",Md = \"emptyMessageBody\",Sd = \"getPeerReadTime\",Td = \"getConversationList\",Dd = \"getConversationProfile\",Ad = \"deleteConversation\",kd = \"getConversationListInStorage\",Rd = \"syncConversationList\",Od = \"createGroup\",wd = \"applyJoinGroup\",Nd = \"quitGroup\",Ld = \"searchGroupByID\",bd = \"changeGroupOwner\",Pd = \"handleGroupApplication\",Gd = \"setMessageRemindType\",Ud = \"dismissGroup\",xd = \"updateGroupProfile\",qd = \"getGroupList\",Fd = \"getGroupProfile\",Vd = \"getGroupListInStorage\",Bd = \"getGroupLastSequence\",jd = \"getGroupMemberList\",Kd = \"getGroupMemberProfile\",Hd = \"addGroupMember\",Yd = \"deleteGroupMember\",$d = \"setGroupMemberMuteTime\",Wd = \"setGroupMemberNameCard\",zd = \"setGroupMemberRole\",Xd = \"setGroupMemberCustomField\",Jd = \"getLongPollID\",Qd = \"longPollingError\",Zd = \"networkJitter\",eg = \"fastStart\",tg = \"slowStart\",ng = \"messageLoss\",rg = \"getUserProfile\",og = \"updateMyProfile\",ig = \"getBlacklist\",sg = \"addToBlacklist\",ag = \"removeFromBlacklist\",ug = \"mpHideToShow\",cg = \"callbackFunctionError\",lg = \"exceptionError\",pg = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e))._initializeListener(), r;}return Rn(n, [{ key: \"login\", value: function value(e) {if (this.isLoggedIn()) {var t = \"您已经登录账号\".concat(e.identifier, \"！如需切换账号登录，请先调用 logout 接口登出，再调用 login 接口登录。\");return la.warn(t), od({ actionStatus: \"OK\", errorCode: 0, errorInfo: t, repeatLogin: !0 });}la.log(\"SignController.login userID=\", e.identifier), la.time(sd.LOGIN);var n = this._checkLoginInfo(e);return ja(n) ? (this.tim.context.identifier = e.identifier, this.tim.context.userSig = e.userSig, this.tim.context.identifier && this.tim.context.userSig ? this._accessLayer() : void 0) : id(n);} }, { key: \"_isLoginCurrentUser\", value: function value(e) {return this.tim.context.identifier === e;} }, { key: \"_initializeListener\", value: function value() {var e = this.tim.innerEmitter;e.on(fh, this._onMultipleAccountKickedOut, this), e.on(hh, this._onMultipleDeviceKickedOut, this), e.on(Oh, this._onUserSigExpired, this);} }, { key: \"_accessLayer\", value: function value() {var e = this,t = new ad();return t.setMethod(ld).setStart(), la.log(\"SignController._accessLayer.\"), this.request({ name: \"accessLayer\", action: \"query\" }).then(function (n) {return t.setCode(0).setNetworkType(e.getNetworkType()).setText(n.data.webImAccessLayer).setEnd(), la.log(\"SignController._accessLayer ok. webImAccessLayer=\".concat(n.data.webImAccessLayer)), 1 === n.data.webImAccessLayer && Yf.HOST.setCurrent(n.data.webImAccessLayer), e._login();}).catch(function (n) {return e.probeNetwork().then(function (r) {var o = Bn(r, 2),i = o[0],s = o[1];t.setError(n, i, s).setEnd(!0), e.tim.eventStatController.reportAtOnce();}), la.error(\"SignController._accessLayer failed. error:\", n), id(n);});} }, { key: \"_login\", value: function value() {var e = this,t = new ad();return t.setMethod(pd).setStart(), this.request({ name: \"login\", action: \"query\" }).then(function (n) {var r = null;if (!n.data.tinyID) throw r = new Mp({ code: Sp.NO_TINYID, message: Rp }), t.setError(r, !0, e.getNetworkType()).setEnd(), r;if (!n.data.a2Key) throw r = new Mp({ code: Sp.NO_A2KEY, message: Op }), t.setError(r, !0, e.getNetworkType()).setEnd(), r;return t.setCode(0).setNetworkType(e.getNetworkType()).setText(\"\".concat(e.tim.loginInfo.identifier)).setEnd(), la.log(\"SignController.login ok. userID=\".concat(e.tim.loginInfo.identifier, \" loginCost=\").concat(la.timeEnd(sd.LOGIN), \"ms\")), e.emitInnerEvent(Ah, { a2Key: n.data.a2Key, tinyID: n.data.tinyID }), od(n.data);}).catch(function (n) {return e.probeNetwork().then(function (e) {var r = Bn(e, 2),o = r[0],i = r[1];t.setError(n, o, i).setEnd(!0);}), la.error(\"SignController.login failed. error:\", n), id(n);});} }, { key: \"logout\", value: function value() {var e = new ad();return e.setMethod(fd).setStart(), e.setCode(0).setNetworkType(this.getNetworkType()).setText(\"userID=\".concat(this.tim.loginInfo.identifier, \" type=\").concat(\"longPollLogout\")).setEnd(!0), la.info(\"SignController.logout\"), this.emitInnerEvent(kh), this._logout(op).then(this._emitLogoutSuccess.bind(this)).catch(this._emitLogoutSuccess.bind(this));} }, { key: \"_logout\", value: function value(e) {var t = this.tim.notificationController,n = e === rp ? \"logout\" : \"longPollLogout\",r = e === rp ? { name: n, action: \"query\" } : { name: n, action: \"query\", param: { longPollID: t.getLongPollID() } };return this.request(r).catch(function (e) {return la.error(\"SignController._logout error:\", e), id(e);});} }, { key: \"_checkLoginInfo\", value: function value(e) {var t = 0,n = \"\";return null === e.SDKAppID ? (t = Sp.NO_SDKAPPID, n = Tp) : null === e.accountType ? (t = Sp.NO_ACCOUNT_TYPE, n = Dp) : null === e.identifier ? (t = Sp.NO_IDENTIFIER, n = Ap) : null === e.userSig && (t = Sp.NO_USERSIG, n = kp), ja(t) || ja(n) ? {} : { code: t, message: n };} }, { key: \"_emitLogoutSuccess\", value: function value() {return this.emitInnerEvent(Rh), od({});} }, { key: \"_onMultipleAccountKickedOut\", value: function value() {var e = this,t = new ad();t.setMethod(hd).setStart(), t.setCode(0).setNetworkType(this.getNetworkType()).setText(pn.KICKED_OUT_MULT_ACCOUNT).setEnd(!0), la.warn(\"SignController._onMultipleAccountKickedOut kicked out. userID=\".concat(this.tim.loginInfo.identifier)), this.tim.logout().then(function () {e.emitOuterEvent(ln.KICKED_OUT, { type: pn.KICKED_OUT_MULT_ACCOUNT });});} }, { key: \"_onMultipleDeviceKickedOut\", value: function value() {var e = this,t = new ad();t.setMethod(hd).setStart(), t.setCode(0).setNetworkType(this.getNetworkType()).setText(pn.KICKED_OUT_MULT_DEVICE).setEnd(!0), la.warn(\"SignController._onMultipleDeviceKickedOut kicked out. userID=\".concat(this.tim.loginInfo.identifier)), this.tim.logout().then(function () {e.emitOuterEvent(ln.KICKED_OUT, { type: pn.KICKED_OUT_MULT_DEVICE });});} }, { key: \"_onUserSigExpired\", value: function value() {var e = new ad();e.setMethod(hd).setStart(), e.setCode(0).setNetworkType(this.getNetworkType()).setText(pn.KICKED_OUT_USERSIG_EXPIRED).setEnd(!0), la.warn(\"SignController._onUserSigExpired: userSig 签名过期被踢下线\"), this.emitOuterEvent(ln.KICKED_OUT, { type: pn.KICKED_OUT_USERSIG_EXPIRED }), this.tim.resetSDK();} }, { key: \"reset\", value: function value() {la.info(\"SignController.reset\");} }]), n;}(Qh),fg = function fg(e, t) {return function () {for (var n = new Array(arguments.length), r = 0; r < n.length; r++) {n[r] = arguments[r];}return e.apply(t, n);};},hg = Object.prototype.toString;function dg(e) {return \"[object Array]\" === hg.call(e);}function gg(e) {return void 0 === e;}function mg(e) {return null !== e && \"object\" == typeof e;}function vg(e) {return \"[object Function]\" === hg.call(e);}function yg(e, t) {if (null != e) if (\"object\" != typeof e && (e = [e]), dg(e)) for (var n = 0, r = e.length; n < r; n++) {t.call(null, e[n], n, e);} else for (var o in e) {Object.prototype.hasOwnProperty.call(e, o) && t.call(null, e[o], o, e);}}var _g = { isArray: dg, isArrayBuffer: function isArrayBuffer(e) {return \"[object ArrayBuffer]\" === hg.call(e);}, isBuffer: function isBuffer(e) {return null !== e && !gg(e) && null !== e.constructor && !gg(e.constructor) && \"function\" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);}, isFormData: function isFormData(e) {return \"undefined\" != typeof FormData && e instanceof FormData;}, isArrayBufferView: function isArrayBufferView(e) {return \"undefined\" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e) : e && e.buffer && e.buffer instanceof ArrayBuffer;}, isString: function isString(e) {return \"string\" == typeof e;}, isNumber: function isNumber(e) {return \"number\" == typeof e;}, isObject: mg, isUndefined: gg, isDate: function isDate(e) {return \"[object Date]\" === hg.call(e);}, isFile: function isFile(e) {return \"[object File]\" === hg.call(e);}, isBlob: function isBlob(e) {return \"[object Blob]\" === hg.call(e);}, isFunction: vg, isStream: function isStream(e) {return mg(e) && vg(e.pipe);}, isURLSearchParams: function isURLSearchParams(e) {return \"undefined\" != typeof URLSearchParams && e instanceof URLSearchParams;}, isStandardBrowserEnv: function isStandardBrowserEnv() {return (\"undefined\" == typeof navigator || \"ReactNative\" !== navigator.product && \"NativeScript\" !== navigator.product && \"NS\" !== navigator.product) && \"undefined\" != typeof window && \"undefined\" != typeof document;}, forEach: yg, merge: function e() {var t = {};function n(n, r) {\"object\" == typeof t[r] && \"object\" == typeof n ? t[r] = e(t[r], n) : t[r] = n;}for (var r = 0, o = arguments.length; r < o; r++) {yg(arguments[r], n);}return t;}, deepMerge: function e() {var t = {};function n(n, r) {\"object\" == typeof t[r] && \"object\" == typeof n ? t[r] = e(t[r], n) : t[r] = \"object\" == typeof n ? e({}, n) : n;}for (var r = 0, o = arguments.length; r < o; r++) {yg(arguments[r], n);}return t;}, extend: function extend(e, t, n) {return yg(t, function (t, r) {e[r] = n && \"function\" == typeof t ? fg(t, n) : t;}), e;}, trim: function trim(e) {return e.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");} };function Ig(e) {return encodeURIComponent(e).replace(/%40/gi, \"@\").replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");}var Eg = function Eg(e, t, n) {if (!t) return e;var r;if (n) r = n(t);else if (_g.isURLSearchParams(t)) r = t.toString();else {var o = [];_g.forEach(t, function (e, t) {null != e && (_g.isArray(e) ? t += \"[]\" : e = [e], _g.forEach(e, function (e) {_g.isDate(e) ? e = e.toISOString() : _g.isObject(e) && (e = JSON.stringify(e)), o.push(Ig(t) + \"=\" + Ig(e));}));}), r = o.join(\"&\");}if (r) {var i = e.indexOf(\"#\");-1 !== i && (e = e.slice(0, i)), e += (-1 === e.indexOf(\"?\") ? \"?\" : \"&\") + r;}return e;};function Cg() {this.handlers = [];}Cg.prototype.use = function (e, t) {return this.handlers.push({ fulfilled: e, rejected: t }), this.handlers.length - 1;}, Cg.prototype.eject = function (e) {this.handlers[e] && (this.handlers[e] = null);}, Cg.prototype.forEach = function (e) {_g.forEach(this.handlers, function (t) {null !== t && e(t);});};var Mg = Cg,Sg = function Sg(e, t, n) {return _g.forEach(n, function (n) {e = n(e, t);}), e;},Tg = function Tg(e) {return !(!e || !e.__CANCEL__);};function Dg() {throw new Error(\"setTimeout has not been defined\");}function Ag() {throw new Error(\"clearTimeout has not been defined\");}var kg = Dg,Rg = Ag;function Og(e) {if (kg === setTimeout) return setTimeout(e, 0);if ((kg === Dg || !kg) && setTimeout) return kg = setTimeout, setTimeout(e, 0);try {return kg(e, 0);} catch (t) {try {return kg.call(null, e, 0);} catch (t) {return kg.call(this, e, 0);}}}\"function\" == typeof na.setTimeout && (kg = setTimeout), \"function\" == typeof na.clearTimeout && (Rg = clearTimeout);var wg,Ng = [],Lg = !1,bg = -1;function Pg() {Lg && wg && (Lg = !1, wg.length ? Ng = wg.concat(Ng) : bg = -1, Ng.length && Gg());}function Gg() {if (!Lg) {var e = Og(Pg);Lg = !0;for (var t = Ng.length; t;) {for (wg = Ng, Ng = []; ++bg < t;) {wg && wg[bg].run();}bg = -1, t = Ng.length;}wg = null, Lg = !1, function (e) {if (Rg === clearTimeout) return clearTimeout(e);if ((Rg === Ag || !Rg) && clearTimeout) return Rg = clearTimeout, clearTimeout(e);try {Rg(e);} catch (t) {try {return Rg.call(null, e);} catch (t) {return Rg.call(this, e);}}}(e);}}function Ug(e, t) {this.fun = e, this.array = t;}Ug.prototype.run = function () {this.fun.apply(null, this.array);};function xg() {}var qg = xg,Fg = xg,Vg = xg,Bg = xg,jg = xg,Kg = xg,Hg = xg;var Yg = na.performance || {},$g = Yg.now || Yg.mozNow || Yg.msNow || Yg.oNow || Yg.webkitNow || function () {return new Date().getTime();};var Wg = new Date();var zg = { nextTick: function nextTick(e) {var t = new Array(arguments.length - 1);if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {t[n - 1] = arguments[n];}Ng.push(new Ug(e, t)), 1 !== Ng.length || Lg || Og(Gg);}, title: \"browser\", browser: !0, env: {}, argv: [], version: \"\", versions: {}, on: qg, addListener: Fg, once: Vg, off: Bg, removeListener: jg, removeAllListeners: Kg, emit: Hg, binding: function binding(e) {throw new Error(\"process.binding is not supported\");}, cwd: function cwd() {return \"/\";}, chdir: function chdir(e) {throw new Error(\"process.chdir is not supported\");}, umask: function umask() {return 0;}, hrtime: function hrtime(e) {var t = .001 * $g.call(Yg),n = Math.floor(t),r = Math.floor(t % 1 * 1e9);return e && (n -= e[0], (r -= e[1]) < 0 && (n--, r += 1e9)), [n, r];}, platform: \"browser\", release: {}, config: {}, uptime: function uptime() {return (new Date() - Wg) / 1e3;} },Xg = function Xg(e, t) {_g.forEach(e, function (n, r) {r !== t && r.toUpperCase() === t.toUpperCase() && (e[t] = n, delete e[r]);});},Jg = function Jg(e, t, n, r, o) {return function (e, t, n, r, o) {return e.config = t, n && (e.code = n), e.request = r, e.response = o, e.isAxiosError = !0, e.toJSON = function () {return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code };}, e;}(new Error(e), t, n, r, o);},Qg = [\"age\", \"authorization\", \"content-length\", \"content-type\", \"etag\", \"expires\", \"from\", \"host\", \"if-modified-since\", \"if-unmodified-since\", \"last-modified\", \"location\", \"max-forwards\", \"proxy-authorization\", \"referer\", \"retry-after\", \"user-agent\"],Zg = _g.isStandardBrowserEnv() ? function () {var e,t = /(msie|trident)/i.test(navigator.userAgent),n = document.createElement(\"a\");function r(e) {var r = e;return t && (n.setAttribute(\"href\", r), r = n.href), n.setAttribute(\"href\", r), { href: n.href, protocol: n.protocol ? n.protocol.replace(/:$/, \"\") : \"\", host: n.host, search: n.search ? n.search.replace(/^\\?/, \"\") : \"\", hash: n.hash ? n.hash.replace(/^#/, \"\") : \"\", hostname: n.hostname, port: n.port, pathname: \"/\" === n.pathname.charAt(0) ? n.pathname : \"/\" + n.pathname };}return e = r(window.location.href), function (t) {var n = _g.isString(t) ? r(t) : t;return n.protocol === e.protocol && n.host === e.host;};}() : function () {return !0;},em = _g.isStandardBrowserEnv() ? { write: function write(e, t, n, r, o, i) {var s = [];s.push(e + \"=\" + encodeURIComponent(t)), _g.isNumber(n) && s.push(\"expires=\" + new Date(n).toGMTString()), _g.isString(r) && s.push(\"path=\" + r), _g.isString(o) && s.push(\"domain=\" + o), !0 === i && s.push(\"secure\"), document.cookie = s.join(\"; \");}, read: function read(e) {var t = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + e + \")=([^;]*)\"));return t ? decodeURIComponent(t[3]) : null;}, remove: function remove(e) {this.write(e, \"\", Date.now() - 864e5);} } : { write: function write() {}, read: function read() {return null;}, remove: function remove() {} },tm = function tm(e) {return new Promise(function (t, n) {var r = e.data,o = e.headers;_g.isFormData(r) && delete o[\"Content-Type\"];var i = new XMLHttpRequest();if (e.auth) {var s = e.auth.username || \"\",a = e.auth.password || \"\";o.Authorization = \"Basic \" + btoa(s + \":\" + a);}var u,c,l = (u = e.baseURL, c = e.url, u && !/^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(c) ? function (e, t) {return t ? e.replace(/\\/+$/, \"\") + \"/\" + t.replace(/^\\/+/, \"\") : e;}(u, c) : c);if (i.open(e.method.toUpperCase(), Eg(l, e.params, e.paramsSerializer), !0), i.timeout = e.timeout, i.onreadystatechange = function () {if (i && 4 === i.readyState && (0 !== i.status || i.responseURL && 0 === i.responseURL.indexOf(\"file:\"))) {var r = \"getAllResponseHeaders\" in i ? function (e) {var t,n,r,o = {};return e ? (_g.forEach(e.split(\"\\n\"), function (e) {if (r = e.indexOf(\":\"), t = _g.trim(e.substr(0, r)).toLowerCase(), n = _g.trim(e.substr(r + 1)), t) {if (o[t] && Qg.indexOf(t) >= 0) return;o[t] = \"set-cookie\" === t ? (o[t] ? o[t] : []).concat([n]) : o[t] ? o[t] + \", \" + n : n;}}), o) : o;}(i.getAllResponseHeaders()) : null,o = { data: e.responseType && \"text\" !== e.responseType ? i.response : i.responseText, status: i.status, statusText: i.statusText, headers: r, config: e, request: i };!function (e, t, n) {var r = n.config.validateStatus;!r || r(n.status) ? e(n) : t(Jg(\"Request failed with status code \" + n.status, n.config, null, n.request, n));}(t, n, o), i = null;}}, i.onabort = function () {i && (n(Jg(\"Request aborted\", e, \"ECONNABORTED\", i)), i = null);}, i.onerror = function () {n(Jg(\"Network Error\", e, null, i)), i = null;}, i.ontimeout = function () {var t = \"timeout of \" + e.timeout + \"ms exceeded\";e.timeoutErrorMessage && (t = e.timeoutErrorMessage), n(Jg(t, e, \"ECONNABORTED\", i)), i = null;}, _g.isStandardBrowserEnv()) {var p = em,f = (e.withCredentials || Zg(l)) && e.xsrfCookieName ? p.read(e.xsrfCookieName) : void 0;f && (o[e.xsrfHeaderName] = f);}if (\"setRequestHeader\" in i && _g.forEach(o, function (e, t) {void 0 === r && \"content-type\" === t.toLowerCase() ? delete o[t] : i.setRequestHeader(t, e);}), _g.isUndefined(e.withCredentials) || (i.withCredentials = !!e.withCredentials), e.responseType) try {i.responseType = e.responseType;} catch (h) {if (\"json\" !== e.responseType) throw h;}\"function\" == typeof e.onDownloadProgress && i.addEventListener(\"progress\", e.onDownloadProgress), \"function\" == typeof e.onUploadProgress && i.upload && i.upload.addEventListener(\"progress\", e.onUploadProgress), e.cancelToken && e.cancelToken.promise.then(function (e) {i && (i.abort(), n(e), i = null);}), void 0 === r && (r = null), i.send(r);});},nm = { \"Content-Type\": \"application/x-www-form-urlencoded\" };function rm(e, t) {!_g.isUndefined(e) && _g.isUndefined(e[\"Content-Type\"]) && (e[\"Content-Type\"] = t);}var om,im = { adapter: ((\"undefined\" != typeof XMLHttpRequest || void 0 !== zg && \"[object process]\" === Object.prototype.toString.call(zg)) && (om = tm), om), transformRequest: [function (e, t) {return Xg(t, \"Accept\"), Xg(t, \"Content-Type\"), _g.isFormData(e) || _g.isArrayBuffer(e) || _g.isBuffer(e) || _g.isStream(e) || _g.isFile(e) || _g.isBlob(e) ? e : _g.isArrayBufferView(e) ? e.buffer : _g.isURLSearchParams(e) ? (rm(t, \"application/x-www-form-urlencoded;charset=utf-8\"), e.toString()) : _g.isObject(e) ? (rm(t, \"application/json;charset=utf-8\"), JSON.stringify(e)) : e;}], transformResponse: [function (e) {if (\"string\" == typeof e) try {e = JSON.parse(e);} catch (t) {}return e;}], timeout: 0, xsrfCookieName: \"XSRF-TOKEN\", xsrfHeaderName: \"X-XSRF-TOKEN\", maxContentLength: -1, validateStatus: function validateStatus(e) {return e >= 200 && e < 300;} };im.headers = { common: { Accept: \"application/json, text/plain, */*\" } }, _g.forEach([\"delete\", \"get\", \"head\"], function (e) {im.headers[e] = {};}), _g.forEach([\"post\", \"put\", \"patch\"], function (e) {im.headers[e] = _g.merge(nm);});var sm = im;function am(e) {e.cancelToken && e.cancelToken.throwIfRequested();}var um = function um(e) {return am(e), e.headers = e.headers || {}, e.data = Sg(e.data, e.headers, e.transformRequest), e.headers = _g.merge(e.headers.common || {}, e.headers[e.method] || {}, e.headers), _g.forEach([\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\", \"common\"], function (t) {delete e.headers[t];}), (e.adapter || sm.adapter)(e).then(function (t) {return am(e), t.data = Sg(t.data, t.headers, e.transformResponse), t;}, function (t) {return Tg(t) || (am(e), t && t.response && (t.response.data = Sg(t.response.data, t.response.headers, e.transformResponse))), Promise.reject(t);});},cm = function cm(e, t) {t = t || {};var n = {},r = [\"url\", \"method\", \"params\", \"data\"],o = [\"headers\", \"auth\", \"proxy\"],i = [\"baseURL\", \"url\", \"transformRequest\", \"transformResponse\", \"paramsSerializer\", \"timeout\", \"withCredentials\", \"adapter\", \"responseType\", \"xsrfCookieName\", \"xsrfHeaderName\", \"onUploadProgress\", \"onDownloadProgress\", \"maxContentLength\", \"validateStatus\", \"maxRedirects\", \"httpAgent\", \"httpsAgent\", \"cancelToken\", \"socketPath\"];_g.forEach(r, function (e) {void 0 !== t[e] && (n[e] = t[e]);}), _g.forEach(o, function (r) {_g.isObject(t[r]) ? n[r] = _g.deepMerge(e[r], t[r]) : void 0 !== t[r] ? n[r] = t[r] : _g.isObject(e[r]) ? n[r] = _g.deepMerge(e[r]) : void 0 !== e[r] && (n[r] = e[r]);}), _g.forEach(i, function (r) {void 0 !== t[r] ? n[r] = t[r] : void 0 !== e[r] && (n[r] = e[r]);});var s = r.concat(o).concat(i),a = Object.keys(t).filter(function (e) {return -1 === s.indexOf(e);});return _g.forEach(a, function (r) {void 0 !== t[r] ? n[r] = t[r] : void 0 !== e[r] && (n[r] = e[r]);}), n;};function lm(e) {this.defaults = e, this.interceptors = { request: new Mg(), response: new Mg() };}lm.prototype.request = function (e) {\"string\" == typeof e ? (e = arguments[1] || {}).url = arguments[0] : e = e || {}, (e = cm(this.defaults, e)).method ? e.method = e.method.toLowerCase() : this.defaults.method ? e.method = this.defaults.method.toLowerCase() : e.method = \"get\";var t = [um, void 0],n = Promise.resolve(e);for (this.interceptors.request.forEach(function (e) {t.unshift(e.fulfilled, e.rejected);}), this.interceptors.response.forEach(function (e) {t.push(e.fulfilled, e.rejected);}); t.length;) {n = n.then(t.shift(), t.shift());}return n;}, lm.prototype.getUri = function (e) {return e = cm(this.defaults, e), Eg(e.url, e.params, e.paramsSerializer).replace(/^\\?/, \"\");}, _g.forEach([\"delete\", \"get\", \"head\", \"options\"], function (e) {lm.prototype[e] = function (t, n) {return this.request(_g.merge(n || {}, { method: e, url: t }));};}), _g.forEach([\"post\", \"put\", \"patch\"], function (e) {lm.prototype[e] = function (t, n, r) {return this.request(_g.merge(r || {}, { method: e, url: t, data: n }));};});var pm = lm;function fm(e) {this.message = e;}fm.prototype.toString = function () {return \"Cancel\" + (this.message ? \": \" + this.message : \"\");}, fm.prototype.__CANCEL__ = !0;var hm = fm;function dm(e) {if (\"function\" != typeof e) throw new TypeError(\"executor must be a function.\");var t;this.promise = new Promise(function (e) {t = e;});var n = this;e(function (e) {n.reason || (n.reason = new hm(e), t(n.reason));});}dm.prototype.throwIfRequested = function () {if (this.reason) throw this.reason;}, dm.source = function () {var e;return { token: new dm(function (t) {e = t;}), cancel: e };};var gm = dm;function mm(e) {var t = new pm(e),n = fg(pm.prototype.request, t);return _g.extend(n, pm.prototype, t), _g.extend(n, t), n;}var vm = mm(sm);vm.Axios = pm, vm.create = function (e) {return mm(cm(vm.defaults, e));}, vm.Cancel = hm, vm.CancelToken = gm, vm.isCancel = Tg, vm.all = function (e) {return Promise.all(e);}, vm.spread = function (e) {return function (t) {return e.apply(null, t);};};var ym = vm,_m = vm;ym.default = _m;var Im = ym,Em = Im.create({ timeout: 3e4, headers: { \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\" } });Em.interceptors.response.use(function (e) {var t = e.data,n = t.error_code,r = t.ErrorCode;return fa(n) && (r = n), r !== Pu.SUCCESS && (e.data.ErrorCode = Number(r)), e;}, function (e) {return \"Network Error\" === e.message && (!0 === Em.defaults.withCredentials && la.warn(\"Network Error, try to close `IMAxios.defaults.withCredentials` to false. (IMAxios.js)\"), Em.defaults.withCredentials = !1), Promise.reject(e);});var Cm = function () {function e() {An(this, e);}return Rn(e, [{ key: \"request\", value: function value(e) {__f__(\"warn\", \"请注意： ConnectionBase.request() 方法必须被派生类重写:\", \" at tim-js-sdk/tim-js.js:1\"), __f__(\"log\", \"参数如下：\\n    * @param {String} options.url string 是 开发者服务器接口地址\\n    * @param {*} options.data - string/object/ArrayBuffer 否 请求的参数\\n    * @param {Object} options.header - Object 否 设置请求的 header，\\n    * @param {String} options.method - string GET 否 HTTP 请求方法\\n    * @param {String} options.dataType - string json 否 返回的数据格式\\n    * @param {String} options.responseType - string text 否 响应的数据类型\\n    * @param {Boolean} isRetry - string text false 是否为重试的请求\\n   \", \" at tim-js-sdk/tim-js.js:1\");} }, { key: \"_checkOptions\", value: function value(e) {if (!1 == !!e.url) throw new Mp({ code: Sp.NETWORK_BASE_OPTIONS_NO_URL, message: Ef });} }, { key: \"_initOptions\", value: function value(e) {e.method = [\"POST\", \"GET\", \"PUT\", \"DELETE\", \"OPTION\"].indexOf(e.method) >= 0 ? e.method : \"POST\", e.dataType = e.dataType || \"json\", e.responseType = e.responseType || \"json\";} }]), e;}(),Mm = function (e) {Ln(n, e);var t = Vn(n);function n() {var e;return An(this, n), (e = t.call(this)).retry = 2, e;}return Rn(n, [{ key: \"request\", value: function value(e) {return this._checkOptions(e), this._initOptions(e), this._requestWithRetry({ url: e.url, data: e.data, method: e.method });} }, { key: \"_requestWithRetry\", value: function value(e) {var t = this,n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;return Em(e).catch(function (r) {return t.retry && n < t.retry ? t._requestWithRetry(e, ++n) : id(new Mp({ code: r.code || \"\", message: r.message || \"\" }));});} }]), n;}(Cm),Sm = [],Tm = [],Dm = \"undefined\" != typeof Uint8Array ? Uint8Array : Array,Am = !1;function km() {Am = !0;for (var e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", t = 0, n = e.length; t < n; ++t) {Sm[t] = e[t], Tm[e.charCodeAt(t)] = t;}Tm[\"-\".charCodeAt(0)] = 62, Tm[\"_\".charCodeAt(0)] = 63;}function Rm(e, t, n) {for (var r, o, i = [], s = t; s < n; s += 3) {r = (e[s] << 16) + (e[s + 1] << 8) + e[s + 2], i.push(Sm[(o = r) >> 18 & 63] + Sm[o >> 12 & 63] + Sm[o >> 6 & 63] + Sm[63 & o]);}return i.join(\"\");}function Om(e) {var t;Am || km();for (var n = e.length, r = n % 3, o = \"\", i = [], s = 0, a = n - r; s < a; s += 16383) {i.push(Rm(e, s, s + 16383 > a ? a : s + 16383));}return 1 === r ? (t = e[n - 1], o += Sm[t >> 2], o += Sm[t << 4 & 63], o += \"==\") : 2 === r && (t = (e[n - 2] << 8) + e[n - 1], o += Sm[t >> 10], o += Sm[t >> 4 & 63], o += Sm[t << 2 & 63], o += \"=\"), i.push(o), i.join(\"\");}function wm(e, t, n, r, o) {var i,s,a = 8 * o - r - 1,u = (1 << a) - 1,c = u >> 1,l = -7,p = n ? o - 1 : 0,f = n ? -1 : 1,h = e[t + p];for (p += f, i = h & (1 << -l) - 1, h >>= -l, l += a; l > 0; i = 256 * i + e[t + p], p += f, l -= 8) {;}for (s = i & (1 << -l) - 1, i >>= -l, l += r; l > 0; s = 256 * s + e[t + p], p += f, l -= 8) {;}if (0 === i) i = 1 - c;else {if (i === u) return s ? NaN : Infinity * (h ? -1 : 1);s += Math.pow(2, r), i -= c;}return (h ? -1 : 1) * s * Math.pow(2, i - r);}function Nm(e, t, n, r, o, i) {var s,a,u,c = 8 * i - o - 1,l = (1 << c) - 1,p = l >> 1,f = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,h = r ? 0 : i - 1,d = r ? 1 : -1,g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;for (t = Math.abs(t), isNaN(t) || Infinity === t ? (a = isNaN(t) ? 1 : 0, s = l) : (s = Math.floor(Math.log(t) / Math.LN2), t * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (t += s + p >= 1 ? f / u : f * Math.pow(2, 1 - p)) * u >= 2 && (s++, u /= 2), s + p >= l ? (a = 0, s = l) : s + p >= 1 ? (a = (t * u - 1) * Math.pow(2, o), s += p) : (a = t * Math.pow(2, p - 1) * Math.pow(2, o), s = 0)); o >= 8; e[n + h] = 255 & a, h += d, a /= 256, o -= 8) {;}for (s = s << o | a, c += o; c > 0; e[n + h] = 255 & s, h += d, s /= 256, c -= 8) {;}e[n + h - d] |= 128 * g;}var Lm = {}.toString,bm = Array.isArray || function (e) {return \"[object Array]\" == Lm.call(e);};function Pm() {return Um.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;}function Gm(e, t) {if (Pm() < t) throw new RangeError(\"Invalid typed array length\");return Um.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = Um.prototype : (null === e && (e = new Um(t)), e.length = t), e;}function Um(e, t, n) {if (!(Um.TYPED_ARRAY_SUPPORT || this instanceof Um)) return new Um(e, t, n);if (\"number\" == typeof e) {if (\"string\" == typeof t) throw new Error(\"If encoding is specified then the first argument must be a string\");return Fm(this, e);}return xm(this, e, t, n);}function xm(e, t, n, r) {if (\"number\" == typeof t) throw new TypeError('\"value\" argument must not be a number');return \"undefined\" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function (e, t, n, r) {if (t.byteLength, n < 0 || t.byteLength < n) throw new RangeError(\"'offset' is out of bounds\");if (t.byteLength < n + (r || 0)) throw new RangeError(\"'length' is out of bounds\");t = void 0 === n && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t, n) : new Uint8Array(t, n, r);Um.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = Um.prototype : e = Vm(e, t);return e;}(e, t, n, r) : \"string\" == typeof t ? function (e, t, n) {\"string\" == typeof n && \"\" !== n || (n = \"utf8\");if (!Um.isEncoding(n)) throw new TypeError('\"encoding\" must be a valid string encoding');var r = 0 | Km(t, n),o = (e = Gm(e, r)).write(t, n);o !== r && (e = e.slice(0, o));return e;}(e, t, n) : function (e, t) {if (jm(t)) {var n = 0 | Bm(t.length);return 0 === (e = Gm(e, n)).length || t.copy(e, 0, 0, n), e;}if (t) {if (\"undefined\" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || \"length\" in t) return \"number\" != typeof t.length || (r = t.length) != r ? Gm(e, 0) : Vm(e, t);if (\"Buffer\" === t.type && bm(t.data)) return Vm(e, t.data);}var r;throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\");}(e, t);}function qm(e) {if (\"number\" != typeof e) throw new TypeError('\"size\" argument must be a number');if (e < 0) throw new RangeError('\"size\" argument must not be negative');}function Fm(e, t) {if (qm(t), e = Gm(e, t < 0 ? 0 : 0 | Bm(t)), !Um.TYPED_ARRAY_SUPPORT) for (var n = 0; n < t; ++n) {e[n] = 0;}return e;}function Vm(e, t) {var n = t.length < 0 ? 0 : 0 | Bm(t.length);e = Gm(e, n);for (var r = 0; r < n; r += 1) {e[r] = 255 & t[r];}return e;}function Bm(e) {if (e >= Pm()) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + Pm().toString(16) + \" bytes\");return 0 | e;}function jm(e) {return !(null == e || !e._isBuffer);}function Km(e, t) {if (jm(e)) return e.length;if (\"undefined\" != typeof ArrayBuffer && \"function\" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;\"string\" != typeof e && (e = \"\" + e);var n = e.length;if (0 === n) return 0;for (var r = !1;;) {switch (t) {case \"ascii\":case \"latin1\":case \"binary\":return n;case \"utf8\":case \"utf-8\":case void 0:return mv(e).length;case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return 2 * n;case \"hex\":return n >>> 1;case \"base64\":return vv(e).length;default:if (r) return mv(e).length;t = (\"\" + t).toLowerCase(), r = !0;}}}function Hm(e, t, n) {var r = !1;if ((void 0 === t || t < 0) && (t = 0), t > this.length) return \"\";if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return \"\";if ((n >>>= 0) <= (t >>>= 0)) return \"\";for (e || (e = \"utf8\");;) {switch (e) {case \"hex\":return iv(this, t, n);case \"utf8\":case \"utf-8\":return nv(this, t, n);case \"ascii\":return rv(this, t, n);case \"latin1\":case \"binary\":return ov(this, t, n);case \"base64\":return tv(this, t, n);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return sv(this, t, n);default:if (r) throw new TypeError(\"Unknown encoding: \" + e);e = (e + \"\").toLowerCase(), r = !0;}}}function Ym(e, t, n) {var r = e[t];e[t] = e[n], e[n] = r;}function $m(e, t, n, r, o) {if (0 === e.length) return -1;if (\"string\" == typeof n ? (r = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = o ? 0 : e.length - 1), n < 0 && (n = e.length + n), n >= e.length) {if (o) return -1;n = e.length - 1;} else if (n < 0) {if (!o) return -1;n = 0;}if (\"string\" == typeof t && (t = Um.from(t, r)), jm(t)) return 0 === t.length ? -1 : Wm(e, t, n, r, o);if (\"number\" == typeof t) return t &= 255, Um.TYPED_ARRAY_SUPPORT && \"function\" == typeof Uint8Array.prototype.indexOf ? o ? Uint8Array.prototype.indexOf.call(e, t, n) : Uint8Array.prototype.lastIndexOf.call(e, t, n) : Wm(e, [t], n, r, o);throw new TypeError(\"val must be string, number or Buffer\");}function Wm(e, t, n, r, o) {var i,s = 1,a = e.length,u = t.length;if (void 0 !== r && (\"ucs2\" === (r = String(r).toLowerCase()) || \"ucs-2\" === r || \"utf16le\" === r || \"utf-16le\" === r)) {if (e.length < 2 || t.length < 2) return -1;s = 2, a /= 2, u /= 2, n /= 2;}function c(e, t) {return 1 === s ? e[t] : e.readUInt16BE(t * s);}if (o) {var l = -1;for (i = n; i < a; i++) {if (c(e, i) === c(t, -1 === l ? 0 : i - l)) {if (-1 === l && (l = i), i - l + 1 === u) return l * s;} else -1 !== l && (i -= i - l), l = -1;}} else for (n + u > a && (n = a - u), i = n; i >= 0; i--) {for (var p = !0, f = 0; f < u; f++) {if (c(e, i + f) !== c(t, f)) {p = !1;break;}}if (p) return i;}return -1;}function zm(e, t, n, r) {n = Number(n) || 0;var o = e.length - n;r ? (r = Number(r)) > o && (r = o) : r = o;var i = t.length;if (i % 2 != 0) throw new TypeError(\"Invalid hex string\");r > i / 2 && (r = i / 2);for (var s = 0; s < r; ++s) {var a = parseInt(t.substr(2 * s, 2), 16);if (isNaN(a)) return s;e[n + s] = a;}return s;}function Xm(e, t, n, r) {return yv(mv(t, e.length - n), e, n, r);}function Jm(e, t, n, r) {return yv(function (e) {for (var t = [], n = 0; n < e.length; ++n) {t.push(255 & e.charCodeAt(n));}return t;}(t), e, n, r);}function Qm(e, t, n, r) {return Jm(e, t, n, r);}function Zm(e, t, n, r) {return yv(vv(t), e, n, r);}function ev(e, t, n, r) {return yv(function (e, t) {for (var n, r, o, i = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) {n = e.charCodeAt(s), r = n >> 8, o = n % 256, i.push(o), i.push(r);}return i;}(t, e.length - n), e, n, r);}function tv(e, t, n) {return 0 === t && n === e.length ? Om(e) : Om(e.slice(t, n));}function nv(e, t, n) {n = Math.min(e.length, n);for (var r = [], o = t; o < n;) {var i,s,a,u,c = e[o],l = null,p = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;if (o + p <= n) switch (p) {case 1:c < 128 && (l = c);break;case 2:128 == (192 & (i = e[o + 1])) && (u = (31 & c) << 6 | 63 & i) > 127 && (l = u);break;case 3:i = e[o + 1], s = e[o + 2], 128 == (192 & i) && 128 == (192 & s) && (u = (15 & c) << 12 | (63 & i) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (l = u);break;case 4:i = e[o + 1], s = e[o + 2], a = e[o + 3], 128 == (192 & i) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & c) << 18 | (63 & i) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (l = u);}null === l ? (l = 65533, p = 1) : l > 65535 && (l -= 65536, r.push(l >>> 10 & 1023 | 55296), l = 56320 | 1023 & l), r.push(l), o += p;}return function (e) {var t = e.length;if (t <= 4096) return String.fromCharCode.apply(String, e);var n = \"\",r = 0;for (; r < t;) {n += String.fromCharCode.apply(String, e.slice(r, r += 4096));}return n;}(r);}Um.TYPED_ARRAY_SUPPORT = void 0 === na.TYPED_ARRAY_SUPPORT || na.TYPED_ARRAY_SUPPORT, Um.poolSize = 8192, Um._augment = function (e) {return e.__proto__ = Um.prototype, e;}, Um.from = function (e, t, n) {return xm(null, e, t, n);}, Um.TYPED_ARRAY_SUPPORT && (Um.prototype.__proto__ = Uint8Array.prototype, Um.__proto__ = Uint8Array), Um.alloc = function (e, t, n) {return function (e, t, n, r) {return qm(t), t <= 0 ? Gm(e, t) : void 0 !== n ? \"string\" == typeof r ? Gm(e, t).fill(n, r) : Gm(e, t).fill(n) : Gm(e, t);}(null, e, t, n);}, Um.allocUnsafe = function (e) {return Fm(null, e);}, Um.allocUnsafeSlow = function (e) {return Fm(null, e);}, Um.isBuffer = function (e) {return null != e && (!!e._isBuffer || _v(e) || function (e) {return \"function\" == typeof e.readFloatLE && \"function\" == typeof e.slice && _v(e.slice(0, 0));}(e));}, Um.compare = function (e, t) {if (!jm(e) || !jm(t)) throw new TypeError(\"Arguments must be Buffers\");if (e === t) return 0;for (var n = e.length, r = t.length, o = 0, i = Math.min(n, r); o < i; ++o) {if (e[o] !== t[o]) {n = e[o], r = t[o];break;}}return n < r ? -1 : r < n ? 1 : 0;}, Um.isEncoding = function (e) {switch (String(e).toLowerCase()) {case \"hex\":case \"utf8\":case \"utf-8\":case \"ascii\":case \"latin1\":case \"binary\":case \"base64\":case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return !0;default:return !1;}}, Um.concat = function (e, t) {if (!bm(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');if (0 === e.length) return Um.alloc(0);var n;if (void 0 === t) for (t = 0, n = 0; n < e.length; ++n) {t += e[n].length;}var r = Um.allocUnsafe(t),o = 0;for (n = 0; n < e.length; ++n) {var i = e[n];if (!jm(i)) throw new TypeError('\"list\" argument must be an Array of Buffers');i.copy(r, o), o += i.length;}return r;}, Um.byteLength = Km, Um.prototype._isBuffer = !0, Um.prototype.swap16 = function () {var e = this.length;if (e % 2 != 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for (var t = 0; t < e; t += 2) {Ym(this, t, t + 1);}return this;}, Um.prototype.swap32 = function () {var e = this.length;if (e % 4 != 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for (var t = 0; t < e; t += 4) {Ym(this, t, t + 3), Ym(this, t + 1, t + 2);}return this;}, Um.prototype.swap64 = function () {var e = this.length;if (e % 8 != 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for (var t = 0; t < e; t += 8) {Ym(this, t, t + 7), Ym(this, t + 1, t + 6), Ym(this, t + 2, t + 5), Ym(this, t + 3, t + 4);}return this;}, Um.prototype.toString = function () {var e = 0 | this.length;return 0 === e ? \"\" : 0 === arguments.length ? nv(this, 0, e) : Hm.apply(this, arguments);}, Um.prototype.equals = function (e) {if (!jm(e)) throw new TypeError(\"Argument must be a Buffer\");return this === e || 0 === Um.compare(this, e);}, Um.prototype.inspect = function () {var e = \"\";return this.length > 0 && (e = this.toString(\"hex\", 0, 50).match(/.{2}/g).join(\" \"), this.length > 50 && (e += \" ... \")), \"<Buffer \" + e + \">\";}, Um.prototype.compare = function (e, t, n, r, o) {if (!jm(e)) throw new TypeError(\"Argument must be a Buffer\");if (void 0 === t && (t = 0), void 0 === n && (n = e ? e.length : 0), void 0 === r && (r = 0), void 0 === o && (o = this.length), t < 0 || n > e.length || r < 0 || o > this.length) throw new RangeError(\"out of range index\");if (r >= o && t >= n) return 0;if (r >= o) return -1;if (t >= n) return 1;if (this === e) return 0;for (var i = (o >>>= 0) - (r >>>= 0), s = (n >>>= 0) - (t >>>= 0), a = Math.min(i, s), u = this.slice(r, o), c = e.slice(t, n), l = 0; l < a; ++l) {if (u[l] !== c[l]) {i = u[l], s = c[l];break;}}return i < s ? -1 : s < i ? 1 : 0;}, Um.prototype.includes = function (e, t, n) {return -1 !== this.indexOf(e, t, n);}, Um.prototype.indexOf = function (e, t, n) {return $m(this, e, t, n, !0);}, Um.prototype.lastIndexOf = function (e, t, n) {return $m(this, e, t, n, !1);}, Um.prototype.write = function (e, t, n, r) {if (void 0 === t) r = \"utf8\", n = this.length, t = 0;else if (void 0 === n && \"string\" == typeof t) r = t, n = this.length, t = 0;else {if (!isFinite(t)) throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");t |= 0, isFinite(n) ? (n |= 0, void 0 === r && (r = \"utf8\")) : (r = n, n = void 0);}var o = this.length - t;if ((void 0 === n || n > o) && (n = o), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");r || (r = \"utf8\");for (var i = !1;;) {switch (r) {case \"hex\":return zm(this, e, t, n);case \"utf8\":case \"utf-8\":return Xm(this, e, t, n);case \"ascii\":return Jm(this, e, t, n);case \"latin1\":case \"binary\":return Qm(this, e, t, n);case \"base64\":return Zm(this, e, t, n);case \"ucs2\":case \"ucs-2\":case \"utf16le\":case \"utf-16le\":return ev(this, e, t, n);default:if (i) throw new TypeError(\"Unknown encoding: \" + r);r = (\"\" + r).toLowerCase(), i = !0;}}}, Um.prototype.toJSON = function () {return { type: \"Buffer\", data: Array.prototype.slice.call(this._arr || this, 0) };};function rv(e, t, n) {var r = \"\";n = Math.min(e.length, n);for (var o = t; o < n; ++o) {r += String.fromCharCode(127 & e[o]);}return r;}function ov(e, t, n) {var r = \"\";n = Math.min(e.length, n);for (var o = t; o < n; ++o) {r += String.fromCharCode(e[o]);}return r;}function iv(e, t, n) {var r = e.length;(!t || t < 0) && (t = 0), (!n || n < 0 || n > r) && (n = r);for (var o = \"\", i = t; i < n; ++i) {o += gv(e[i]);}return o;}function sv(e, t, n) {for (var r = e.slice(t, n), o = \"\", i = 0; i < r.length; i += 2) {o += String.fromCharCode(r[i] + 256 * r[i + 1]);}return o;}function av(e, t, n) {if (e % 1 != 0 || e < 0) throw new RangeError(\"offset is not uint\");if (e + t > n) throw new RangeError(\"Trying to access beyond buffer length\");}function uv(e, t, n, r, o, i) {if (!jm(e)) throw new TypeError('\"buffer\" argument must be a Buffer instance');if (t > o || t < i) throw new RangeError('\"value\" argument is out of bounds');if (n + r > e.length) throw new RangeError(\"Index out of range\");}function cv(e, t, n, r) {t < 0 && (t = 65535 + t + 1);for (var o = 0, i = Math.min(e.length - n, 2); o < i; ++o) {e[n + o] = (t & 255 << 8 * (r ? o : 1 - o)) >>> 8 * (r ? o : 1 - o);}}function lv(e, t, n, r) {t < 0 && (t = 4294967295 + t + 1);for (var o = 0, i = Math.min(e.length - n, 4); o < i; ++o) {e[n + o] = t >>> 8 * (r ? o : 3 - o) & 255;}}function pv(e, t, n, r, o, i) {if (n + r > e.length) throw new RangeError(\"Index out of range\");if (n < 0) throw new RangeError(\"Index out of range\");}function fv(e, t, n, r, o) {return o || pv(e, 0, n, 4), Nm(e, t, n, r, 23, 4), n + 4;}function hv(e, t, n, r, o) {return o || pv(e, 0, n, 8), Nm(e, t, n, r, 52, 8), n + 8;}Um.prototype.slice = function (e, t) {var n,r = this.length;if ((e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e), Um.TYPED_ARRAY_SUPPORT) (n = this.subarray(e, t)).__proto__ = Um.prototype;else {var o = t - e;n = new Um(o, void 0);for (var i = 0; i < o; ++i) {n[i] = this[i + e];}}return n;}, Um.prototype.readUIntLE = function (e, t, n) {e |= 0, t |= 0, n || av(e, t, this.length);for (var r = this[e], o = 1, i = 0; ++i < t && (o *= 256);) {r += this[e + i] * o;}return r;}, Um.prototype.readUIntBE = function (e, t, n) {e |= 0, t |= 0, n || av(e, t, this.length);for (var r = this[e + --t], o = 1; t > 0 && (o *= 256);) {r += this[e + --t] * o;}return r;}, Um.prototype.readUInt8 = function (e, t) {return t || av(e, 1, this.length), this[e];}, Um.prototype.readUInt16LE = function (e, t) {return t || av(e, 2, this.length), this[e] | this[e + 1] << 8;}, Um.prototype.readUInt16BE = function (e, t) {return t || av(e, 2, this.length), this[e] << 8 | this[e + 1];}, Um.prototype.readUInt32LE = function (e, t) {return t || av(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];}, Um.prototype.readUInt32BE = function (e, t) {return t || av(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);}, Um.prototype.readIntLE = function (e, t, n) {e |= 0, t |= 0, n || av(e, t, this.length);for (var r = this[e], o = 1, i = 0; ++i < t && (o *= 256);) {r += this[e + i] * o;}return r >= (o *= 128) && (r -= Math.pow(2, 8 * t)), r;}, Um.prototype.readIntBE = function (e, t, n) {e |= 0, t |= 0, n || av(e, t, this.length);for (var r = t, o = 1, i = this[e + --r]; r > 0 && (o *= 256);) {i += this[e + --r] * o;}return i >= (o *= 128) && (i -= Math.pow(2, 8 * t)), i;}, Um.prototype.readInt8 = function (e, t) {return t || av(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];}, Um.prototype.readInt16LE = function (e, t) {t || av(e, 2, this.length);var n = this[e] | this[e + 1] << 8;return 32768 & n ? 4294901760 | n : n;}, Um.prototype.readInt16BE = function (e, t) {t || av(e, 2, this.length);var n = this[e + 1] | this[e] << 8;return 32768 & n ? 4294901760 | n : n;}, Um.prototype.readInt32LE = function (e, t) {return t || av(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;}, Um.prototype.readInt32BE = function (e, t) {return t || av(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];}, Um.prototype.readFloatLE = function (e, t) {return t || av(e, 4, this.length), wm(this, e, !0, 23, 4);}, Um.prototype.readFloatBE = function (e, t) {return t || av(e, 4, this.length), wm(this, e, !1, 23, 4);}, Um.prototype.readDoubleLE = function (e, t) {return t || av(e, 8, this.length), wm(this, e, !0, 52, 8);}, Um.prototype.readDoubleBE = function (e, t) {return t || av(e, 8, this.length), wm(this, e, !1, 52, 8);}, Um.prototype.writeUIntLE = function (e, t, n, r) {(e = +e, t |= 0, n |= 0, r) || uv(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);var o = 1,i = 0;for (this[t] = 255 & e; ++i < n && (o *= 256);) {this[t + i] = e / o & 255;}return t + n;}, Um.prototype.writeUIntBE = function (e, t, n, r) {(e = +e, t |= 0, n |= 0, r) || uv(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);var o = n - 1,i = 1;for (this[t + o] = 255 & e; --o >= 0 && (i *= 256);) {this[t + o] = e / i & 255;}return t + n;}, Um.prototype.writeUInt8 = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 1, 255, 0), Um.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1;}, Um.prototype.writeUInt16LE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 2, 65535, 0), Um.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : cv(this, e, t, !0), t + 2;}, Um.prototype.writeUInt16BE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 2, 65535, 0), Um.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : cv(this, e, t, !1), t + 2;}, Um.prototype.writeUInt32LE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 4, 4294967295, 0), Um.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : lv(this, e, t, !0), t + 4;}, Um.prototype.writeUInt32BE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 4, 4294967295, 0), Um.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : lv(this, e, t, !1), t + 4;}, Um.prototype.writeIntLE = function (e, t, n, r) {if (e = +e, t |= 0, !r) {var o = Math.pow(2, 8 * n - 1);uv(this, e, t, n, o - 1, -o);}var i = 0,s = 1,a = 0;for (this[t] = 255 & e; ++i < n && (s *= 256);) {e < 0 && 0 === a && 0 !== this[t + i - 1] && (a = 1), this[t + i] = (e / s >> 0) - a & 255;}return t + n;}, Um.prototype.writeIntBE = function (e, t, n, r) {if (e = +e, t |= 0, !r) {var o = Math.pow(2, 8 * n - 1);uv(this, e, t, n, o - 1, -o);}var i = n - 1,s = 1,a = 0;for (this[t + i] = 255 & e; --i >= 0 && (s *= 256);) {e < 0 && 0 === a && 0 !== this[t + i + 1] && (a = 1), this[t + i] = (e / s >> 0) - a & 255;}return t + n;}, Um.prototype.writeInt8 = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 1, 127, -128), Um.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;}, Um.prototype.writeInt16LE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 2, 32767, -32768), Um.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : cv(this, e, t, !0), t + 2;}, Um.prototype.writeInt16BE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 2, 32767, -32768), Um.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : cv(this, e, t, !1), t + 2;}, Um.prototype.writeInt32LE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 4, 2147483647, -2147483648), Um.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : lv(this, e, t, !0), t + 4;}, Um.prototype.writeInt32BE = function (e, t, n) {return e = +e, t |= 0, n || uv(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), Um.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : lv(this, e, t, !1), t + 4;}, Um.prototype.writeFloatLE = function (e, t, n) {return fv(this, e, t, !0, n);}, Um.prototype.writeFloatBE = function (e, t, n) {return fv(this, e, t, !1, n);}, Um.prototype.writeDoubleLE = function (e, t, n) {return hv(this, e, t, !0, n);}, Um.prototype.writeDoubleBE = function (e, t, n) {return hv(this, e, t, !1, n);}, Um.prototype.copy = function (e, t, n, r) {if (n || (n = 0), r || 0 === r || (r = this.length), t >= e.length && (t = e.length), t || (t = 0), r > 0 && r < n && (r = n), r === n) return 0;if (0 === e.length || 0 === this.length) return 0;if (t < 0) throw new RangeError(\"targetStart out of bounds\");if (n < 0 || n >= this.length) throw new RangeError(\"sourceStart out of bounds\");if (r < 0) throw new RangeError(\"sourceEnd out of bounds\");r > this.length && (r = this.length), e.length - t < r - n && (r = e.length - t + n);var o,i = r - n;if (this === e && n < t && t < r) for (o = i - 1; o >= 0; --o) {e[o + t] = this[o + n];} else if (i < 1e3 || !Um.TYPED_ARRAY_SUPPORT) for (o = 0; o < i; ++o) {e[o + t] = this[o + n];} else Uint8Array.prototype.set.call(e, this.subarray(n, n + i), t);return i;}, Um.prototype.fill = function (e, t, n, r) {if (\"string\" == typeof e) {if (\"string\" == typeof t ? (r = t, t = 0, n = this.length) : \"string\" == typeof n && (r = n, n = this.length), 1 === e.length) {var o = e.charCodeAt(0);o < 256 && (e = o);}if (void 0 !== r && \"string\" != typeof r) throw new TypeError(\"encoding must be a string\");if (\"string\" == typeof r && !Um.isEncoding(r)) throw new TypeError(\"Unknown encoding: \" + r);} else \"number\" == typeof e && (e &= 255);if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");if (n <= t) return this;var i;if (t >>>= 0, n = void 0 === n ? this.length : n >>> 0, e || (e = 0), \"number\" == typeof e) for (i = t; i < n; ++i) {this[i] = e;} else {var s = jm(e) ? e : mv(new Um(e, r).toString()),a = s.length;for (i = 0; i < n - t; ++i) {this[i + t] = s[i % a];}}return this;};var dv = /[^+\\/0-9A-Za-z-_]/g;function gv(e) {return e < 16 ? \"0\" + e.toString(16) : e.toString(16);}function mv(e, t) {var n;t = t || Infinity;for (var r = e.length, o = null, i = [], s = 0; s < r; ++s) {if ((n = e.charCodeAt(s)) > 55295 && n < 57344) {if (!o) {if (n > 56319) {(t -= 3) > -1 && i.push(239, 191, 189);continue;}if (s + 1 === r) {(t -= 3) > -1 && i.push(239, 191, 189);continue;}o = n;continue;}if (n < 56320) {(t -= 3) > -1 && i.push(239, 191, 189), o = n;continue;}n = 65536 + (o - 55296 << 10 | n - 56320);} else o && (t -= 3) > -1 && i.push(239, 191, 189);if (o = null, n < 128) {if ((t -= 1) < 0) break;i.push(n);} else if (n < 2048) {if ((t -= 2) < 0) break;i.push(n >> 6 | 192, 63 & n | 128);} else if (n < 65536) {if ((t -= 3) < 0) break;i.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128);} else {if (!(n < 1114112)) throw new Error(\"Invalid code point\");if ((t -= 4) < 0) break;i.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128);}}return i;}function vv(e) {return function (e) {var t, n, r, o, i, s;Am || km();var a = e.length;if (a % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");i = \"=\" === e[a - 2] ? 2 : \"=\" === e[a - 1] ? 1 : 0, s = new Dm(3 * a / 4 - i), r = i > 0 ? a - 4 : a;var u = 0;for (t = 0, n = 0; t < r; t += 4, n += 3) {o = Tm[e.charCodeAt(t)] << 18 | Tm[e.charCodeAt(t + 1)] << 12 | Tm[e.charCodeAt(t + 2)] << 6 | Tm[e.charCodeAt(t + 3)], s[u++] = o >> 16 & 255, s[u++] = o >> 8 & 255, s[u++] = 255 & o;}return 2 === i ? (o = Tm[e.charCodeAt(t)] << 2 | Tm[e.charCodeAt(t + 1)] >> 4, s[u++] = 255 & o) : 1 === i && (o = Tm[e.charCodeAt(t)] << 10 | Tm[e.charCodeAt(t + 1)] << 4 | Tm[e.charCodeAt(t + 2)] >> 2, s[u++] = o >> 8 & 255, s[u++] = 255 & o), s;}(function (e) {if ((e = function (e) {return e.trim ? e.trim() : e.replace(/^\\s+|\\s+$/g, \"\");}(e).replace(dv, \"\")).length < 2) return \"\";for (; e.length % 4 != 0;) {e += \"=\";}return e;}(e));}function yv(e, t, n, r) {for (var o = 0; o < r && !(o + n >= t.length || o >= e.length); ++o) {t[o + n] = e[o];}return o;}function _v(e) {return !!e.constructor && \"function\" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);}var Iv = function (e) {Ln(n, e);var t = Vn(n);function n() {var e;return An(this, n), (e = t.call(this)).retry = 2, e._request = e.promisify(wx.request), e;}return Rn(n, [{ key: \"request\", value: function value(e) {return this._checkOptions(e), this._initOptions(e), e = Nn({}, e, { responseType: \"text\" }), this._requestWithRetry(e);} }, { key: \"_requestWithRetry\", value: function value(e) {var t = this,n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;return this._request(e).then(this._handleResolve).catch(function (r) {if (ha(r.errMsg)) {if (r.errMsg.includes(\"abort\")) return od({});if (r.errMsg.includes(\"timeout\")) return t.retry > 0 && n < t.retry ? t._requestWithRetry(e, ++n) : id(new Mp({ code: Sp.NETWORK_TIMEOUT, message: r.errMsg }));if (r.errMsg.includes(\"fail\")) return t.retry > 0 && n < t.retry ? t._requestWithRetry(e, ++n) : id(new Mp({ code: Sp.NETWORK_ERROR, message: r.errMsg }));}return id(new Mp(Nn({ code: Sp.UNCAUGHT_ERROR, message: r.message }, r)));});} }, { key: \"_handleResolve\", value: function value(e) {var t = e.data,n = t.error_code,r = t.ErrorCode;return \"number\" == typeof n && (r = n), r !== Pu.SUCCESS && (e.data.ErrorCode = Number(\"\".concat(r))), e;} }, { key: \"promisify\", value: function value(e) {return function (t) {return new Promise(function (n, r) {var o = e(Object.assign({}, t, { success: n, fail: r }));t.updateAbort && t.updateAbort(function () {o && _a(o.abort) && o.abort();});});};} }]), n;}(Cm),Ev = function () {function e() {An(this, e), this.request = 0, this.success = 0, this.fail = 0, this.reportRate = 10, this.requestTimeCost = [];}return Rn(e, [{ key: \"report\", value: function value() {if (1 !== this.request) {if (this.request % this.reportRate != 0) return null;var e = this.avgRequestTime(),t = \"runLoop reports: success=\".concat(this.success, \",fail=\").concat(this.fail, \",total=\").concat(this.request, \",avg=\").concat(e, \",cur=\").concat(this.requestTimeCost[this.requestTimeCost.length - 1], \",max=\").concat(Math.max.apply(null, this.requestTimeCost), \",min=\").concat(Math.min.apply(null, this.requestTimeCost));la.log(t);}} }, { key: \"setRequestTime\", value: function value(e, t) {var n = Math.abs(t - e);100 === this.requestTimeCost.length && this.requestTimeCost.shift(), this.requestTimeCost.push(n);} }, { key: \"avgRequestTime\", value: function value() {for (var e, t = this.requestTimeCost.length, n = 0, r = 0; r < t; r++) {n += this.requestTimeCost[r];}return e = n / t, Math.round(100 * e) / 100;} }]), e;}(),Cv = Im.create({ timeout: 6e3, headers: { \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\" } });Cv.interceptors.response.use(function (e) {var t = e.data,n = t.error_code,r = t.ErrorCode;return fa(n) && (r = n), r !== Pu.SUCCESS && (e.data.ErrorCode = Number(r)), e;}, function (e) {return \"Network Error\" === e.message && (!0 === Cv.defaults.withCredentials && la.warn(\"Network Error, try to close `IMAxiosAVChatroom.defaults.withCredentials` to false. (IMAxiosAVChatroom.js)\"), Cv.defaults.withCredentials = !1), Promise.reject(e);});var Mv = Im.CancelToken,Sv = function () {function e(t) {An(this, e), this._initializeOptions(t), this._initializeMembers(), this.status = new Ev();}return Rn(e, [{ key: \"destructor\", value: function value() {clearTimeout(this._seedID);var e = this._index();for (var t in this) {Object.prototype.hasOwnProperty.call(this, t) && (this[t] = null);}return e;} }, { key: \"setIndex\", value: function value(e) {this._index = e;} }, { key: \"getIndex\", value: function value() {return this._index;} }, { key: \"isRunning\", value: function value() {return !this._stoped;} }, { key: \"_initializeOptions\", value: function value(e) {this.options = e;} }, { key: \"_initializeMembers\", value: function value() {this._index = -1, this._seedID = 0, this._requestStatus = !1, this._stoped = !1, this._intervalTime = 0, this._intervalIncreaseStep = 1e3, this._intervalDecreaseStep = 1e3, this._intervalTimeMax = 5e3, this._protectTimeout = 3e3, this._getNoticeSeq = this.options.getNoticeSeq, this._retryCount = 0, this._responseTime = Date.now(), this._responseTimeThreshold = 2e3, this.options.isAVChatRoomLoop ? this.requestor = Cv : this.requestor = Em, la.log(\"XHRRunLoop._initializeMembers isAVChatRoomLoop=\".concat(!!this.options.isAVChatRoomLoop)), this.abort = null;} }, { key: \"start\", value: function value() {0 === this._seedID ? (this._stoped = !1, this._send()) : la.log('XHRRunLoop.start(), XHRRunLoop is running now, if you want to restart runLoop , please run \"stop()\" first.');} }, { key: \"_reset\", value: function value() {la.log(\"XHRRunLoop._reset(), reset long poll _intervalTime\", this._intervalTime), this.stop(), this.start();} }, { key: \"_intervalTimeIncrease\", value: function value() {this._intervalTime !== this._responseTimeThreshold && (this._intervalTime < this._responseTimeThreshold && (this._intervalTime += this._intervalIncreaseStep), this._intervalTime > this._responseTimeThreshold && (this._intervalTime = this._responseTimeThreshold));} }, { key: \"_intervalTimeDecrease\", value: function value() {0 !== this._intervalTime && (this._intervalTime > 0 && (this._intervalTime -= this._intervalDecreaseStep), this._intervalTime < 0 && (this._intervalTime = 0));} }, { key: \"_intervalTimeAdjustment\", value: function value() {var e = Date.now();100 * Math.floor((e - this._responseTime) / 100) <= this._responseTimeThreshold ? this._intervalTimeIncrease() : this._intervalTimeDecrease(), this._responseTime = e;} }, { key: \"_intervalTimeAdjustmentBaseOnResponseData\", value: function value(e) {e.ErrorCode === Pu.SUCCESS ? this._intervalTimeDecrease() : this._intervalTimeIncrease();} }, { key: \"_send\", value: function value() {var e = this;if (!0 !== this._requestStatus) {this._requestStatus = !0, this.status.request++, \"function\" == typeof this.options.before && this.options.before(this.options.pack.requestData);var t = Date.now(),n = 0;this.requestor.request({ url: this.options.pack.getUrl(), data: this.options.pack.requestData, method: this.options.pack.method, cancelToken: new Mv(function (t) {e.abort = t;}) }).then(function (r) {if (e._intervalTimeAdjustmentBaseOnResponseData.bind(e)(r.data), e._retryCount > 0 && (e._retryCount = 0), e.status.success++, n = Date.now(), e.status.setRequestTime(t, n), r.data.timecost = n - t, \"function\" == typeof e.options.success) try {e.options.success({ pack: e.options.pack, error: !1, data: e.options.pack.callback(r.data) });} catch (o) {la.warn(\"XHRRunLoop._send(), error:\", o);}e._requestStatus = !1, !1 === e._stoped && (e._seedID = setTimeout(e._send.bind(e), e._intervalTime)), e.status.report();}).catch(function (r) {if (e.status.fail++, e._retryCount++, e._intervalTimeAdjustment.bind(e)(), !1 === e._stoped && (e._seedID = setTimeout(e._send.bind(e), e._intervalTime)), e._requestStatus = !1, \"function\" == typeof e.options.fail && void 0 !== r.request) try {e.options.fail({ pack: e.options.pack, error: r, data: !1 });} catch (o) {la.warn(\"XHRRunLoop._send(), fail callback error:\", o), la.error(o);}n = Date.now(), e.status.setRequestTime(t, n), e.status.report();});}} }, { key: \"stop\", value: function value() {this._clearAllTimeOut(), this._stoped = !0;} }, { key: \"_clearAllTimeOut\", value: function value() {clearTimeout(this._seedID), this._seedID = 0;} }]), e;}(),Tv = function () {function e(t) {An(this, e), this._initializeOptions(t), this._initializeMembers(), this.status = new Ev();}return Rn(e, [{ key: \"destructor\", value: function value() {clearTimeout(this._seedID);var e = this._index();for (var t in this) {Object.prototype.hasOwnProperty.call(this, t) && (this[t] = null);}return e;} }, { key: \"setIndex\", value: function value(e) {this._index = e;} }, { key: \"isRunning\", value: function value() {return !this._stoped;} }, { key: \"getIndex\", value: function value() {return this._index;} }, { key: \"_initializeOptions\", value: function value(e) {this.options = e;} }, { key: \"_initializeMembers\", value: function value() {this._index = -1, this._seedID = 0, this._requestStatus = !1, this._stoped = !1, this._intervalTime = 0, this._intervalIncreaseStep = 1e3, this._intervalDecreaseStep = 1e3, this._intervalTimeMax = 5e3, this._protectTimeout = 3e3, this._getNoticeSeq = this.options.getNoticeSeq, this._retryCount = 0, this._responseTime = Date.now(), this._responseTimeThreshold = 2e3, this.requestor = new Iv(), this.abort = null;} }, { key: \"start\", value: function value() {0 === this._seedID ? (this._stoped = !1, this._send()) : la.log('WXRunLoop.start(): WXRunLoop is running now, if you want to restart runLoop , please run \"stop()\" first.');} }, { key: \"_reset\", value: function value() {la.log(\"WXRunLoop.reset(), long poll _intervalMaxRate\", this._intervalMaxRate), this.stop(), this.start();} }, { key: \"_intervalTimeIncrease\", value: function value() {this._intervalTime !== this._responseTimeThreshold && (this._intervalTime < this._responseTimeThreshold && (this._intervalTime += this._intervalIncreaseStep), this._intervalTime > this._responseTimeThreshold && (this._intervalTime = this._responseTimeThreshold));} }, { key: \"_intervalTimeDecrease\", value: function value() {0 !== this._intervalTime && (this._intervalTime > 0 && (this._intervalTime -= this._intervalDecreaseStep), this._intervalTime < 0 && (this._intervalTime = 0));} }, { key: \"_intervalTimeAdjustment\", value: function value() {var e = Date.now();100 * Math.floor((e - this._responseTime) / 100) <= this._responseTimeThreshold ? this._intervalTimeIncrease() : this._intervalTimeDecrease(), this._responseTime = e;} }, { key: \"_intervalTimeAdjustmentBaseOnResponseData\", value: function value(e) {e.ErrorCode === Pu.SUCCESS ? this._intervalTimeDecrease() : this._intervalTimeIncrease();} }, { key: \"_send\", value: function value() {var e = this;if (!0 !== this._requestStatus) {var t = this;this._requestStatus = !0, this.status.request++, \"function\" == typeof this.options.before && this.options.before(t.options.pack.requestData);var n = Date.now(),r = 0;this.requestor.request({ url: t.options.pack.getUrl(), data: t.options.pack.requestData, method: t.options.pack.method, updateAbort: function updateAbort(t) {e.abort = t;} }).then(function (o) {if (t._intervalTimeAdjustmentBaseOnResponseData.bind(e)(o.data), t._retryCount > 0 && (t._retryCount = 0), e.status.success++, r = Date.now(), e.status.setRequestTime(n, r), o.data.timecost = r - n, \"function\" == typeof t.options.success) try {e.options.success({ pack: e.options.pack, error: !1, data: e.options.pack.callback(o.data) });} catch (i) {la.warn(\"WXRunLoop._send(), error:\", i);}t._requestStatus = !1, !1 === t._stoped && (t._seedID = setTimeout(t._send.bind(t), t._intervalTime)), e.status.report();}).catch(function (o) {if (e.status.fail++, t._retryCount++, t._intervalTimeAdjustment.bind(e)(), !1 === t._stoped && (t._seedID = setTimeout(t._send.bind(t), t._intervalTime)), t._requestStatus = !1, \"function\" == typeof t.options.fail) try {e.options.fail({ pack: e.options.pack, error: o, data: !1 });} catch (i) {la.warn(\"WXRunLoop._send(), fail callback error:\", i), la.error(i);}r = Date.now(), e.status.setRequestTime(n, r), e.status.report();});}} }, { key: \"stop\", value: function value() {this._clearAllTimeOut(), this._stoped = !0;} }, { key: \"_clearAllTimeOut\", value: function value() {clearTimeout(this._seedID), this._seedID = 0;} }]), e;}(),Dv = function () {function e(t) {An(this, e), this.tim = t, this.httpConnection = Ns ? new Iv() : new Mm(), this.keepAliveConnections = [];}return Rn(e, [{ key: \"initializeListener\", value: function value() {this.tim.innerEmitter.on(kh, this._stopAllRunLoop, this);} }, { key: \"request\", value: function value(e) {var t = { url: e.url, data: e.requestData, method: e.method, callback: e.callback };return this.httpConnection.request(t).then(function (t) {return t.data = e.callback(t.data), t.data.errorCode !== Pu.SUCCESS ? id(new Mp({ code: t.data.errorCode, message: t.data.errorInfo })) : t;});} }, { key: \"createRunLoop\", value: function value(e) {var t = this.createKeepAliveConnection(e);return t.setIndex(this.keepAliveConnections.push(t) - 1), t;} }, { key: \"stopRunLoop\", value: function value(e) {e.stop();} }, { key: \"_stopAllRunLoop\", value: function value() {for (var e = this.keepAliveConnections.length, t = 0; t < e; t++) {this.keepAliveConnections[t].stop();}} }, { key: \"destroyRunLoop\", value: function value(e) {e.stop();var t = e.destructor();this.keepAliveConnections.slice(t, 1);} }, { key: \"startRunLoopExclusive\", value: function value(e) {for (var t = e.getIndex(), n = 0; n < this.keepAliveConnections.length; n++) {n !== t && this.keepAliveConnections[n].stop();}e.start();} }, { key: \"createKeepAliveConnection\", value: function value(e) {return Ns ? new Tv(e) : (this.tim.options.runLoopNetType === np || this.tim.options.runLoopNetType, new Sv(e));} }, { key: \"clearAll\", value: function value() {this.conn.cancelAll();} }, { key: \"reset\", value: function value() {this.keepAliveConnections = [];} }]), e;}(),Av = function () {function e(t) {An(this, e), this.tim = t, this.tim.innerEmitter.on(wh, this._onErrorDetected, this);}return Rn(e, [{ key: \"_onErrorDetected\", value: function value(e) {var t = e.data,n = new ad();n.setMethod(lg).setStart(), n.setCode(0).setText(\"code=\".concat(t.code, \" message=\").concat(t.message)).setNetworkType(this.tim.netMonitor.getNetworkType()).setEnd(), t.code ? la.warn(\"Oops! code:\".concat(t.code, \" message:\").concat(t.message)) : la.warn(\"Oops! message:\".concat(t.message, \" stack:\").concat(t.stack)), this.tim.outerEmitter.emit(ln.ERROR, t);} }]), e;}(),kv = function () {function e(t) {var n = this;An(this, e), ja(t) || (this.userID = t.userID || \"\", this.nick = t.nick || \"\", this.gender = t.gender || \"\", this.birthday = t.birthday || 0, this.location = t.location || \"\", this.selfSignature = t.selfSignature || \"\", this.allowType = t.allowType || pn.ALLOW_TYPE_ALLOW_ANY, this.language = t.language || 0, this.avatar = t.avatar || \"\", this.messageSettings = t.messageSettings || 0, this.adminForbidType = t.adminForbidType || pn.FORBID_TYPE_NONE, this.level = t.level || 0, this.role = t.role || 0, this.lastUpdatedTime = 0, this.profileCustomField = [], ja(t.profileCustomField) || t.profileCustomField.forEach(function (e) {n.profileCustomField.push({ key: e.key, value: e.value });}));}return Rn(e, [{ key: \"validate\", value: function value(e) {var t = !0,n = \"\";if (ja(e)) return { valid: !1, tips: \"empty options\" };if (e.profileCustomField) for (var r = e.profileCustomField.length, o = null, i = 0; i < r; i++) {if (o = e.profileCustomField[i], !ha(o.key) || -1 === o.key.indexOf(\"Tag_Profile_Custom\")) return { valid: !1, tips: \"自定义资料字段的前缀必须是 Tag_Profile_Custom\" };if (!ha(o.value)) return { valid: !1, tips: \"自定义资料字段的 value 必须是字符串\" };}for (var s in e) {if (Object.prototype.hasOwnProperty.call(e, s)) {if (\"profileCustomField\" === s) continue;if (ja(e[s]) && !ha(e[s]) && !fa(e[s])) {n = \"key:\" + s + \", invalid value:\" + e[s], t = !1;continue;}switch (s) {case \"nick\":ha(e[s]) || (n = \"nick should be a string\", t = !1), ka(e[s]) > 500 && (n = \"nick name limited: must less than or equal to \".concat(500, \" bytes, current size: \").concat(ka(e[s]), \" bytes\"), t = !1);break;case \"gender\":Na(sp, e.gender) || (n = \"key:gender, invalid value:\" + e.gender, t = !1);break;case \"birthday\":fa(e.birthday) || (n = \"birthday should be a number\", t = !1);break;case \"location\":ha(e.location) || (n = \"location should be a string\", t = !1);break;case \"selfSignature\":ha(e.selfSignature) || (n = \"selfSignature should be a string\", t = !1);break;case \"allowType\":Na(up, e.allowType) || (n = \"key:allowType, invalid value:\" + e.allowType, t = !1);break;case \"language\":fa(e.language) || (n = \"language should be a number\", t = !1);break;case \"avatar\":ha(e.avatar) || (n = \"avatar should be a string\", t = !1);break;case \"messageSettings\":0 !== e.messageSettings && 1 !== e.messageSettings && (n = \"messageSettings should be 0 or 1\", t = !1);break;case \"adminForbidType\":Na(ap, e.adminForbidType) || (n = \"key:adminForbidType, invalid value:\" + e.adminForbidType, t = !1);break;case \"level\":fa(e.level) || (n = \"level should be a number\", t = !1);break;case \"role\":fa(e.role) || (n = \"role should be a number\", t = !1);break;default:n = \"unknown key:\" + s + \"  \" + e[s], t = !1;}}}return { valid: t, tips: n };} }]), e;}(),Rv = function () {function e(t) {An(this, e), this.userController = t, this.TAG = \"profile\", this.Actions = { Q: \"query\", U: \"update\" }, this.accountProfileMap = new Map(), this.expirationTime = 864e5;}return Rn(e, [{ key: \"setExpirationTime\", value: function value(e) {this.expirationTime = e;} }, { key: \"getUserProfile\", value: function value(e) {var t = this,n = e.userIDList;e.fromAccount = this.userController.getMyAccount(), n.length > 100 && (la.warn(\"ProfileHandler.getUserProfile 获取用户资料人数不能超过100人\"), n.length = 100);for (var r, o = [], i = [], s = 0, a = n.length; s < a; s++) {r = n[s], this.userController.isMyFriend(r) && this._containsAccount(r) ? i.push(this._getProfileFromMap(r)) : o.push(r);}if (0 === o.length) return od(i);e.toAccount = o;var u = e.bFromGetMyProfile || !1,c = [];e.toAccount.forEach(function (e) {c.push({ toAccount: e, standardSequence: 0, customSequence: 0 });}), e.userItem = c;var l = new ad();l.setMethod(rg).setText(n.length > 5 ? \"userIDList.length=\".concat(n.length) : \"userIDList=\".concat(n)).setStart();var p = this.userController.generateConfig(this.TAG, this.Actions.Q, e);return this.userController.request(p).then(function (e) {l.setCode(0).setNetworkType(t.userController.getNetworkType()).setEnd(), la.info(\"ProfileHandler.getUserProfile ok\");var n = t._handleResponse(e).concat(i);return u ? (t.userController.onGotMyProfile(), new td(n[0])) : new td(n);}).catch(function (e) {return t.userController.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];l.setError(e, r, o).setEnd();}), la.error(\"ProfileHandler.getUserProfile error:\", e), id(e);});} }, { key: \"getMyProfile\", value: function value() {var e = this.userController.getMyAccount();if (la.log(\"ProfileHandler.getMyProfile myAccount=\" + e), this._fillMap(), this._containsAccount(e)) {var t = this._getProfileFromMap(e);return la.debug(\"ProfileHandler.getMyProfile from cache, myProfile:\" + JSON.stringify(t)), this.userController.onGotMyProfile(), od(t);}return this.getUserProfile({ fromAccount: e, userIDList: [e], bFromGetMyProfile: !0 });} }, { key: \"_handleResponse\", value: function value(e) {for (var t, n, r = Sa.now(), o = e.data.userProfileItem, i = [], s = 0, a = o.length; s < a; s++) {\"@TLS#NOT_FOUND\" !== o[s].to && \"\" !== o[s].to && (t = o[s].to, n = this._updateMap(t, this._getLatestProfileFromResponse(t, o[s].profileItem)), i.push(n));}return la.log(\"ProfileHandler._handleResponse cost \" + (Sa.now() - r) + \" ms\"), i;} }, { key: \"_getLatestProfileFromResponse\", value: function value(e, t) {var n = {};if (n.userID = e, n.profileCustomField = [], !ja(t)) for (var r = 0, o = t.length; r < o; r++) {if (t[r].tag.indexOf(\"Tag_Profile_Custom\") > -1) n.profileCustomField.push({ key: t[r].tag, value: t[r].value });else switch (t[r].tag) {case ip.NICK:n.nick = t[r].value;break;case ip.GENDER:n.gender = t[r].value;break;case ip.BIRTHDAY:n.birthday = t[r].value;break;case ip.LOCATION:n.location = t[r].value;break;case ip.SELFSIGNATURE:n.selfSignature = t[r].value;break;case ip.ALLOWTYPE:n.allowType = t[r].value;break;case ip.LANGUAGE:n.language = t[r].value;break;case ip.AVATAR:n.avatar = t[r].value;break;case ip.MESSAGESETTINGS:n.messageSettings = t[r].value;break;case ip.ADMINFORBIDTYPE:n.adminForbidType = t[r].value;break;case ip.LEVEL:n.level = t[r].value;break;case ip.ROLE:n.role = t[r].value;break;default:la.warn(\"ProfileHandler._handleResponse unkown tag->\", t[r].tag, t[r].value);}}return n;} }, { key: \"updateMyProfile\", value: function value(e) {var t = this,n = new ad();n.setMethod(og).setText(JSON.stringify(e)).setStart();var r = new kv().validate(e);if (!r.valid) return n.setCode(Sp.UPDATE_PROFILE_INVALID_PARAM).setMessage(\"ProfileHandler.updateMyProfile info:\".concat(r.tips)).setNetworkType(this.userController.getNetworkType()).setEnd(), la.error(\"ProfileHandler.updateMyProfile info:\".concat(r.tips, \"，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#updateMyProfile\")), id({ code: Sp.UPDATE_PROFILE_INVALID_PARAM, message: mf });var o = [];for (var i in e) {Object.prototype.hasOwnProperty.call(e, i) && (\"profileCustomField\" === i ? e.profileCustomField.forEach(function (e) {o.push({ tag: e.key, value: e.value });}) : o.push({ tag: ip[i.toUpperCase()], value: e[i] }));}if (0 === o.length) return n.setCode(Sp.UPDATE_PROFILE_NO_KEY).setMessage(vf).setNetworkType(this.userController.getNetworkType()).setEnd(), la.error(\"ProfileHandler.updateMyProfile info:\".concat(vf, \"，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#updateMyProfile\")), id({ code: Sp.UPDATE_PROFILE_NO_KEY, message: vf });var s = this.userController.generateConfig(this.TAG, this.Actions.U, { fromAccount: this.userController.getMyAccount(), profileItem: o });return this.userController.request(s).then(function (r) {n.setCode(0).setNetworkType(t.userController.getNetworkType()).setEnd(), la.info(\"ProfileHandler.updateMyProfile ok\");var o = t._updateMap(t.userController.getMyAccount(), e);return t.userController.emitOuterEvent(ln.PROFILE_UPDATED, [o]), od(o);}).catch(function (e) {return t.userController.probeNetwork().then(function (t) {var r = Bn(t, 2),o = r[0],i = r[1];n.setError(e, o, i).setEnd();}), la.error(\"ProfileHandler.updateMyProfile error:\", e), id(e);});} }, { key: \"onProfileModified\", value: function value(e) {var t = e.data;if (!ja(t)) {var n,r,o = t.length;la.info(\"ProfileHandler.onProfileModified length=\" + o);for (var i = [], s = 0; s < o; s++) {n = t[s].userID, r = this._updateMap(n, this._getLatestProfileFromResponse(n, t[s].profileList)), i.push(r);}this.userController.emitInnerEvent(Ph, i), this.userController.emitOuterEvent(ln.PROFILE_UPDATED, i);}} }, { key: \"_fillMap\", value: function value() {if (0 === this.accountProfileMap.size) {for (var e = this._getCachedProfiles(), t = Date.now(), n = 0, r = e.length; n < r; n++) {t - e[n].lastUpdatedTime < this.expirationTime && this.accountProfileMap.set(e[n].userID, e[n]);}la.log(\"ProfileHandler._fillMap from cache, map.size=\" + this.accountProfileMap.size);}} }, { key: \"_updateMap\", value: function value(e, t) {var n,r = Date.now();return this._containsAccount(e) ? (n = this._getProfileFromMap(e), t.profileCustomField && Ga(n.profileCustomField, t.profileCustomField), Ta(n, t, [\"profileCustomField\"]), n.lastUpdatedTime = r) : (n = new kv(t), (this.userController.isMyFriend(e) || e === this.userController.getMyAccount()) && (n.lastUpdatedTime = r, this.accountProfileMap.set(e, n))), this._flushMap(e === this.userController.getMyAccount()), n;} }, { key: \"_flushMap\", value: function value(e) {var t = jn(this.accountProfileMap.values()),n = this.userController.tim.storage;la.debug(\"ProfileHandler._flushMap length=\".concat(t.length, \" flushAtOnce=\").concat(e)), n.setItem(this.TAG, t, e);} }, { key: \"_containsAccount\", value: function value(e) {return this.accountProfileMap.has(e);} }, { key: \"_getProfileFromMap\", value: function value(e) {return this.accountProfileMap.get(e);} }, { key: \"_getCachedProfiles\", value: function value() {var e = this.userController.tim.storage.getItem(this.TAG);return ja(e) ? [] : e;} }, { key: \"onConversationsProfileUpdated\", value: function value(e) {for (var t, n, r, o = [], i = 0, s = e.length; i < s; i++) {n = (t = e[i]).userID, this.userController.isMyFriend(n) && (this._containsAccount(n) ? (r = this._getProfileFromMap(n), Ta(r, t) > 0 && o.push(n)) : o.push(t.userID));}0 !== o.length && (la.info(\"ProfileHandler.onConversationsProfileUpdated toAccount:\", o), this.getUserProfile({ userIDList: o }));} }, { key: \"reset\", value: function value() {this._flushMap(!0), this.accountProfileMap.clear();} }]), e;}();Re({ target: \"String\", proto: !0 }, { repeat: Ar });var Ov = function () {function e(t) {An(this, e), this.options = t ? t.options : { enablePointer: !0 }, this.pointsList = {}, this.reportText = {}, this.maxNameLen = 0, this.gapChar = \"-\", this.log = console.log, this.currentTask = \"\";}return Rn(e, [{ key: \"newTask\", value: function value(e) {!1 !== this.options.enablePointer && (e || (e = [\"task\", this._timeFormat()].join(\"-\")), this.pointsList[e] = [], this.currentTask = e, __f__(\"log\", \"Pointer new Task : \".concat(this.currentTask), \" at tim-js-sdk/tim-js.js:1\"));} }, { key: \"deleteTask\", value: function value(e) {!1 !== this.options.enablePointer && (e || (e = this.currentTask), this.pointsList[e].length = 0, delete this.pointsList[e]);} }, { key: \"dot\", value: function value() {var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",t = arguments.length > 1 ? arguments[1] : void 0;if (!1 !== this.options.enablePointer) {t = t || this.currentTask;var n = +new Date();this.maxNameLen = this.maxNameLen < e.length ? e.length : this.maxNameLen, this.flen = this.maxNameLen + 10, this.pointsList[t].push({ pointerName: e, time: n });}} }, { key: \"_analisys\", value: function value(e) {if (!1 !== this.options.enablePointer) {e = e || this.currentTask;for (var t = this.pointsList[e], n = t.length, r = [], o = [], i = 0; i < n; i++) {0 !== i && (o = this._analisysTowPoints(t[i - 1], t[i]), r.push(o.join(\"\")));}return o = this._analisysTowPoints(t[0], t[n - 1], !0), r.push(o.join(\"\")), r.join(\"\");}} }, { key: \"_analisysTowPoints\", value: function value(e, t) {var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];if (!1 !== this.options.enablePointer) {var r = this.flen,o = t.time - e.time,i = o.toString(),s = e.pointerName + this.gapChar.repeat(r - e.pointerName.length),a = t.pointerName + this.gapChar.repeat(r - t.pointerName.length),u = this.gapChar.repeat(4 - i.length) + i,c = n ? [\"%c\", s, a, u, \"ms\\n%c\"] : [s, a, u, \"ms\\n\"];return c;}} }, { key: \"report\", value: function value(e) {if (!1 !== this.options.enablePointer) {e = e || this.currentTask;var t = this._analisys(e);this.pointsList = [];var n = this._timeFormat(),r = \"Pointer[\".concat(e, \"(\").concat(n, \")]\"),o = 4 * this.maxNameLen,i = (o - r.length) / 2;__f__(\"log\", [\"-\".repeat(i), r, \"-\".repeat(i)].join(\"\"), \" at tim-js-sdk/tim-js.js:1\"), __f__(\"log\", \"%c\" + t, \"color:#66a\", \"color:red\", \"color:#66a\", \" at tim-js-sdk/tim-js.js:1\"), __f__(\"log\", \"-\".repeat(o), \" at tim-js-sdk/tim-js.js:1\");}} }, { key: \"_timeFormat\", value: function value() {var e = new Date(),t = this.zeroFix(e.getMonth() + 1, 2),n = this.zeroFix(e.getDate(), 2);return \"\".concat(t, \"-\").concat(n, \" \").concat(e.getHours(), \":\").concat(e.getSeconds(), \":\").concat(e.getMinutes(), \"~\").concat(e.getMilliseconds());} }, { key: \"zeroFix\", value: function value(e, t) {return (\"000000000\" + e).slice(-t);} }, { key: \"reportAll\", value: function value() {if (!1 !== this.options.enablePointer) for (var e in this.pointsList) {Object.prototype.hasOwnProperty.call(this.pointsList, e) && this.eport(e);}} }]), e;}(),wv = function e(t, n) {An(this, e), this.userID = t;var r = {};if (r.userID = t, !ja(n)) for (var o = 0, i = n.length; o < i; o++) {switch (n[o].tag) {case ip.NICK:r.nick = n[o].value;break;case ip.GENDER:r.gender = n[o].value;break;case ip.BIRTHDAY:r.birthday = n[o].value;break;case ip.LOCATION:r.location = n[o].value;break;case ip.SELFSIGNATURE:r.selfSignature = n[o].value;break;case ip.ALLOWTYPE:r.allowType = n[o].value;break;case ip.LANGUAGE:r.language = n[o].value;break;case ip.AVATAR:r.avatar = n[o].value;break;case ip.MESSAGESETTINGS:r.messageSettings = n[o].value;break;case ip.ADMINFORBIDTYPE:r.adminForbidType = n[o].value;break;case ip.LEVEL:r.level = n[o].value;break;case ip.ROLE:r.role = n[o].value;break;default:la.debug(\"snsProfileItem unkown tag->\", n[o].tag);}}this.profile = new kv(r);},Nv = function () {function e(t) {An(this, e), this.userController = t, this.TAG = \"friend\", this.Actions = { G: \"get\", D: \"delete\" }, this.friends = new Map(), this.pointer = new Ov();}return Rn(e, [{ key: \"isMyFriend\", value: function value(e) {var t = this.friends.has(e);return t || la.debug(\"FriendHandler.isMyFriend \" + e + \" is not my friend\"), t;} }, { key: \"_transformFriendList\", value: function value(e) {if (!ja(e) && !ja(e.infoItem)) {la.info(\"FriendHandler._transformFriendList friendNum=\" + e.friendNum);for (var t, n, r = e.infoItem, o = 0, i = r.length; o < i; o++) {n = r[o].infoAccount, t = new wv(n, r[o].snsProfileItem), this.friends.set(n, t);}}} }, { key: \"_friends2map\", value: function value(e) {var t = new Map();for (var n in e) {Object.prototype.hasOwnProperty.call(e, n) && t.set(n, e[n]);}return t;} }, { key: \"getFriendList\", value: function value() {var e = this,t = {};t.fromAccount = this.userController.getMyAccount(), la.info(\"FriendHandler.getFriendList myAccount=\" + t.fromAccount);var n = this.userController.generateConfig(this.TAG, this.Actions.G, t);return this.userController.request(n).then(function (t) {la.info(\"FriendHandler.getFriendList ok\"), e._transformFriendList(t.data);var n = jn(e.friends.values());return od(n);}).catch(function (e) {return la.error(\"FriendHandler.getFriendList error:\", e), id(e);});} }, { key: \"deleteFriend\", value: function value(e) {if (!Array.isArray(e.toAccount)) return la.error(\"FriendHandler.deleteFriend options.toAccount 必需是数组\"), id({ code: Sp.DEL_FRIEND_INVALID_PARAM, message: gf });e.toAccount.length > 1e3 && (la.warn(\"FriendHandler.deleteFriend 删除好友人数不能超过1000人\"), e.toAccount.length = 1e3);var t = this.userController.generateConfig(this.TAG, this.Actions.D, e);return this.userController.request(t).then(function (e) {return la.info(\"FriendHandler.deleteFriend ok\"), od();}).catch(function (e) {return la.error(\"FriendHandler.deleteFriend error:\", e), id(e);});} }]), e;}(),Lv = function e(t) {An(this, e), ja || (this.userID = t.userID || \"\", this.timeStamp = t.timeStamp || 0);},bv = function () {function e(t) {An(this, e), this.userController = t, this.TAG = \"blacklist\", this.Actions = { G: \"get\", C: \"create\", D: \"delete\" }, this.blacklistMap = new Map(), this.startIndex = 0, this.maxLimited = 100, this.curruentSequence = 0;}return Rn(e, [{ key: \"getBlacklist\", value: function value() {var e = this,t = {};t.fromAccount = this.userController.getMyAccount(), t.maxLimited = this.maxLimited, t.startIndex = 0, t.lastSequence = this.curruentSequence;var n = new ad();n.setMethod(ig).setStart();var r = this.userController.generateConfig(this.TAG, this.Actions.G, t);return this.userController.request(r).then(function (t) {var r = ja(t.data.blackListItem) ? 0 : t.data.blackListItem.length;return n.setCode(0).setNetworkType(e.userController.getNetworkType()).setText(r).setEnd(), la.info(\"BlacklistHandler.getBlacklist ok\"), e.curruentSequence = t.data.curruentSequence, e._handleResponse(t.data.blackListItem, !0), e._onBlacklistUpdated();}).catch(function (t) {return e.userController.probeNetwork().then(function (e) {var r = Bn(e, 2),o = r[0],i = r[1];n.setError(t, o, i).setEnd();}), la.error(\"BlacklistHandler.getBlacklist error:\", t), id(t);});} }, { key: \"addBlacklist\", value: function value(e) {var t = this,n = new ad();if (n.setMethod(sg).setStart(), !ma(e.userIDList)) return n.setCode(Sp.ADD_BLACKLIST_INVALID_PARAM).setMessage(\"BlacklistHandler.addBlacklist options.userIDList 必需是数组\").setNetworkType(this.userController.getNetworkType()).setEnd(), la.error(\"BlacklistHandler.addBlacklist options.userIDList 必需是数组\"), id({ code: Sp.ADD_BLACKLIST_INVALID_PARAM, message: yf });var r = this.userController.tim.loginInfo.identifier;if (1 === e.userIDList.length && e.userIDList[0] === r) return n.setCode(Sp.CANNOT_ADD_SELF_TO_BLACKLIST).setMessage(If).setNetworkType(this.userController.getNetworkType()).setEnd(), la.error(\"BlacklistHandler.addBlacklist 不能把自己拉黑\"), id({ code: Sp.CANNOT_ADD_SELF_TO_BLACKLIST, message: If });e.userIDList.includes(r) && (e.userIDList = e.userIDList.filter(function (e) {return e !== r;}), la.warn(\"BlacklistHandler.addBlacklist 不能把自己拉黑，已过滤\")), e.fromAccount = this.userController.getMyAccount(), e.toAccount = e.userIDList;var o = this.userController.generateConfig(this.TAG, this.Actions.C, e);return this.userController.request(o).then(function (r) {return n.setCode(0).setNetworkType(t.userController.getNetworkType()).setText(e.userIDList.length > 5 ? \"userIDList.length=\".concat(e.userIDList.length) : \"userIDList=\".concat(e.userIDList)).setEnd(), la.info(\"BlacklistHandler.addBlacklist ok\"), t._handleResponse(r.data.resultItem, !0), t._onBlacklistUpdated();}).catch(function (e) {return t.userController.probeNetwork().then(function (t) {var r = Bn(t, 2),o = r[0],i = r[1];n.setError(e, o, i).setEnd();}), la.error(\"BlacklistHandler.addBlacklist error:\", e), id(e);});} }, { key: \"_handleResponse\", value: function value(e, t) {if (!ja(e)) for (var n, r, o, i = 0, s = e.length; i < s; i++) {r = e[i].to, o = e[i].resultCode, (va(o) || 0 === o) && (t ? ((n = this.blacklistMap.has(r) ? this.blacklistMap.get(r) : new Lv()).userID = r, !ja(e[i].addBlackTimeStamp) && (n.timeStamp = e[i].addBlackTimeStamp), this.blacklistMap.set(r, n)) : this.blacklistMap.has(r) && (n = this.blacklistMap.get(r), this.blacklistMap.delete(r)));}la.log(\"BlacklistHandler._handleResponse total=\" + this.blacklistMap.size + \" bAdd=\" + t);} }, { key: \"deleteBlacklist\", value: function value(e) {var t = this,n = new ad();if (n.setMethod(ag).setStart(), !ma(e.userIDList)) return n.setCode(Sp.DEL_BLACKLIST_INVALID_PARAM).setMessage(\"BlacklistHandler.deleteBlacklist options.userIDList 必需是数组\").setNetworkType(this.userController.getNetworkType()).setEnd(), la.error(\"BlacklistHandler.deleteBlacklist options.userIDList 必需是数组\"), id({ code: Sp.DEL_BLACKLIST_INVALID_PARAM, message: _f });e.fromAccount = this.userController.getMyAccount(), e.toAccount = e.userIDList;var r = this.userController.generateConfig(this.TAG, this.Actions.D, e);return this.userController.request(r).then(function (r) {return n.setCode(0).setNetworkType(t.userController.getNetworkType()).setText(e.userIDList.length > 5 ? \"userIDList.length=\".concat(e.userIDList.length) : \"userIDList=\".concat(e.userIDList)).setEnd(), la.info(\"BlacklistHandler.deleteBlacklist ok\"), t._handleResponse(r.data.resultItem, !1), t._onBlacklistUpdated();}).catch(function (e) {return t.userController.probeNetwork().then(function (t) {var r = Bn(t, 2),o = r[0],i = r[1];n.setError(e, o, i).setEnd();}), la.error(\"BlacklistHandler.deleteBlacklist error:\", e), id(e);});} }, { key: \"_onBlacklistUpdated\", value: function value() {var e = jn(this.blacklistMap.keys());return this.userController.emitOuterEvent(ln.BLACKLIST_UPDATED, e), od(e);} }, { key: \"handleBlackListDelAccount\", value: function value(e) {for (var t, n = [], r = 0, o = e.length; r < o; r++) {t = e[r], this.blacklistMap.has(t) && (this.blacklistMap.delete(t), n.push(t));}n.length > 0 && (la.log(\"BlacklistHandler.handleBlackListDelAccount delCount=\" + n.length + \" : \" + n.join(\",\")), this.userController.emitOuterEvent(ln.BLACKLIST_UPDATED, jn(this.blacklistMap.keys())));} }, { key: \"handleBlackListAddAccount\", value: function value(e) {for (var t, n = [], r = 0, o = e.length; r < o; r++) {t = e[r], this.blacklistMap.has(t) || (this.blacklistMap.set(t, new Lv({ userID: t })), n.push(t));}n.length > 0 && (la.log(\"BlacklistHandler.handleBlackListAddAccount addCount=\" + n.length + \" : \" + n.join(\",\")), this.userController.emitOuterEvent(ln.BLACKLIST_UPDATED, jn(this.blacklistMap.keys())));} }, { key: \"reset\", value: function value() {this.blacklistMap.clear(), this.startIndex = 0, this.maxLimited = 100, this.curruentSequence = 0;} }]), e;}(),Pv = function () {function e(t) {An(this, e), this.userController = t, this.TAG = \"applyC2C\", this.Actions = { C: \"create\", G: \"get\", D: \"delete\", U: \"update\" };}return Rn(e, [{ key: \"applyAddFriend\", value: function value(e) {var t = this,n = this.userController.generateConfig(this.TAG, this.Actions.C, e),r = this.userController.request(n);return r.then(function (e) {t.userController.isActionSuccessful(\"applyAddFriend\", t.Actions.C, e);}).catch(function (e) {}), r;} }, { key: \"getPendency\", value: function value(e) {var t = this,n = this.userController.generateConfig(this.TAG, this.Actions.G, e),r = this.userController.request(n);return r.then(function (e) {t.userController.isActionSuccessful(\"getPendency\", t.Actions.G, e);}).catch(function (e) {}), r;} }, { key: \"deletePendency\", value: function value(e) {var t = this,n = this.userController.generateConfig(this.TAG, this.Actions.D, e),r = this.userController.request(n);return r.then(function (e) {t.userController.isActionSuccessful(\"deletePendency\", t.Actions.D, e);}).catch(function (e) {}), r;} }, { key: \"replyPendency\", value: function value() {var e = this,t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},n = this.userController.generateConfig(this.TAG, this.Actions.U, t),r = this.userController.request(n);return r.then(function (t) {e.userController.isActionSuccessful(\"replyPendency\", e.Actions.U, t);}).catch(function (e) {}), r;} }]), e;}(),Gv = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).profileHandler = new Rv(qn(r)), r.friendHandler = new Nv(qn(r)), r.blacklistHandler = new bv(qn(r)), r.applyC2CHandler = new Pv(qn(r)), r._initializeListener(), r;}return Rn(n, [{ key: \"_initializeListener\", value: function value(e) {var t = this.tim.innerEmitter;t.on(Xf, this.onContextUpdated, this), t.on(_h, this.onProfileModified, this), t.on(yh, this.onNewFriendMessages, this), t.on(Lh, this.onConversationsProfileUpdated, this);} }, { key: \"onContextUpdated\", value: function value(e) {var t = this.tim.context;!1 != !!t.a2Key && !1 != !!t.tinyID && (this.profileHandler.getMyProfile(), this.friendHandler.getFriendList(), this.blacklistHandler.getBlacklist());} }, { key: \"onGotMyProfile\", value: function value() {this.triggerReady();} }, { key: \"onProfileModified\", value: function value(e) {this.profileHandler.onProfileModified(e);} }, { key: \"onNewFriendMessages\", value: function value(e) {la.debug(\"onNewFriendMessages\", JSON.stringify(e.data)), ja(e.data.blackListDelAccount) || this.blacklistHandler.handleBlackListDelAccount(e.data.blackListDelAccount), ja(e.data.blackListAddAccount) || this.blacklistHandler.handleBlackListAddAccount(e.data.blackListAddAccount);} }, { key: \"onConversationsProfileUpdated\", value: function value(e) {this.profileHandler.onConversationsProfileUpdated(e.data);} }, { key: \"getMyAccount\", value: function value() {return this.tim.context.identifier;} }, { key: \"isMyFriend\", value: function value(e) {return this.friendHandler.isMyFriend(e);} }, { key: \"generateConfig\", value: function value(e, t, n) {return { name: e, action: t, param: n };} }, { key: \"getMyProfile\", value: function value() {return this.profileHandler.getMyProfile();} }, { key: \"getUserProfile\", value: function value(e) {return this.profileHandler.getUserProfile(e);} }, { key: \"updateMyProfile\", value: function value(e) {return this.profileHandler.updateMyProfile(e);} }, { key: \"getFriendList\", value: function value() {return this.friendHandler.getFriendList();} }, { key: \"deleteFriend\", value: function value(e) {return this.friendHandler.deleteFriend(e);} }, { key: \"getBlacklist\", value: function value() {return this.blacklistHandler.getBlacklist();} }, { key: \"addBlacklist\", value: function value(e) {return this.blacklistHandler.addBlacklist(e);} }, { key: \"deleteBlacklist\", value: function value(e) {return this.blacklistHandler.deleteBlacklist(e);} }, { key: \"applyAddFriend\", value: function value(e) {return this.applyC2CHandler.applyAddFriend(e);} }, { key: \"getPendency\", value: function value(e) {return this.applyC2CHandler.getPendency(e);} }, { key: \"deletePendency\", value: function value(e) {return this.applyC2CHandler.deletePendency(e);} }, { key: \"replyPendency\", value: function value(e) {return this.applyC2CHandler.replyPendency(e);} }, { key: \"reset\", value: function value() {la.info(\"UserController.reset\"), this.resetReady(), this.profileHandler.reset(), this.blacklistHandler.reset(), this.checkTimes = 0;} }]), n;}(Qh),Uv = [],xv = Uv.sort,qv = o(function () {Uv.sort(void 0);}),Fv = o(function () {Uv.sort(null);}),Vv = He(\"sort\");Re({ target: \"Array\", proto: !0, forced: qv || !Fv || !Vv }, { sort: function sort(e) {return void 0 === e ? xv.call(Ne(this)) : xv.call(Ne(this), Oe(e));} });var Bv = [\"groupID\", \"name\", \"avatar\", \"type\", \"introduction\", \"notification\", \"ownerID\", \"selfInfo\", \"createTime\", \"infoSequence\", \"lastInfoTime\", \"lastMessage\", \"nextMessageSeq\", \"memberNum\", \"maxMemberNum\", \"memberList\", \"joinOption\", \"groupCustomField\", \"muteAllMembers\"],jv = function () {function e(t) {An(this, e), this.groupID = \"\", this.name = \"\", this.avatar = \"\", this.type = \"\", this.introduction = \"\", this.notification = \"\", this.ownerID = \"\", this.createTime = \"\", this.infoSequence = \"\", this.lastInfoTime = \"\", this.selfInfo = { messageRemindType: \"\", joinTime: \"\", nameCard: \"\", role: \"\" }, this.lastMessage = { lastTime: \"\", lastSequence: \"\", fromAccount: \"\", messageForShow: \"\" }, this.nextMessageSeq = \"\", this.memberNum = \"\", this.maxMemberNum = \"\", this.joinOption = \"\", this.groupCustomField = [], this.muteAllMembers = void 0, this._initGroup(t);}return Rn(e, [{ key: \"_initGroup\", value: function value(e) {for (var t in e) {Bv.indexOf(t) < 0 || (\"selfInfo\" !== t ? this[t] = e[t] : this.updateSelfInfo(e[t]));}} }, { key: \"updateGroup\", value: function value(e) {e.lastMsgTime && (this.lastMessage.lastTime = e.lastMsgTime), va(e.muteAllMembers) || (\"On\" === e.muteAllMembers ? e.muteAllMembers = !0 : e.muteAllMembers = !1), e.groupCustomField && Ga(this.groupCustomField, e.groupCustomField), Ta(this, e, [\"members\", \"errorCode\", \"lastMsgTime\", \"groupCustomField\"]);} }, { key: \"updateSelfInfo\", value: function value(e) {var t = e.nameCard,n = e.joinTime,r = e.role,o = e.messageRemindType;Ta(this.selfInfo, { nameCard: t, joinTime: n, role: r, messageRemindType: o }, [], [\"\", null, void 0, 0, NaN]);} }, { key: \"setSelfNameCard\", value: function value(e) {this.selfInfo.nameCard = e;} }]), e;}(),Kv = function Kv(e, t) {if (va(t)) return \"\";switch (e) {case pn.MSG_TEXT:return t.text;case pn.MSG_IMAGE:return \"[图片]\";case pn.MSG_GEO:return \"[位置]\";case pn.MSG_AUDIO:return \"[语音]\";case pn.MSG_VIDEO:return \"[视频]\";case pn.MSG_FILE:return \"[文件]\";case pn.MSG_CUSTOM:return \"[自定义消息]\";case pn.MSG_GRP_TIP:return \"[群提示消息]\";case pn.MSG_GRP_SYS_NOTICE:return \"[群系统通知]\";case pn.MSG_FACE:return \"[动画表情]\";default:return \"\";}},Hv = function Hv(e) {return va(e) ? { lastTime: 0, lastSequence: 0, fromAccount: 0, messageForShow: \"\", payload: null, type: \"\", isRevoked: !1 } : e instanceof Uf ? { lastTime: e.time || 0, lastSequence: e.sequence || 0, fromAccount: e.from || \"\", messageForShow: Kv(e.type, e.payload), payload: e.payload || null, type: e.type || null, isRevoked: !1 } : Nn({}, e, { isRevoked: !1, messageForShow: Kv(e.type, e.payload) });},Yv = function () {function e(t) {An(this, e), this.conversationID = t.conversationID || \"\", this.unreadCount = t.unreadCount || 0, this.type = t.type || \"\", this.lastMessage = Hv(t.lastMessage), t.lastMsgTime && (this.lastMessage.lastTime = t.lastMsgTime), this._isInfoCompleted = !1, this.peerReadTime = t.peerReadTime || 0, this._initProfile(t);}return Rn(e, [{ key: \"_initProfile\", value: function value(e) {var t = this;Object.keys(e).forEach(function (n) {switch (n) {case \"userProfile\":t.userProfile = e.userProfile;break;case \"groupProfile\":t.groupProfile = e.groupProfile;}}), va(this.userProfile) && this.type === pn.CONV_C2C ? this.userProfile = new kv({ userID: e.conversationID.replace(\"C2C\", \"\") }) : va(this.groupProfile) && this.type === pn.CONV_GROUP && (this.groupProfile = new jv({ groupID: e.conversationID.replace(\"GROUP\", \"\") }));} }, { key: \"updateUnreadCount\", value: function value(e, t) {va(e) || (xa(this.subType) || qa(this.subType) ? this.unreadCount = 0 : t && this.type === pn.CONV_GROUP ? this.unreadCount = e : this.unreadCount = this.unreadCount + e);} }, { key: \"updateLastMessage\", value: function value(e) {this.lastMessage = Hv(e);} }, { key: \"reduceUnreadCount\", value: function value() {this.unreadCount >= 1 && (this.unreadCount -= 1);} }, { key: \"isLastMessageRevoked\", value: function value(e) {var t = e.sequence,n = e.time;return this.type === pn.CONV_C2C && t === this.lastMessage.lastSequence && n === this.lastMessage.lastTime || this.type === pn.CONV_GROUP && t === this.lastMessage.lastSequence;} }, { key: \"setLastMessageRevoked\", value: function value(e) {this.lastMessage.isRevoked = e;} }, { key: \"toAccount\", get: function get() {return this.conversationID.replace(\"C2C\", \"\").replace(\"GROUP\", \"\");} }, { key: \"subType\", get: function get() {return this.groupProfile ? this.groupProfile.type : \"\";} }]), e;}(),$v = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).pagingStatus = xu.NOT_START, r.pagingTimeStamp = 0, r.conversationMap = new Map(), r.tempGroupList = [], r._initListeners(), r;}return Rn(n, [{ key: \"hasLocalConversationMap\", value: function value() {return this.conversationMap.size > 0;} }, { key: \"_createLocalConversation\", value: function value(e) {return this.conversationMap.has(e) ? this.conversationMap.get(e) : (la.log(\"ConversationController._createLocalConversation conversationID:\".concat(e)), new Yv({ conversationID: e, type: e.slice(0, 3) === pn.CONV_C2C ? pn.CONV_C2C : pn.CONV_GROUP }));} }, { key: \"hasLocalConversation\", value: function value(e) {return this.conversationMap.has(e);} }, { key: \"getConversationList\", value: function value() {var e = this;la.log(\"ConversationController.getConversationList.\"), this.pagingStatus === xu.REJECTED && (la.log(\"ConversationController.getConversationList. continue to sync conversationList\"), this._syncConversationList());var t = new ad();return t.setMethod(Td).setStart(), this.request({ name: \"conversation\", action: \"query\" }).then(function (n) {var r = n.data.conversations,o = void 0 === r ? [] : r,i = e._getConversationOptions(o);return e._updateLocalConversationList(i, !0), e._setStorageConversationList(), e._handleC2CPeerReadTime(), t.setCode(0).setText(o.length).setNetworkType(e.getNetworkType()).setEnd(), la.log(\"ConversationController.getConversationList ok.\"), od({ conversationList: e.getLocalConversationList() });}).catch(function (n) {return e.probeNetwork().then(function (e) {var r = Bn(e, 2),o = r[0],i = r[1];t.setError(n, o, i).setEnd();}), la.error(\"ConversationController.getConversationList error:\", n), id(n);});} }, { key: \"_syncConversationList\", value: function value() {var e = this,t = new ad();return t.setMethod(Rd).setStart(), this.pagingStatus === xu.NOT_START && this.conversationMap.clear(), this._autoPagingSyncConversationList().then(function (n) {return e.pagingStatus = xu.RESOLVED, e._setStorageConversationList(), e._handleC2CPeerReadTime(), t.setCode(0).setText(\"\".concat(e.conversationMap.size)).setNetworkType(e.getNetworkType()).setEnd(), n;}).catch(function (n) {return e.pagingStatus = xu.REJECTED, t.setText(e.pagingTimeStamp), e.probeNetwork().then(function (e) {var r = Bn(e, 2),o = r[0],i = r[1];t.setError(n, o, i).setEnd();}), id(n);});} }, { key: \"_autoPagingSyncConversationList\", value: function value() {var e = this;return this.pagingStatus = xu.PENDING, this.request({ name: \"conversation\", action: \"pagingQuery\", param: { fromAccount: this.tim.context.identifier, timeStamp: this.pagingTimeStamp, orderType: 1 } }).then(function (t) {var n = t.data,r = n.completeFlag,o = n.conversations,i = void 0 === o ? [] : o,s = n.timeStamp;if (la.log(\"ConversationController._autoPagingSyncConversationList completeFlag=\".concat(r, \" nums=\").concat(i.length)), i.length > 0) {var a = e._getConversationOptions(i);e._updateLocalConversationList(a, !0);}return e._isReady ? e._emitConversationUpdate() : e.triggerReady(), e.pagingTimeStamp = s, 1 !== r ? e._autoPagingSyncConversationList() : od();});} }, { key: \"_handleC2CPeerReadTime\", value: function value() {var e,t = this.tim.messageController,n = Yn(this.conversationMap);try {for (n.s(); !(e = n.n()).done;) {var r = Bn(e.value, 2),o = r[0],i = r[1];i.type === pn.CONV_C2C && (la.debug(\"ConversationController._handleC2CPeerReadTime\", o, i.peerReadTime), t.recordPeerReadTime(o, i.peerReadTime));}} catch (s) {n.e(s);} finally {n.f();}} }, { key: \"getConversationProfile\", value: function value(e) {var t = this,n = this.conversationMap.has(e) ? this.conversationMap.get(e) : this._createLocalConversation(e);if (n._isInfoCompleted || n.type === pn.CONV_SYSTEM) return od({ conversation: n });var r = new ad();return r.setMethod(Dd).setStart(), la.log(\"ConversationController.getConversationProfile. conversationID:\".concat(e, \" lastMessage:\"), n.lastMessage), this._updateUserOrGroupProfileCompletely(n).then(function (n) {return r.setCode(0).setNetworkType(t.getNetworkType()).setText(\"conversationID=\".concat(e, \" unreadCount=\").concat(n.data.conversation.unreadCount)).setEnd(), la.log(\"ConversationController.getConversationProfile ok. conversationID:\", e), n;}).catch(function (n) {return t.probeNetwork().then(function (t) {var o = Bn(t, 2),i = o[0],s = o[1];r.setError(n, i, s).setText(\"conversationID=\".concat(e)).setEnd();}), la.error(\"ConversationController.getConversationProfile error:\", n), id(n);});} }, { key: \"deleteConversation\", value: function value(e) {var t = this,n = {};if (!this.conversationMap.has(e)) {var r = new Mp({ code: Sp.CONVERSATION_NOT_FOUND, message: Jp });return id(r);}switch (this.conversationMap.get(e).type) {case pn.CONV_C2C:n.type = 1, n.toAccount = e.replace(pn.CONV_C2C, \"\");break;case pn.CONV_GROUP:n.type = 2, n.toGroupID = e.replace(pn.CONV_GROUP, \"\");break;case pn.CONV_SYSTEM:return this.tim.groupController.deleteGroupSystemNotice({ messageList: this.tim.messageController.getLocalMessageList(e) }), this.deleteLocalConversation(e), od({ conversationID: e });default:var o = new Mp({ code: Sp.CONVERSATION_UN_RECORDED_TYPE, message: Zp });return id(o);}var i = new ad();return i.setMethod(Ad).setText(\"conversationID=\".concat(e)).setStart(), la.log(\"ConversationController.deleteConversation. conversationID=\".concat(e)), this.tim.setMessageRead({ conversationID: e }).then(function () {return t.request({ name: \"conversation\", action: \"delete\", param: n });}).then(function () {return i.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"ConversationController.deleteConversation ok.\"), t.deleteLocalConversation(e), od({ conversationID: e });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];i.setError(e, r, o).setEnd();}), la.error(\"ConversationController.deleteConversation error:\", e), id(e);});} }, { key: \"getLocalConversationList\", value: function value() {return jn(this.conversationMap.values());} }, { key: \"getLocalConversation\", value: function value(e) {return this.conversationMap.get(e);} }, { key: \"_initLocalConversationList\", value: function value() {var e = new ad();e.setMethod(kd).setStart(), la.time(sd.INIT_CONVERSATION_LIST), la.log(\"ConversationController._initLocalConversationList init\");var t = this._getStorageConversationList();if (t) {for (var n = t.length, r = 0; r < n; r++) {this.conversationMap.set(t[r].conversationID, new Yv(t[r]));}this._emitConversationUpdate(!0, !1), e.setCode(0).setNetworkType(this.getNetworkType()).setText(n).setEnd();} else e.setCode(0).setNetworkType(this.getNetworkType()).setText(0).setEnd();this._syncConversationList();} }, { key: \"_getStorageConversationList\", value: function value() {return this.tim.storage.getItem(\"conversationMap\");} }, { key: \"_setStorageConversationList\", value: function value() {var e = this.getLocalConversationList().slice(0, 20).map(function (e) {return { conversationID: e.conversationID, type: e.type, subType: e.subType, lastMessage: e.lastMessage, groupProfile: e.groupProfile, userProfile: e.userProfile };});this.tim.storage.setItem(\"conversationMap\", e);} }, { key: \"_initListeners\", value: function value() {var e = this;this.tim.innerEmitter.once(Xf, this._initLocalConversationList, this), this.tim.innerEmitter.on(eh, this._onSendOrReceiveMessage, this), this.tim.innerEmitter.on(th, this._handleSyncMessages, this), this.tim.innerEmitter.on(nh, this._handleSyncMessages, this), this.tim.innerEmitter.on(rh, this._onSendOrReceiveMessage, this), this.tim.innerEmitter.on(oh, this._onSendOrReceiveMessage, this), this.tim.innerEmitter.on(ih, this._onSendOrReceiveMessage, this), this.tim.innerEmitter.on(Dh, this._onGroupListUpdated, this), this.tim.innerEmitter.on(Ph, this._updateConversationUserProfile, this), this.tim.innerEmitter.on(sh, this._onMessageRevoked, this), this.ready(function () {e.tempGroupList.length > 0 && (e._updateConversationGroupProfile(e.tempGroupList), e.tempGroupList.length = 0);});} }, { key: \"_onGroupListUpdated\", value: function value(e) {this._updateConversationGroupProfile(e.data);} }, { key: \"_updateConversationGroupProfile\", value: function value(e) {var t = this;ma(e) && 0 === e.length || (this.hasLocalConversationMap() ? (e.forEach(function (e) {var n = \"GROUP\".concat(e.groupID);if (t.conversationMap.has(n)) {var r = t.conversationMap.get(n);r.groupProfile = e, r.lastMessage.lastSequence < e.nextMessageSeq && (r.lastMessage.lastSequence = e.nextMessageSeq - 1), r.subType || (r.subType = e.type);}}), this._emitConversationUpdate(!0, !1)) : this.tempGroupList = e);} }, { key: \"_updateConversationUserProfile\", value: function value(e) {var t = this;e.data.forEach(function (e) {var n = \"C2C\".concat(e.userID);t.conversationMap.has(n) && (t.conversationMap.get(n).userProfile = e);}), this._emitConversationUpdate(!0, !1);} }, { key: \"_onMessageRevoked\", value: function value(e) {var t = this,n = e.data;if (0 !== n.length) {var r = null,o = !1;n.forEach(function (e) {(r = t.conversationMap.get(e.conversationID)) && r.isLastMessageRevoked(e) && (o = !0, r.setLastMessageRevoked(!0));}), o && this._emitConversationUpdate(!0, !1);}} }, { key: \"_handleSyncMessages\", value: function value(e) {this._onSendOrReceiveMessage(e, !0);} }, { key: \"_onSendOrReceiveMessage\", value: function value(e) {var t = this,n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],r = e.data.eventDataList;this._isReady ? 0 !== r.length && (this._getPeerReadTime(r), this._updateLocalConversationList(r, !1, n), this._setStorageConversationList(), this._emitConversationUpdate()) : this.ready(function () {t._onSendOrReceiveMessage(e, n);});} }, { key: \"_getPeerReadTime\", value: function value(e) {var t = this,n = [];e.forEach(function (e) {t.conversationMap.has(e.conversationID) || e.type !== pn.CONV_C2C || n.push(e.conversationID.replace(pn.CONV_C2C, \"\"));}), n.length > 0 && (la.debug(\"ConversationController._getPeerReadTime userIDList:\".concat(n)), this.tim.messageController.getPeerReadTime(n));} }, { key: \"_updateLocalConversationList\", value: function value(e, t, n) {var r;r = this._updateTempConversations(e, t, n), this.conversationMap = new Map(this._sortConversations([].concat(jn(r.conversations), jn(this.conversationMap)))), t || this._updateUserOrGroupProfile(r.newerConversations);} }, { key: \"_updateTempConversations\", value: function value(e, t, n) {for (var r = [], o = [], i = 0, s = e.length; i < s; i++) {var a = new Yv(e[i]),u = this.conversationMap.get(a.conversationID);if (this.conversationMap.has(a.conversationID)) {var c = [\"unreadCount\", \"allowType\", \"adminForbidType\", \"payload\"];n && c.push(\"lastMessage\"), Ta(u, a, c, [null, void 0, \"\", 0, NaN]), u.updateUnreadCount(a.unreadCount, t), n || (u.lastMessage.payload = e[i].lastMessage.payload), this.conversationMap.delete(u.conversationID), r.push([u.conversationID, u]);} else {if (a.type === pn.CONV_GROUP) {var l = a.groupProfile.groupID,p = this.tim.groupController.getLocalGroupProfile(l);p && (a.groupProfile = p, a.updateUnreadCount(0));}o.push(a), r.push([a.conversationID, a]);}}return { conversations: r, newerConversations: o };} }, { key: \"_sortConversations\", value: function value(e) {return e.sort(function (e, t) {return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;});} }, { key: \"_updateUserOrGroupProfile\", value: function value(e) {var t = this;if (0 !== e.length) {var n = [],r = [];e.forEach(function (e) {if (e.type === pn.CONV_C2C) n.push(e.toAccount);else if (e.type === pn.CONV_GROUP) {var o = e.toAccount;t.tim.groupController.hasLocalGroup(o) ? e.groupProfile = t.tim.groupController.getLocalGroupProfile(o) : r.push(o);}}), n.length > 0 && this.tim.getUserProfile({ userIDList: n }).then(function (e) {var n = e.data;ma(n) ? n.forEach(function (e) {t.conversationMap.get(\"C2C\".concat(e.userID)).userProfile = e;}) : t.conversationMap.get(\"C2C\".concat(n.userID)).userProfile = n;}), r.length > 0 && this.tim.groupController.getGroupProfileAdvance({ groupIDList: r, responseFilter: { groupBaseInfoFilter: [\"Type\", \"Name\", \"FaceUrl\"] } }).then(function (e) {e.data.successGroupList.forEach(function (e) {var n = \"GROUP\".concat(e.groupID);if (t.conversationMap.has(n)) {var r = t.conversationMap.get(n);Ta(r.groupProfile, e, [], [null, void 0, \"\", 0, NaN]), !r.subType && e.type && (r.subType = e.type);}});});}} }, { key: \"_updateUserOrGroupProfileCompletely\", value: function value(e) {var t = this;return e.type === pn.CONV_C2C ? this.tim.getUserProfile({ userIDList: [e.toAccount] }).then(function (n) {var r = n.data;return 0 === r.length ? id(new Mp({ code: Sp.USER_OR_GROUP_NOT_FOUND, message: Qp })) : (e.userProfile = r[0], e._isInfoCompleted = !0, t._unshiftConversation(e), od({ conversation: e }));}) : this.tim.getGroupProfile({ groupID: e.toAccount }).then(function (n) {return e.groupProfile = n.data.group, e._isInfoCompleted = !0, t._unshiftConversation(e), od({ conversation: e });});} }, { key: \"_unshiftConversation\", value: function value(e) {e instanceof Yv && !this.conversationMap.has(e.conversationID) && (this.conversationMap = new Map([[e.conversationID, e]].concat(jn(this.conversationMap))), this._setStorageConversationList(), this._emitConversationUpdate(!0, !1));} }, { key: \"deleteLocalConversation\", value: function value(e) {this.conversationMap.delete(e), this._setStorageConversationList(), this.emitInnerEvent(bh, e), this._emitConversationUpdate(!0, !1);} }, { key: \"_getConversationOptions\", value: function value(e) {var t = [],n = e.filter(function (e) {var t = e.lastMsg;return ga(t);}).map(function (e) {if (1 === e.type) {var n = { userID: e.userID, nick: e.c2CNick, avatar: e.c2CImage };return t.push(n), { conversationID: \"C2C\".concat(e.userID), type: \"C2C\", lastMessage: { lastTime: e.time, lastSequence: e.sequence, fromAccount: e.lastC2CMsgFromAccount, messageForShow: e.messageShow, type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : null, payload: e.lastMsg.elements[0] ? e.lastMsg.elements[0].content : null }, userProfile: new kv(n), peerReadTime: e.c2cPeerReadTime };}return { conversationID: \"GROUP\".concat(e.groupID), type: \"GROUP\", lastMessage: { lastTime: e.time, lastSequence: e.messageReadSeq + e.unreadCount, fromAccount: e.msgGroupFromAccount, messageForShow: e.messageShow, type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : null, payload: e.lastMsg.elements[0] ? e.lastMsg.elements[0].content : null }, groupProfile: new jv({ groupID: e.groupID, name: e.groupNick, avatar: e.groupImage }), unreadCount: e.unreadCount, peerReadTime: 0 };});return t.length > 0 && this.emitInnerEvent(Lh, t), n;} }, { key: \"_emitConversationUpdate\", value: function value() {var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],n = jn(this.conversationMap.values());t && this.emitInnerEvent(Nh, n), e && this.emitOuterEvent(ln.CONVERSATION_LIST_UPDATED, n);} }, { key: \"_conversationMapTreeShaking\", value: function value(e) {var t = this,n = new Map(jn(this.conversationMap));e.forEach(function (e) {return n.delete(e.conversationID);}), n.has(pn.CONV_SYSTEM) && n.delete(pn.CONV_SYSTEM);var r = this.tim.groupController.getJoinedAVChatRoom();r && r.forEach(function (e) {n.delete(\"\".concat(pn.CONV_GROUP).concat(e));}), jn(n.keys()).forEach(function (e) {return t.conversationMap.delete(e);});} }, { key: \"reset\", value: function value() {this.pagingStatus = xu.NOT_START, this.pagingTimeStamp = 0, this.conversationMap.clear(), this.resetReady(), this.tim.innerEmitter.once(Xf, this._initLocalConversationList, this);} }]), n;}(Qh),Wv = 1..toFixed,zv = Math.floor,Xv = function Xv(e, t, n) {return 0 === t ? n : t % 2 == 1 ? Xv(e, t - 1, n * e) : Xv(e * e, t / 2, n);},Jv = Wv && (\"0.000\" !== 8e-5.toFixed(3) || \"1\" !== .9.toFixed(0) || \"1.25\" !== 1.255.toFixed(2) || \"1000000000000000128\" !== 0xde0b6b3a7640080.toFixed(0)) || !o(function () {Wv.call({});});Re({ target: \"Number\", proto: !0, forced: Jv }, { toFixed: function toFixed(e) {var t,n,r,o,i = function (e) {if (\"number\" != typeof e && \"Number\" != p(e)) throw TypeError(\"Incorrect invocation\");return +e;}(this),s = ie(e),a = [0, 0, 0, 0, 0, 0],u = \"\",c = \"0\",l = function l(e, t) {for (var n = -1, r = t; ++n < 6;) {r += e * a[n], a[n] = r % 1e7, r = zv(r / 1e7);}},f = function f(e) {for (var t = 6, n = 0; --t >= 0;) {n += a[t], a[t] = zv(n / e), n = n % e * 1e7;}},h = function h() {for (var e = 6, t = \"\"; --e >= 0;) {if (\"\" !== t || 0 === e || 0 !== a[e]) {var n = String(a[e]);t = \"\" === t ? n : t + Ar.call(\"0\", 7 - n.length) + n;}}return t;};if (s < 0 || s > 20) throw RangeError(\"Incorrect fraction digits\");if (i != i) return \"NaN\";if (i <= -1e21 || i >= 1e21) return String(i);if (i < 0 && (u = \"-\", i = -i), i > 1e-21) if (n = (t = function (e) {for (var t = 0, n = e; n >= 4096;) {t += 12, n /= 4096;}for (; n >= 2;) {t += 1, n /= 2;}return t;}(i * Xv(2, 69, 1)) - 69) < 0 ? i * Xv(2, -t, 1) : i / Xv(2, t, 1), n *= 4503599627370496, (t = 52 - t) > 0) {for (l(0, n), r = s; r >= 7;) {l(1e7, 0), r -= 7;}for (l(Xv(10, r, 1), 0), r = t - 1; r >= 23;) {f(1 << 23), r -= 23;}f(1 << r), l(1, 1), f(2), c = h();} else l(0, n), l(1 << -t, 0), c = h() + Ar.call(\"0\", s);return c = s > 0 ? u + ((o = c.length) <= s ? \"0.\" + Ar.call(\"0\", s - o) + c : c.slice(0, o - s) + \".\" + c.slice(o - s)) : u + c;} });var Qv = [].push,Zv = Math.min,ey = !o(function () {return !RegExp(4294967295, \"y\");});fs(\"split\", 2, function (e, t, n) {var r;return r = \"c\" == \"abbc\".split(/(b)*/)[1] || 4 != \"test\".split(/(?:)/, -1).length || 2 != \"ab\".split(/(?:ab)*/).length || 4 != \".\".split(/(.?)(.?)/).length || \".\".split(/()()/).length > 1 || \"\".split(/.?/).length ? function (e, n) {var r = String(d(this)),o = void 0 === n ? 4294967295 : n >>> 0;if (0 === o) return [];if (void 0 === e) return [r];if (!ns(e)) return t.call(r, e, o);for (var i, s, a, u = [], c = (e.ignoreCase ? \"i\" : \"\") + (e.multiline ? \"m\" : \"\") + (e.unicode ? \"u\" : \"\") + (e.sticky ? \"y\" : \"\"), l = 0, p = new RegExp(e.source, c + \"g\"); (i = Xi.call(p, r)) && !((s = p.lastIndex) > l && (u.push(r.slice(l, i.index)), i.length > 1 && i.index < r.length && Qv.apply(u, i.slice(1)), a = i[0].length, l = s, u.length >= o));) {p.lastIndex === i.index && p.lastIndex++;}return l === r.length ? !a && p.test(\"\") || u.push(\"\") : u.push(r.slice(l)), u.length > o ? u.slice(0, o) : u;} : \"0\".split(void 0, 0).length ? function (e, n) {return void 0 === e && 0 === n ? [] : t.call(this, e, n);} : t, [function (t, n) {var o = d(this),i = null == t ? void 0 : t[e];return void 0 !== i ? i.call(t, o, n) : r.call(String(o), t, n);}, function (e, o) {var i = n(r, e, this, o, r !== t);if (i.done) return i.value;var s = D(e),a = String(this),u = Ao(s, RegExp),c = s.unicode,l = (s.ignoreCase ? \"i\" : \"\") + (s.multiline ? \"m\" : \"\") + (s.unicode ? \"u\" : \"\") + (ey ? \"y\" : \"g\"),p = new u(ey ? s : \"^(?:\" + s.source + \")\", l),f = void 0 === o ? 4294967295 : o >>> 0;if (0 === f) return [];if (0 === a.length) return null === gs(p, a) ? [a] : [];for (var h = 0, d = 0, g = []; d < a.length;) {p.lastIndex = ey ? d : 0;var m,v = gs(p, ey ? a : a.slice(d));if (null === v || (m = Zv(ae(p.lastIndex + (ey ? 0 : d)), a.length)) === h) d = ds(a, d, c);else {if (g.push(a.slice(h, d)), g.length === f) return g;for (var y = 1; y <= v.length - 1; y++) {if (g.push(v[y]), g.length === f) return g;}d = h = m;}}return g.push(a.slice(h)), g;}];}, !ey);var ty,ny = T.f,ry = \"\".startsWith,oy = Math.min,iy = is(\"startsWith\"),sy = !(iy || (ty = ny(String.prototype, \"startsWith\"), !ty || ty.writable));Re({ target: \"String\", proto: !0, forced: !sy && !iy }, { startsWith: function startsWith(e) {var t = String(d(this));rs(e);var n = ae(oy(arguments.length > 1 ? arguments[1] : void 0, t.length)),r = String(e);return ry ? ry.call(t, r, n) : t.slice(n, n + r.length) === r;} });var ay = function () {function e(t) {if (An(this, e), void 0 === t) throw new Mp({ code: Sp.MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS, message: Lp });if (void 0 === t.tim) throw new Mp({ code: Sp.MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS, message: \"\".concat(Lp, \".tim\") });this.list = new Map(), this.tim = t.tim, this._initializeOptions(t);}return Rn(e, [{ key: \"getLocalOldestMessageByConversationID\", value: function value(e) {if (!e) return null;if (!this.list.has(e)) return null;var t = this.list.get(e).values();return t ? t.next().value : null;} }, { key: \"_initializeOptions\", value: function value(e) {this.options = {};var t = { memory: { maxDatasPerKey: 100, maxBytesPerData: 256, maxKeys: 0 }, cache: { maxDatasPerKey: 10, maxBytesPerData: 256, maxKeys: 0 } };for (var n in t) {if (Object.prototype.hasOwnProperty.call(t, n)) {if (void 0 === e[n]) {this.options[n] = t[n];continue;}var r = t[n];for (var o in r) {if (Object.prototype.hasOwnProperty.call(r, o)) {if (void 0 === e[n][o]) {this.options[n][o] = r[o];continue;}this.options[n][o] = e[n][o];}}}}} }, { key: \"pushIn\", value: function value(e) {var t = e.conversationID,n = e.ID,r = !0;return this.list.has(t) || this.list.set(t, new Map()), this.list.has(t) && this.list.get(t).has(n) ? r = !1 : this.list.get(t).set(n, e), r;} }, { key: \"unshift\", value: function value(e) {ma(e) ? e.length > 0 && this._unshiftMultipleMessages(e) : this._unshiftSingleMessage(e);} }, { key: \"_unshiftSingleMessage\", value: function value(e) {var t = e.conversationID,n = e.ID;if (!this.list.has(t)) return this.list.set(t, new Map()), void this.list.get(t).set(n, e);var r = Array.from(this.list.get(t));r.unshift([n, e]), this.list.set(t, new Map(r));} }, { key: \"_unshiftMultipleMessages\", value: function value(e) {for (var t = e.length, n = [], r = e[0].conversationID, o = this.list.has(r) ? Array.from(this.list.get(r)) : [], i = 0; i < t; i++) {n.push([e[i].ID, e[i]]);}this.list.set(r, new Map(n.concat(o)));} }, { key: \"remove\", value: function value(e) {var t = e.conversationID,n = e.ID;this.list.has(t) && this.list.get(t).delete(n);} }, { key: \"revoke\", value: function value(e, t, n) {if (la.debug(\"revoke message\", e, t, n), this.list.has(e)) {var r,o = Yn(this.list.get(e));try {for (o.s(); !(r = o.n()).done;) {var i = Bn(r.value, 2)[1];if (i.sequence === t && !i.isRevoked && (va(n) || i.random === n)) return i.isRevoked = !0, i;}} catch (s) {o.e(s);} finally {o.f();}}return null;} }, { key: \"removeByConversationID\", value: function value(e) {this.list.has(e) && this.list.delete(e);} }, { key: \"updateMessageIsPeerReadProperty\", value: function value(e, t) {var n = [];if (this.list.has(e)) {var r,o = Yn(this.list.get(e));try {for (o.s(); !(r = o.n()).done;) {var i = Bn(r.value, 2)[1];i.time <= t && !i.isPeerRead && \"out\" === i.flow && (i.isPeerRead = !0, n.push(i));}} catch (s) {o.e(s);} finally {o.f();}la.log(\"MessagesList.updateMessageIsPeerReadProperty conversationID=\".concat(e, \" peerReadTime=\").concat(t, \" count=\").concat(n.length));}return n;} }, { key: \"hasLocalMessageList\", value: function value(e) {return this.list.has(e);} }, { key: \"getLocalMessageList\", value: function value(e) {return this.hasLocalMessageList(e) ? jn(this.list.get(e).values()) : [];} }, { key: \"hasLocalMessage\", value: function value(e, t) {return !!this.hasLocalMessageList(e) && this.list.get(e).has(t);} }, { key: \"getLocalMessage\", value: function value(e, t) {return this.hasLocalMessage(e, t) ? this.list.get(e).get(t) : null;} }, { key: \"reset\", value: function value() {this.list.clear();} }]), e;}(),uy = function () {function e(t) {An(this, e), this.tim = t;}return Rn(e, [{ key: \"setMessageRead\", value: function value(e) {var t = e.conversationID,n = e.messageID,r = this.tim.conversationController.getLocalConversation(t);if (la.log(\"ReadReportHandler.setMessageRead conversationID=\".concat(t, \" unreadCount=\").concat(r ? r.unreadCount : 0)), !r || 0 === r.unreadCount) return od();var o = n ? this.tim.messageController.getLocalMessage(t, n) : null;switch (r.type) {case pn.CONV_C2C:return this._setC2CMessageRead({ conversationID: t, lastMessageTime: o ? o.time : r.lastMessage.lastTime });case pn.CONV_GROUP:return this._setGroupMessageRead({ conversationID: t, lastMessageSeq: o ? o.sequence : r.lastMessage.lastSequence });case pn.CONV_SYSTEM:return r.unreadCount = 0, od();default:return od();}} }, { key: \"_setC2CMessageRead\", value: function value(e) {var t = this,n = e.conversationID,r = e.lastMessageTime;la.log(\"ReadReportHandler._setC2CMessageRead conversationID=\".concat(n, \" lastMessageTime=\").concat(r)), fa(r) || la.warn(\"ReadReportHandler._setC2CMessageRead 请勿修改 Conversation.lastMessage.lastTime，否则可能会导致已读上报结果不准确\");var o = new ad();return o.setMethod(Ed).setText(\"\".concat(n, \"-\").concat(r)).setStart(), this.tim.messageController.request({ name: \"conversation\", action: \"setC2CMessageRead\", param: { C2CMsgReaded: { cookie: \"\", C2CMsgReadedItem: [{ toAccount: n.replace(\"C2C\", \"\"), lastMessageTime: r, receipt: 1 }] } } }).then(function () {return o.setCode(0).setNetworkType(t.tim.netMonitor.getNetworkType()).setEnd(), la.log(\"ReadReportHandler._setC2CMessageRead ok.\"), t._updateIsReadAfterReadReport({ conversationID: n, lastMessageTime: r }), t._updateUnreadCount(n), new td();}).catch(function (e) {return t.tim.netMonitor.probe().then(function (t) {var n = Bn(t, 2),r = n[0],i = n[1];o.setError(e, r, i).setEnd();}), la.log(\"ReadReportHandler._setC2CMessageRead failed. \".concat(Da(e))), id(e);});} }, { key: \"_setGroupMessageRead\", value: function value(e) {var t = this,n = e.conversationID,r = e.lastMessageSeq;la.log(\"ReadReportHandler._setGroupMessageRead conversationID=\".concat(n, \" lastMessageSeq=\").concat(r)), fa(r) || la.warn(\"ReadReportHandler._setGroupMessageRead 请勿修改 Conversation.lastMessage.lastSequence，否则可能会导致已读上报结果不准确\");var o = new ad();return o.setMethod(Cd).setText(\"\".concat(n, \"-\").concat(r)).setStart(), this.tim.messageController.request({ name: \"conversation\", action: \"setGroupMessageRead\", param: { groupID: n.replace(\"GROUP\", \"\"), messageReadSeq: r } }).then(function () {return o.setCode(0).setNetworkType(t.tim.netMonitor.getNetworkType()).setEnd(), la.log(\"ReadReportHandler._setGroupMessageRead ok.\"), t._updateIsReadAfterReadReport({ conversationID: n, lastMessageSeq: r }), t._updateUnreadCount(n), new td();}).catch(function (e) {return t.tim.netMonitor.probe().then(function (t) {var n = Bn(t, 2),r = n[0],i = n[1];o.setError(e, r, i).setEnd();}), la.log(\"ReadReportHandler._setGroupMessageRead failed. \".concat(Da(e))), id(e);});} }, { key: \"_updateUnreadCount\", value: function value(e) {var t = this.tim,n = t.conversationController,r = t.messageController,o = n.getLocalConversation(e),i = r.getLocalMessageList(e);o && (o.unreadCount = i.filter(function (e) {return !e.isRead;}).length, la.log(\"ReadReportHandler._updateUnreadCount conversationID=\".concat(o.conversationID, \" unreadCount=\").concat(o.unreadCount)));} }, { key: \"_updateIsReadAfterReadReport\", value: function value(e) {var t = e.conversationID,n = e.lastMessageSeq,r = e.lastMessageTime,o = this.tim.messageController.getLocalMessageList(t);if (0 !== o.length) for (var i, s = o.length - 1; s >= 0; s--) {if (i = o[s], !(r && i.time > r || n && i.sequence > n)) {if (\"in\" === i.flow && i.isRead) break;i.setIsRead(!0);}}} }, { key: \"updateIsRead\", value: function value(e) {var t = this.tim,n = t.conversationController,r = t.messageController,o = n.getLocalConversation(e),i = r.getLocalMessageList(e);if (o && 0 !== i.length && !Fa(o.type)) {for (var s = [], a = 0; a < i.length; a++) {\"in\" !== i[a].flow ? \"out\" !== i[a].flow || i[a].isRead || i[a].setIsRead(!0) : s.push(i[a]);}var u = 0;if (o.type === pn.CONV_C2C) {var c = s.slice(-o.unreadCount).filter(function (e) {return e.isRevoked;}).length;u = s.length - o.unreadCount - c;} else u = s.length - o.unreadCount;for (var l = 0; l < u && !s[l].isRead; l++) {s[l].setIsRead(!0);}}} }]), e;}(),cy = Ke.findIndex,ly = !0,py = ze(\"findIndex\");\"findIndex\" in [] && Array(1).findIndex(function () {ly = !1;}), Re({ target: \"Array\", proto: !0, forced: ly || !py }, { findIndex: function findIndex(e) {return cy(this, e, arguments.length > 1 ? arguments[1] : void 0);} }), ir(\"findIndex\");var fy = function () {function e(t) {var n = t.tim,r = t.messageController;An(this, e), this.tim = n, this.messageController = r, this.completedMap = new Map(), this._initListener();}return Rn(e, [{ key: \"getMessageList\", value: function value(e) {var t = this,n = e.conversationID,r = e.nextReqMessageID,o = e.count;if (this.tim.groupController.checkJoinedAVChatRoomByID(n.replace(\"GROUP\", \"\"))) return la.log(\"GetMessageHandler.getMessageList not available in avchatroom. conversationID=\".concat(n)), od({ messageList: [], nextReqMessageID: \"\", isCompleted: !0 });(va(o) || o > 15) && (o = 15);var i = this._computeLeftCount({ conversationID: n, nextReqMessageID: r });return la.log(\"GetMessageHandler.getMessageList. conversationID=\".concat(n, \" leftCount=\").concat(i, \" count=\").concat(o, \" nextReqMessageID=\").concat(r)), this._needGetHistory({ conversationID: n, leftCount: i, count: o }) ? this.messageController.getHistoryMessages({ conversationID: n, count: 20 }).then(function () {return i = t._computeLeftCount({ conversationID: n, nextReqMessageID: r }), new td(t._computeResult({ conversationID: n, nextReqMessageID: r, count: o, leftCount: i }));}) : (la.log(\"GetMessageHandler.getMessageList. get messagelist from memory\"), od(this._computeResult({ conversationID: n, nextReqMessageID: r, count: o, leftCount: i })));} }, { key: \"setCompleted\", value: function value(e) {la.log(\"GetMessageHandler.setCompleted. conversationID=\".concat(e)), this.completedMap.set(e, !0);} }, { key: \"deleteCompletedItem\", value: function value(e) {la.log(\"GetMessageHandler.deleteCompletedItem. conversationID=\".concat(e)), this.completedMap.delete(e);} }, { key: \"_initListener\", value: function value() {var e = this;this.tim.innerEmitter.on(xh, function () {e.setCompleted(pn.CONV_SYSTEM);}), this.tim.innerEmitter.on(Gh, function (t) {var n = t.data;e.setCompleted(\"\".concat(pn.CONV_GROUP).concat(n));});} }, { key: \"_getMessageListSize\", value: function value(e) {return this.messageController.getLocalMessageList(e).length;} }, { key: \"_needGetHistory\", value: function value(e) {var t = e.conversationID,n = e.leftCount,r = e.count,o = this.tim.conversationController.getLocalConversation(t),i = !!o && o.type === pn.CONV_SYSTEM,s = !!o && o.subType === pn.GRP_AVCHATROOM;return !i && !s && n < r && !this.completedMap.has(t);} }, { key: \"_computeResult\", value: function value(e) {var t = e.conversationID,n = e.nextReqMessageID,r = e.count,o = e.leftCount,i = this._computeMessageList({ conversationID: t, nextReqMessageID: n, count: r }),s = this._computeIsCompleted({ conversationID: t, leftCount: o, count: r }),a = this._computeNextReqMessageID({ messageList: i, isCompleted: s, conversationID: t });return la.log(\"GetMessageHandler._computeResult. conversationID=\".concat(t, \" leftCount=\").concat(o, \" count=\").concat(r, \" nextReqMessageID=\").concat(a, \" nums=\").concat(i.length, \" isCompleted=\").concat(s)), { messageList: i, nextReqMessageID: a, isCompleted: s };} }, { key: \"_computeNextReqMessageID\", value: function value(e) {var t = e.messageList,n = e.isCompleted,r = e.conversationID;if (!n) return 0 === t.length ? \"\" : t[0].ID;var o = this.messageController.getLocalMessageList(r);return 0 === o.length ? \"\" : o[0].ID;} }, { key: \"_computeMessageList\", value: function value(e) {var t = e.conversationID,n = e.nextReqMessageID,r = e.count,o = this.messageController.getLocalMessageList(t),i = this._computeIndexEnd({ nextReqMessageID: n, messageList: o }),s = this._computeIndexStart({ indexEnd: i, count: r });return o.slice(s, i);} }, { key: \"_computeIndexEnd\", value: function value(e) {var t = e.messageList,n = void 0 === t ? [] : t,r = e.nextReqMessageID;return r ? n.findIndex(function (e) {return e.ID === r;}) : n.length;} }, { key: \"_computeIndexStart\", value: function value(e) {var t = e.indexEnd,n = e.count;return t > n ? t - n : 0;} }, { key: \"_computeLeftCount\", value: function value(e) {var t = e.conversationID,n = e.nextReqMessageID;return n ? this.messageController.getLocalMessageList(t).findIndex(function (e) {return e.ID === n;}) : this._getMessageListSize(t);} }, { key: \"_computeIsCompleted\", value: function value(e) {var t = e.conversationID;return !!(e.leftCount <= e.count && this.completedMap.has(t));} }, { key: \"reset\", value: function value() {la.log(\"GetMessageHandler.reset\"), this.completedMap.clear();} }]), e;}(),hy = function e(t) {An(this, e), this.value = t, this.next = null;},dy = function () {function e(t) {An(this, e), this.MAX_LENGTH = t, this.pTail = null, this.pNodeToDel = null, this.map = new Map(), la.log(\"SinglyLinkedList init MAX_LENGTH=\".concat(this.MAX_LENGTH));}return Rn(e, [{ key: \"pushIn\", value: function value(e) {var t = new hy(e);if (this.map.size < this.MAX_LENGTH) null === this.pTail ? (this.pTail = t, this.pNodeToDel = t) : (this.pTail.next = t, this.pTail = t), this.map.set(e, 1);else {var n = this.pNodeToDel;this.pNodeToDel = this.pNodeToDel.next, this.map.delete(n.value), n.next = null, n = null, this.pTail.next = t, this.pTail = t, this.map.set(e, 1);}} }, { key: \"has\", value: function value(e) {return this.map.has(e);} }, { key: \"tail\", value: function value() {return this.pTail;} }, { key: \"size\", value: function value() {return this.map.size;} }, { key: \"data\", value: function value() {return Array.from(this.map.keys());} }, { key: \"reset\", value: function value() {for (var e; null !== this.pNodeToDel;) {e = this.pNodeToDel, this.pNodeToDel = this.pNodeToDel.next, e.next = null, e = null;}this.pTail = null, this.map.clear();} }]), e;}(),gy = function () {function e(t) {An(this, e), this.tim = t;}return Rn(e, [{ key: \"upload\", value: function value(e) {switch (e.type) {case pn.MSG_IMAGE:return this._uploadImage(e);case pn.MSG_FILE:return this._uploadFile(e);case pn.MSG_AUDIO:return this._uploadAudio(e);case pn.MSG_VIDEO:return this._uploadVideo(e);default:return Promise.resolve();}} }, { key: \"_uploadImage\", value: function value(e) {var t = this.tim,n = t.uploadController,r = t.messageController,o = e.getElements()[0],i = r.getMessageOptionByID(e.messageID);return n.uploadImage({ file: i.payload.file, to: i.to, onProgress: function onProgress(e) {if (o.updatePercent(e), _a(i.onProgress)) try {i.onProgress(e);} catch (t) {return id(new Mp({ code: Sp.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: \"\".concat(Up) }));}} }).then(function (e) {var t,n = e.location,r = e.fileType,i = e.fileSize,s = Pa(n);return o.updateImageFormat(r), o.updateImageInfoArray({ size: i, url: s }), t = o._imageMemoryURL, Ns ? new Promise(function (e, n) {wx.getImageInfo({ src: t, success: function success(t) {e({ width: t.width, height: t.height });}, fail: function fail() {e({ width: 0, height: 0 });} });}) : Fs && 9 === Vs ? Promise.resolve({ width: 0, height: 0 }) : new Promise(function (e, n) {var r = new Image();r.onload = function () {e({ width: this.width, height: this.height }), r = null;}, r.onerror = function () {e({ width: 0, height: 0 }), r = null;}, r.src = t;});}).then(function (t) {var n = t.width,r = t.height;return o.updateImageInfoArray({ width: n, height: r }), e;});} }, { key: \"_uploadFile\", value: function value(e) {var t = this.tim,n = t.uploadController,r = t.messageController,o = e.getElements()[0],i = r.getMessageOptionByID(e.messageID);return n.uploadFile({ file: i.payload.file, to: i.to, onProgress: function onProgress(e) {if (o.updatePercent(e), _a(i.onProgress)) try {i.onProgress(e);} catch (t) {return id(new Mp({ code: Sp.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: \"\".concat(Up) }));}} }).then(function (t) {var n = t.location,r = Pa(n);return o.updateFileUrl(r), e;});} }, { key: \"_uploadAudio\", value: function value(e) {var t = this.tim,n = t.uploadController,r = t.messageController,o = e.getElements()[0],i = r.getMessageOptionByID(e.messageID);return n.uploadAudio({ file: i.payload.file, to: i.to, onProgress: function onProgress(e) {if (o.updatePercent(e), _a(i.onProgress)) try {i.onProgress(e);} catch (t) {return id(new Mp({ code: Sp.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: \"\".concat(Up) }));}} }).then(function (t) {var n = t.location,r = Pa(n);return o.updateAudioUrl(r), e;});} }, { key: \"_uploadVideo\", value: function value(e) {var t = this.tim,n = t.uploadController,r = t.messageController,o = e.getElements()[0],i = r.getMessageOptionByID(e.messageID);return n.uploadVideo({ file: i.payload.file, to: i.to, onProgress: function onProgress(e) {if (o.updatePercent(e), _a(i.onProgress)) try {i.onProgress(e);} catch (t) {return id(new Mp({ code: Sp.MESSAGE_ONPROGRESS_FUNCTION_ERROR, message: \"\".concat(Up) }));}} }).then(function (t) {var n = Pa(t.location);return o.updateVideoUrl(n), e;});} }]), e;}(),my = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e))._initializeMembers(), r._initializeListener(), r._initialzeHandlers(), r.messageOptionMap = new Map(), r;}return Rn(n, [{ key: \"_initializeMembers\", value: function value() {this.messagesList = new ay({ tim: this.tim }), this.currentMessageKey = {}, this.singlyLinkedList = new dy(100), this._peerReadTimeMap = new Map();} }, { key: \"_initialzeHandlers\", value: function value() {this.readReportHandler = new uy(this.tim, this), this.getMessageHandler = new fy({ messageController: this, tim: this.tim }), this.uploadFileHandler = new gy(this.tim);} }, { key: \"reset\", value: function value() {this.messagesList.reset(), this.currentMessageKey = {}, this.getMessageHandler.reset(), this.singlyLinkedList.reset(), this._peerReadTimeMap.clear(), this.messageOptionMap.clear();} }, { key: \"_initializeListener\", value: function value() {var e = this.tim.innerEmitter;e.on(dh, this._onReceiveC2CMessage, this), e.on(Qf, this._onSyncMessagesProcessing, this), e.on(Zf, this._onSyncMessagesFinished, this), e.on(gh, this._onReceiveGroupMessage, this), e.on(mh, this._onReceiveGroupTips, this), e.on(vh, this._onReceiveSystemNotice, this), e.on(Eh, this._onReceiveGroupMessageRevokedNotice, this), e.on(Ch, this._onReceiveC2CMessageRevokedNotice, this), e.on(Mh, this._onC2CMessageReadReceipt, this), e.on(bh, this._clearConversationMessages, this);} }, { key: \"sendMessageInstance\", value: function value(e, t) {var n,r = this,o = null;switch (e.conversationType) {case pn.CONV_C2C:o = this._handleOnSendC2CMessageSuccess.bind(this);break;case pn.CONV_GROUP:o = this._handleOnSendGroupMessageSuccess.bind(this);break;default:return id(new Mp({ code: Sp.MESSAGE_SEND_INVALID_CONVERSATION_TYPE, message: Pp }));}return this.singlyLinkedList.pushIn(e.random), this.uploadFileHandler.upload(e).then(function () {var o = null;return e.isSendable() ? e.conversationType !== pn.CONV_GROUP || r.tim.groupController.hasLocalGroup(e.to) ? (r._addSendMessageTotalCount(e), n = Date.now(), e.conversationType === pn.CONV_C2C ? o = r._createC2CMessagePack(e, t) : e.conversationType === pn.CONV_GROUP && (o = r._createGroupMessagePack(e, t)), r.request(o)) : (la.warn(\"MessageController.sendMessageInstance failed. userId=\".concat(e.from, \" 未加入群 groupID=\").concat(e.to, \"。发消息前先使用 joinGroup 接口申请加群，详细请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#joinGroup\")), id(new Mp({ code: Sp.MESSAGE_SEND_FAIL, message: Np }))) : id({ code: Sp.MESSAGE_FILE_URL_IS_EMPTY, message: Xp });}).then(function (t) {return r._addSendMessageSuccessCount(e, n), e.conversationType === pn.CONV_GROUP && (e.sequence = t.data.sequence, e.time = t.data.time, e.generateMessageID(r.tim.context.identifier)), r.messagesList.pushIn(e), o(e, t.data), r.messageOptionMap.delete(e.messageID), r.emitInnerEvent(eh, { eventDataList: [{ conversationID: e.conversationID, unreadCount: 0, type: e.conversationType, subType: e.conversationSubType, lastMessage: e }] }), new td({ message: e });}).catch(function (t) {e.status = Uu.FAIL;var n = new ad();return n.setMethod(vd).setMessageType(e.type).setText(\"\".concat(r._generateTjgID(e), \"-\").concat(e.type, \"-\").concat(e.from, \"-\").concat(e.to)).setStart(), r.probeNetwork().then(function (e) {var r = Bn(e, 2),o = r[0],i = r[1];n.setError(t, o, i).setEnd();}), la.error(\"MessageController.sendMessageInstance error:\", t), id(new Mp({ code: t && t.code ? t.code : Sp.MESSAGE_SEND_FAIL, message: t && t.message ? t.message : Np, data: { message: e } }));});} }, { key: \"_getSendMessageSpecifiedKey\", value: function value(e) {if (e.conversationType === pn.CONV_C2C) return sd.SEND_MESSAGE_C2C;if (e.conversationType === pn.CONV_GROUP) {var t = this.tim.groupController.getLocalGroupProfile(e.to).type;if (function (e) {return e === pn.GRP_WORK;}(t)) return sd.SEND_MESSAGE_GROUP_WORK;if (Ua(t)) return sd.SEND_MESSAGE_GROUP_PUBLIC;if (xa(t)) return sd.SEND_MESSAGE_GROUP_MEETING;if (qa(t)) return sd.SEND_MESSAGE_GROUP_AV;}} }, { key: \"_addSendMessageTotalCount\", value: function value(e) {var t = this.tim.sumStatController;t.addTotalCount(sd.SEND_MESSAGE);var n = this._getSendMessageSpecifiedKey(e);t.addTotalCount(n);} }, { key: \"_addSendMessageSuccessCount\", value: function value(e, t) {var n = this.tim.sumStatController,r = Math.abs(Date.now() - t);n.addSuccessCount(sd.SEND_MESSAGE), n.addCost(sd.SEND_MESSAGE, r);var o = this._getSendMessageSpecifiedKey(e);n.addSuccessCount(o), n.addCost(o, r);} }, { key: \"resendMessage\", value: function value(e) {return e.isResend = !0, e.status = Uu.UNSEND, this.sendMessageInstance(e);} }, { key: \"_isFileLikeMessage\", value: function value(e) {return [pn.MSG_IMAGE, pn.MSG_FILE, pn.MSG_AUDIO, pn.MSG_VIDEO].indexOf(e.type) >= 0;} }, { key: \"_resendBinaryTypeMessage\", value: function value() {} }, { key: \"_canIUseOnlineOnlyFlag\", value: function value(e) {var t = this.tim.groupController.getJoinedAVChatRoom();return !t || !t.includes(e.to) || e.conversationType !== pn.CONV_GROUP;} }, { key: \"_createC2CMessagePack\", value: function value(e, t) {var n = 0,r = null;return t && (t.offlinePushInfo && (r = t.offlinePushInfo), !0 === t.onlineUserOnly && (n = 1, r ? r.disablePush = !0 : r = { disablePush: !0 })), { name: \"c2cMessage\", action: \"create\", tjgID: this._generateTjgID(e), param: { toAccount: e.to, msgBody: e.getElements(), msgSeq: e.sequence, msgRandom: e.random, msgLifeTime: this._canIUseOnlineOnlyFlag(e) && n ? 0 : void 0, offlinePushInfo: r ? { pushFlag: !0 === r.disablePush ? 1 : 0, title: r.title || \"\", desc: r.description || \"\", ext: r.extension || \"\", apnsInfo: { badgeMode: !0 === r.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: r.androidOPPOChannelID || \"\" } } : void 0 } };} }, { key: \"_handleOnSendC2CMessageSuccess\", value: function value(e, t) {e.status = Uu.SUCCESS, e.time = t.time;} }, { key: \"_createGroupMessagePack\", value: function value(e, t) {var n = 0,r = null;return t && (!0 === t.onlineUserOnly && (n = 1), t.offlinePushInfo && (r = t.offlinePushInfo)), { name: \"groupMessage\", action: \"create\", tjgID: this._generateTjgID(e), param: { groupID: e.to, msgBody: e.getElements(), random: e.random, priority: e.priority, clientSequence: e.clientSequence, onlineOnlyFlag: this._canIUseOnlineOnlyFlag(e) ? n : 0, offlinePushInfo: r ? { pushFlag: !0 === r.disablePush ? 1 : 0, title: r.title || \"\", desc: r.description || \"\", ext: r.extension || \"\", apnsInfo: { badgeMode: !0 === r.ignoreIOSBadge ? 1 : 0 }, androidInfo: { OPPOChannelID: r.androidOPPOChannelID || \"\" } } : void 0 } };} }, { key: \"_handleOnSendGroupMessageSuccess\", value: function value(e, t) {e.sequence = t.sequence, e.time = t.time, e.status = Uu.SUCCESS;} }, { key: \"_onReceiveC2CMessage\", value: function value(e) {la.debug(\"MessageController._onReceiveC2CMessage nums=\".concat(e.data.length));var t = Date.now(),n = this._newC2CMessageStoredAndSummary({ notifiesList: e.data, type: pn.CONV_C2C, C2CRemainingUnreadList: e.C2CRemainingUnreadList }),r = n.eventDataList,o = n.result;if (r.length > 0 && this.emitInnerEvent(rh, { eventDataList: r, result: o }), o.length > 0) {var i = this.tim.sumStatController;i.addTotalCount(sd.MESSAGE_RECEIVED), i.addSuccessCount(sd.MESSAGE_RECEIVED), i.addCost(sd.MESSAGE_RECEIVED, Date.now() - t), this.emitOuterEvent(ln.MESSAGE_RECEIVED, o);}} }, { key: \"_onReceiveGroupMessage\", value: function value(e) {la.debug(\"MessageController._onReceiveGroupMessage nums=\".concat(e.data.length));var t = Date.now(),n = this.newGroupMessageStoredAndSummary(e.data),r = n.eventDataList,o = n.result;if (r.length > 0 && this.emitInnerEvent(oh, { eventDataList: r, result: o, isGroupTip: !1 }), o.length > 0) {var i = this.tim.sumStatController;i.addTotalCount(sd.MESSAGE_RECEIVED), i.addSuccessCount(sd.MESSAGE_RECEIVED), i.addCost(sd.MESSAGE_RECEIVED, Date.now() - t), this.emitOuterEvent(ln.MESSAGE_RECEIVED, o);}} }, { key: \"_onReceiveGroupTips\", value: function value(e) {var t = Date.now(),n = e.data;la.debug(\"MessageController._onReceiveGroupTips nums=\".concat(n.length));var r = this.newGroupTipsStoredAndSummary(n),o = r.eventDataList,i = r.result;if (o.length > 0 && this.emitInnerEvent(oh, { eventDataList: o, result: i, isGroupTip: !0 }), i.length > 0) {var s = this.tim.sumStatController;s.addTotalCount(sd.MESSAGE_RECEIVED), s.addSuccessCount(sd.MESSAGE_RECEIVED), s.addCost(sd.MESSAGE_RECEIVED, Date.now() - t), this.emitOuterEvent(ln.MESSAGE_RECEIVED, i);}} }, { key: \"_onReceiveSystemNotice\", value: function value(e) {var t = Date.now(),n = e.data,r = n.groupSystemNotices,o = n.type;la.debug(\"MessageController._onReceiveSystemNotice nums=\".concat(r.length));var i = this.newSystemNoticeStoredAndSummary({ notifiesList: r, type: o }),s = i.eventDataList,a = i.result;if (s.length > 0 && this.emitInnerEvent(ih, { eventDataList: s, result: a, type: o }), a.length > 0 && \"poll\" === o) {var u = this.tim.sumStatController;u.addTotalCount(sd.MESSAGE_RECEIVED), u.addSuccessCount(sd.MESSAGE_RECEIVED), u.addCost(sd.MESSAGE_RECEIVED, Date.now() - t), this.emitOuterEvent(ln.MESSAGE_RECEIVED, a);}} }, { key: \"_onReceiveGroupMessageRevokedNotice\", value: function value(e) {var t = this;la.debug(\"MessageController._onReceiveGroupMessageRevokedNotice nums=\".concat(e.data.length));var n = [],r = null;e.data.forEach(function (e) {e.elements.revokedInfos.forEach(function (e) {(r = t.messagesList.revoke(\"GROUP\".concat(e.groupID), e.sequence)) && n.push(r);});}), 0 !== n.length && (this.emitInnerEvent(sh, n), this.emitOuterEvent(ln.MESSAGE_REVOKED, n));} }, { key: \"_onReceiveC2CMessageRevokedNotice\", value: function value(e) {var t = this;la.debug(\"MessageController._onReceiveC2CMessageRevokedNotice nums=\".concat(e.data.length));var n = [],r = null;e.data.forEach(function (e) {e.c2cMessageRevokedNotify.revokedInfos.forEach(function (e) {var o = t.tim.context.identifier === e.from ? \"C2C\".concat(e.to) : \"C2C\".concat(e.from);(r = t.messagesList.revoke(o, e.sequence, e.random)) && n.push(r);});}), 0 !== n.length && (this.emitInnerEvent(sh, n), this.emitOuterEvent(ln.MESSAGE_REVOKED, n));} }, { key: \"_onC2CMessageReadReceipt\", value: function value(e) {var t = this;e.data.forEach(function (e) {var n = e.c2cMessageReadReceipt.to;e.c2cMessageReadReceipt.uinPairReadArray.forEach(function (e) {var r = e.peerReadTime;la.debug(\"MessageController._onC2CMessageReadReceipt to=\".concat(n, \" peerReadTime=\").concat(r));var o = \"C2C\".concat(n);t.recordPeerReadTime(o, r), t._updateMessageIsPeerReadProperty(o, r);});});} }, { key: \"_updateMessageIsPeerReadProperty\", value: function value(e, t) {if (e.startsWith(pn.CONV_C2C) && t > 0) {var n = this.messagesList.updateMessageIsPeerReadProperty(e, t);n.length > 0 && this.emitOuterEvent(ln.MESSAGE_READ_BY_PEER, n);}} }, { key: \"getPeerReadTime\", value: function value(e) {var t = this;if (!ja(e)) {var n = new ad();return n.setMethod(Sd).setStart(), la.log(\"MessageController.getPeerReadTime userIDList:\".concat(e)), this.request({ name: \"c2cPeerReadTime\", action: \"get\", param: { userIDList: e } }).then(function (r) {var o = r.data.peerReadTimeList;la.log(\"MessageController.getPeerReadTime ok. peerReadTimeList:\".concat(o));for (var i = \"\", s = 0; s < e.length; s++) {i += \"\".concat(e[s], \"-\").concat(o[s], \" \"), o[s] > 0 && t.recordPeerReadTime(\"C2C\".concat(e[s]), o[s]);}n.setCode(0).setNetworkType(t.getNetworkType()).setText(i).setEnd();}).catch(function (e) {t.probeNetwork().then(function (t) {var r = Bn(t, 2),o = r[0],i = r[1];n.setError(e, o, i).setEnd();}), la.warn(\"MessageController.getPeerReadTime failed. error:\", e);});}} }, { key: \"recordPeerReadTime\", value: function value(e, t) {this._peerReadTimeMap.has(e) ? this._peerReadTimeMap.get(e) < t && this._peerReadTimeMap.set(e, t) : this._peerReadTimeMap.set(e, t);} }, { key: \"_clearConversationMessages\", value: function value(e) {var t = e.data;this.messagesList.removeByConversationID(t), this.getMessageHandler.deleteCompletedItem(t);} }, { key: \"_pushIntoNoticeResult\", value: function value(e, t) {return !(!this.messagesList.pushIn(t) || this.singlyLinkedList.has(t.random)) && (e.push(t), !0);} }, { key: \"_newC2CMessageStoredAndSummary\", value: function value(e) {for (var t = e.notifiesList, n = e.type, r = e.C2CRemainingUnreadList, o = e.isFromSync, i = null, s = [], a = [], u = {}, c = this.tim.bigDataHallwayController, l = 0, p = t.length; l < p; l++) {var f = t[l];if (f.currentUser = this.tim.context.identifier, f.conversationType = n, f.isSystemMessage = !!f.isSystemMessage, i = new Uf(f), f.elements = c.parseElements(f.elements, f.from), i.setElement(f.elements), !o) if (!this._pushIntoNoticeResult(a, i)) continue;void 0 === u[i.conversationID] ? u[i.conversationID] = s.push({ conversationID: i.conversationID, unreadCount: \"out\" === i.flow ? 0 : 1, type: i.conversationType, subType: i.conversationSubType, lastMessage: i }) - 1 : (s[u[i.conversationID]].type = i.conversationType, s[u[i.conversationID]].subType = i.conversationSubType, s[u[i.conversationID]].lastMessage = i, \"in\" === i.flow && s[u[i.conversationID]].unreadCount++);}if (ma(r)) for (var h = function h(e, t) {var n = s.find(function (t) {return t.conversationID === \"C2C\".concat(r[e].from);});n ? n.unreadCount += r[e].count : s.push({ conversationID: \"C2C\".concat(r[e].from), unreadCount: r[e].count, type: pn.CONV_C2C, lastMsgTime: r[e].lastMsgTime });}, d = 0, g = r.length; d < g; d++) {h(d);}return { eventDataList: s, result: a };} }, { key: \"newGroupMessageStoredAndSummary\", value: function value(e) {var t = null,n = [],r = {},o = [],i = pn.CONV_GROUP,s = this.tim.bigDataHallwayController,a = e.length;a > 1 && e.sort(function (e, t) {return e.sequence - t.sequence;});for (var u = 0; u < a; u++) {var c = e[u];if (c.currentUser = this.tim.context.identifier, c.conversationType = i, c.isSystemMessage = !!c.isSystemMessage, t = new Uf(c), c.elements = s.parseElements(c.elements, c.from), t.setElement(c.elements), !this._isMessageFromAVChatroom(t)) this._pushIntoNoticeResult(o, t) && (void 0 === r[t.conversationID] ? r[t.conversationID] = n.push({ conversationID: t.conversationID, unreadCount: \"out\" === t.flow ? 0 : 1, type: t.conversationType, subType: t.conversationSubType, lastMessage: t }) - 1 : (n[r[t.conversationID]].type = t.conversationType, n[r[t.conversationID]].subType = t.conversationSubType, n[r[t.conversationID]].lastMessage = t, \"in\" === t.flow && n[r[t.conversationID]].unreadCount++));}return { eventDataList: n, result: o };} }, { key: \"_isMessageFromAVChatroom\", value: function value(e) {var t = e.conversationID.slice(5);return this.tim.groupController.checkJoinedAVChatRoomByID(t);} }, { key: \"newGroupTipsStoredAndSummary\", value: function value(e) {for (var t = null, n = [], r = [], o = {}, i = 0, s = e.length; i < s; i++) {var a = e[i];if (a.currentUser = this.tim.context.identifier, a.conversationType = pn.CONV_GROUP, (t = new Uf(a)).setElement({ type: pn.MSG_GRP_TIP, content: Nn({}, a.elements, { groupProfile: a.groupProfile }) }), t.isSystemMessage = !1, !this._isMessageFromAVChatroom(t)) this._pushIntoNoticeResult(r, t) && (void 0 === o[t.conversationID] ? o[t.conversationID] = n.push({ conversationID: t.conversationID, unreadCount: \"out\" === t.flow ? 0 : 1, type: t.conversationType, subType: t.conversationSubType, lastMessage: t }) - 1 : (n[o[t.conversationID]].type = t.conversationType, n[o[t.conversationID]].subType = t.conversationSubType, n[o[t.conversationID]].lastMessage = t, \"in\" === t.flow && n[o[t.conversationID]].unreadCount++));}return { eventDataList: n, result: r };} }, { key: \"newSystemNoticeStoredAndSummary\", value: function value(e) {var t = e.notifiesList,n = e.type,r = null,o = t.length,i = 0,s = [],a = { conversationID: pn.CONV_SYSTEM, unreadCount: 0, type: pn.CONV_SYSTEM, subType: null, lastMessage: null };for (i = 0; i < o; i++) {var u = t[i];if (u.elements.operationType !== ep) u.currentUser = this.tim.context.identifier, u.conversationType = pn.CONV_SYSTEM, u.conversationID = pn.CONV_SYSTEM, (r = new Uf(u)).setElement({ type: pn.MSG_GRP_SYS_NOTICE, content: Nn({}, u.elements, { groupProfile: u.groupProfile }) }), r.isSystemMessage = !0, (1 === r.sequence && 1 === r.random || 2 === r.sequence && 2 === r.random) && (r.sequence = Ra(), r.random = Ra(), r.generateMessageID(u.currentUser), la.log(\"MessageController.newSystemNoticeStoredAndSummary sequence and random maybe duplicated, regenerate. ID=\".concat(r.ID))), this._pushIntoNoticeResult(s, r) && (\"poll\" === n ? a.unreadCount++ : \"sync\" === n && r.setIsRead(!0), a.subType = r.conversationSubType);}return a.lastMessage = s[s.length - 1], { eventDataList: s.length > 0 ? [a] : [], result: s };} }, { key: \"_onSyncMessagesProcessing\", value: function value(e) {var t = this._newC2CMessageStoredAndSummary({ notifiesList: e.data, type: pn.CONV_C2C, isFromSync: !0, C2CRemainingUnreadList: e.C2CRemainingUnreadList }),n = t.eventDataList,r = t.result;this.emitInnerEvent(th, { eventDataList: n, result: r });} }, { key: \"_onSyncMessagesFinished\", value: function value(e) {this.triggerReady();var t = this._newC2CMessageStoredAndSummary({ notifiesList: e.data.messageList, type: pn.CONV_C2C, isFromSync: !0, C2CRemainingUnreadList: e.data.C2CRemainingUnreadList }),n = t.eventDataList,r = t.result;this.emitInnerEvent(nh, { eventDataList: n, result: r });} }, { key: \"getHistoryMessages\", value: function value(e) {if (e.conversationID === pn.CONV_SYSTEM) return od();!e.count && (e.count = 15), e.count > 20 && (e.count = 20);var t = this.messagesList.getLocalOldestMessageByConversationID(e.conversationID);t || ((t = {}).time = 0, t.sequence = 0, 0 === e.conversationID.indexOf(pn.CONV_C2C) ? (t.to = e.conversationID.replace(pn.CONV_C2C, \"\"), t.conversationType = pn.CONV_C2C) : 0 === e.conversationID.indexOf(pn.CONV_GROUP) && (t.to = e.conversationID.replace(pn.CONV_GROUP, \"\"), t.conversationType = pn.CONV_GROUP));var n = \"\";switch (t.conversationType) {case pn.CONV_C2C:return n = e.conversationID.replace(pn.CONV_C2C, \"\"), this.getC2CRoamMessages({ conversationID: e.conversationID, peerAccount: n, count: e.count, lastMessageTime: void 0 === this.currentMessageKey[e.conversationID] ? 0 : t.time });case pn.CONV_GROUP:return this.getGroupRoamMessages({ conversationID: e.conversationID, groupID: t.to, count: e.count, sequence: t.sequence - 1 });default:return od();}} }, { key: \"getC2CRoamMessages\", value: function value(e) {var t = this,n = e.conversationID,r = void 0 !== this.currentMessageKey[n] ? this.currentMessageKey[n] : \"\";la.log(\"MessageController.getC2CRoamMessages toAccount=\".concat(e.peerAccount, \" count=\").concat(e.count || 15, \" lastMessageTime=\").concat(e.lastMessageTime || 0, \" messageKey=\").concat(r));var o = new ad();return o.setMethod(yd).setStart(), this.request({ name: \"c2cMessage\", action: \"query\", param: { peerAccount: e.peerAccount, count: e.count || 15, lastMessageTime: e.lastMessageTime || 0, messageKey: r } }).then(function (i) {var s = i.data,a = s.complete,u = s.messageList;va(u) ? la.log(\"MessageController.getC2CRoamMessages ok. complete=\".concat(a, \" but messageList is undefined!\")) : la.log(\"MessageController.getC2CRoamMessages ok. complete=\".concat(a, \" nums=\").concat(u.length)), o.setCode(0).setNetworkType(t.getNetworkType()).setText(\"\".concat(e.peerAccount, \"-\").concat(e.count || 15, \"-\").concat(e.lastMessageTime || 0, \"-\").concat(r, \"-\").concat(a, \"-\").concat(u ? u.length : \"undefined\")).setEnd(), 1 === a && t.getMessageHandler.setCompleted(n);var c = t._roamMessageStore(u, pn.CONV_C2C, n);t.readReportHandler.updateIsRead(n), t.currentMessageKey[n] = i.data.messageKey;var l = t._peerReadTimeMap.get(n);if (la.log(\"MessageController.getC2CRoamMessages update isPeerRead property. conversationID=\".concat(n, \" peerReadTime=\").concat(l)), l) t._updateMessageIsPeerReadProperty(n, l);else {var p = n.replace(pn.CONV_C2C, \"\");t.getPeerReadTime([p]).then(function () {t._updateMessageIsPeerReadProperty(n, t._peerReadTimeMap.get(n));});}return c;}).catch(function (n) {return t.probeNetwork().then(function (t) {var i = Bn(t, 2),s = i[0],a = i[1];o.setError(n, s, a).setText(\"\".concat(e.peerAccount, \"-\").concat(e.count || 15, \"-\").concat(e.lastMessageTime || 0, \"-\").concat(r)).setEnd();}), la.warn(\"MessageController.getC2CRoamMessages failed. \".concat(n)), id(n);});} }, { key: \"_computeLastSequence\", value: function value(e) {return e.sequence >= 0 ? Promise.resolve(e.sequence) : this.tim.groupController.getGroupLastSequence(e.groupID);} }, { key: \"getGroupRoamMessages\", value: function value(e) {var t = this,n = new ad(),r = 0;return this._computeLastSequence(e).then(function (o) {return r = o, la.log(\"MessageController.getGroupRoamMessages groupID=\".concat(e.groupID, \" lastSequence=\").concat(r)), n.setMethod(_d).setStart(), t.request({ name: \"groupMessage\", action: \"query\", param: { groupID: e.groupID, count: 21, sequence: r } });}).then(function (o) {var i = o.data,s = i.messageList,a = i.complete;va(s) ? la.log(\"MessageController.getGroupRoamMessages ok. complete=\".concat(a, \" but messageList is undefined!\")) : la.log(\"MessageController.getGroupRoamMessages ok. complete=\".concat(a, \" nums=\").concat(s.length)), n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"\".concat(e.groupID, \"-\").concat(r, \"-\").concat(a, \"-\").concat(s ? s.length : \"undefined\")).setEnd();var u = \"GROUP\".concat(e.groupID);if (2 === a || ja(s)) return t.getMessageHandler.setCompleted(u), [];var c = t._roamMessageStore(s, pn.CONV_GROUP, u);return t.readReportHandler.updateIsRead(u), t._patchConversationLastMessage(u), c;}).catch(function (o) {return t.probeNetwork().then(function (t) {var i = Bn(t, 2),s = i[0],a = i[1];n.setError(o, s, a).setText(\"\".concat(e.groupID, \"-\").concat(r)).setEnd();}), la.warn(\"MessageController.getGroupRoamMessages failed. \".concat(o)), id(o);});} }, { key: \"_patchConversationLastMessage\", value: function value(e) {var t = this.tim.conversationController.getLocalConversation(e);if (t) {var n = t.lastMessage,r = n.messageForShow,o = n.payload;if (ja(r) || ja(o)) {var i = this.messagesList.getLocalMessageList(e);if (0 === i.length) return;var s = i[i.length - 1];la.log(\"MessageController._patchConversationLastMessage conversationID:\".concat(e, \" payload:\"), s.payload), t.updateLastMessage(s);}}} }, { key: \"_roamMessageStore\", value: function value() {var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],t = arguments.length > 1 ? arguments[1] : void 0,n = arguments.length > 2 ? arguments[2] : void 0,r = null,o = [],i = 0,s = e.length,a = null,u = t === pn.CONV_GROUP,c = this.tim.bigDataHallwayController,l = function l() {i = u ? e.length - 1 : 0, s = u ? 0 : e.length;},p = function p() {u ? --i : ++i;},f = function f() {return u ? i >= s : i < s;};for (l(); f(); p()) {if (u && 1 === e[i].sequence && this.getMessageHandler.setCompleted(n), 1 !== e[i].isPlaceMessage) if ((r = new Uf(e[i])).to = e[i].to, r.isSystemMessage = !!e[i].isSystemMessage, r.conversationType = t, e[i].event === Kl.JSON.TYPE.GROUP.TIP ? a = { type: pn.MSG_GRP_TIP, content: Nn({}, e[i].elements, { groupProfile: e[i].groupProfile }) } : (e[i].elements = c.parseElements(e[i].elements, e[i].from), a = e[i].elements), ja(a)) {var h = new ad();h.setMethod(Md).setText(\"from:\".concat(r.from, \" to:\").concat(r.to, \" sequence:\").concat(r.sequence, \" event:\").concat(e[i].event)).setStart(), h.setCode(0).setNetworkType(this.getNetworkType()).setEnd();} else r.setElement(a), r.reInitialize(this.tim.context.identifier), o.push(r);}return this.messagesList.unshift(o), l = p = f = null, o;} }, { key: \"getLocalMessageList\", value: function value(e) {return this.messagesList.getLocalMessageList(e);} }, { key: \"getLocalMessage\", value: function value(e, t) {return this.messagesList.getLocalMessage(e, t);} }, { key: \"hasLocalMessage\", value: function value(e, t) {return this.messagesList.hasLocalMessage(e, t);} }, { key: \"deleteLocalMessage\", value: function value(e) {e instanceof Uf && this.messagesList.remove(e);} }, { key: \"revokeMessage\", value: function value(e) {var t,n = this;e.conversationType === pn.CONV_C2C ? t = { name: \"c2cMessageWillBeRevoked\", action: \"create\", param: { msgInfo: { fromAccount: e.from, toAccount: e.to, msgSeq: e.sequence, msgRandom: e.random, msgTimeStamp: e.time } } } : e.conversationType === pn.CONV_GROUP && (t = { name: \"groupMessageWillBeRevoked\", action: \"create\", param: { to: e.to, msgSeqList: [{ msgSeq: e.sequence }] } });var r = new ad();return r.setMethod(Id).setMessageType(e.type).setText(\"\".concat(this._generateTjgID(e), \"-\").concat(e.type, \"-\").concat(e.from, \"-\").concat(e.to)).setStart(), this.request(t).then(function (t) {var o = t.data.recallRetList;if (!ja(o) && 0 !== o[0].retCode) {var i = new Mp({ code: o[0].retCode, message: Cp[o[0].retCode] || xp, data: { message: e } });return r.setCode(i.code).setMessage(i.message).setEnd(), id(i);}return la.info(\"MessageController.revokeMessage ok. ID=\".concat(e.ID)), e.isRevoked = !0, r.setCode(0).setEnd(), n.emitInnerEvent(sh, [e]), new td({ message: e });}).catch(function (t) {n.probeNetwork().then(function (e) {var n = Bn(e, 2),o = n[0],i = n[1];r.setError(t, o, i).setEnd();});var o = new Mp({ code: t && t.code ? t.code : Sp.MESSAGE_REVOKE_FAIL, message: t && t.message ? t.message : xp, data: { message: e } });return la.warn(\"MessageController.revokeMessage failed. ID=\".concat(e.ID, \" code=\").concat(o.code, \" message=\").concat(o.message)), id(o);});} }, { key: \"setMessageRead\", value: function value(e) {var t = this;return new Promise(function (n, r) {t.ready(function () {t.readReportHandler.setMessageRead(e).then(n).catch(r);});});} }, { key: \"getMessageList\", value: function value(e) {return this.getMessageHandler.getMessageList(e);} }, { key: \"createTextMessage\", value: function value(e) {e.currentUser = this.tim.context.identifier;var t = new Uf(e),n = \"string\" == typeof e.payload ? e.payload : e.payload.text,r = new qu({ text: n });return t.setElement(r), t;} }, { key: \"createCustomMessage\", value: function value(e) {e.currentUser = this.tim.context.identifier;var t = new Uf(e),n = new Lf({ data: e.payload.data, description: e.payload.description, extension: e.payload.extension });return t.setElement(n), t;} }, { key: \"createImageMessage\", value: function value(e) {e.currentUser = this.tim.context.identifier;var t = new Uf(e);if (Ns) {var n = e.payload.file;if (pa(n)) return void la.warn(\"微信小程序环境下调用 createImageMessage 接口时，payload.file 不支持传入 File 对象\");var r = n.tempFilePaths[0],o = { url: r, name: r.slice(r.lastIndexOf(\"/\") + 1), size: n.tempFiles[0].size, type: r.slice(r.lastIndexOf(\".\") + 1).toLowerCase() };e.payload.file = o;} else if (ws && pa(e.payload.file)) {var i = e.payload.file;e.payload.file = { files: [i] };}var s = new cp({ imageFormat: \"UNKNOWN\", uuid: this._generateUUID(), file: e.payload.file });return t.setElement(s), this.messageOptionMap.set(t.messageID, e), t;} }, { key: \"createFileMessage\", value: function value(e) {if (!Ns) {if (ws && pa(e.payload.file)) {var t = e.payload.file;e.payload.file = { files: [t] };}e.currentUser = this.tim.context.identifier;var n = new Uf(e),r = new Nf({ uuid: this._generateUUID(), file: e.payload.file });return n.setElement(r), this.messageOptionMap.set(n.messageID, e), n;}la.warn(\"微信小程序目前不支持选择文件， createFileMessage 接口不可用！\");} }, { key: \"createAudioMessage\", value: function value(e) {if (Ns) {var t = e.payload.file;if (Ns) {var n = { url: t.tempFilePath, name: t.tempFilePath.slice(t.tempFilePath.lastIndexOf(\"/\") + 1), size: t.fileSize, second: parseInt(t.duration) / 1e3, type: t.tempFilePath.slice(t.tempFilePath.lastIndexOf(\".\") + 1).toLowerCase() };e.payload.file = n;}e.currentUser = this.tim.context.identifier;var r = new Uf(e),o = new pp({ second: Math.floor(t.duration / 1e3), size: t.fileSize, url: t.tempFilePath, uuid: this._generateUUID() });return r.setElement(o), this.messageOptionMap.set(r.messageID, e), r;}la.warn(\"createAudioMessage 目前只支持微信小程序发语音消息\");} }, { key: \"createVideoMessage\", value: function value(e) {e.currentUser = this.tim.context.identifier, e.payload.file.thumbUrl = \"https://webim-1252463788.cos.ap-shanghai.myqcloud.com/assets/images/transparent.png\", e.payload.file.thumbSize = 1668;var t = {};if (Ns) {if (pa(e.payload.file)) return void la.warn(\"微信小程序环境下调用 createVideoMessage 接口时，payload.file 不支持传入 File 对象\");var n = e.payload.file;t.url = n.tempFilePath, t.name = n.tempFilePath.slice(n.tempFilePath.lastIndexOf(\"/\") + 1), t.size = n.size, t.second = n.duration, t.type = n.tempFilePath.slice(n.tempFilePath.lastIndexOf(\".\") + 1).toLowerCase();} else if (ws) {if (pa(e.payload.file)) {var r = e.payload.file;e.payload.file.files = [r];}var o = e.payload.file;t.url = window.URL.createObjectURL(o.files[0]), t.name = o.files[0].name, t.size = o.files[0].size, t.second = o.files[0].duration || 0, t.type = o.files[0].type.split(\"/\")[1];}e.payload.file.videoFile = t;var i = new Uf(e),s = new bf({ videoFormat: t.type, videoSecond: Number(t.second.toFixed(0)), videoSize: t.size, remoteVideoUrl: \"\", videoUrl: t.url, videoUUID: this._generateUUID(), thumbUUID: this._generateUUID(), thumbWidth: e.payload.file.width || 200, thumbHeight: e.payload.file.height || 200, thumbUrl: e.payload.file.thumbUrl, thumbSize: e.payload.file.thumbSize, thumbFormat: e.payload.file.thumbUrl.slice(e.payload.file.thumbUrl.lastIndexOf(\".\") + 1).toLowerCase() });return i.setElement(s), this.messageOptionMap.set(i.messageID, e), i;} }, { key: \"createFaceMessage\", value: function value(e) {e.currentUser = this.tim.context.identifier;var t = new Uf(e),n = new lp(e.payload);return t.setElement(n), t;} }, { key: \"_generateUUID\", value: function value() {var e = this.tim.context;return \"\".concat(e.SDKAppID, \"-\").concat(e.identifier, \"-\").concat(function () {for (var e = \"\", t = 32; t > 0; --t) {e += Oa[Math.floor(Math.random() * wa)];}return e;}());} }, { key: \"_generateTjgID\", value: function value(e) {return this.tim.context.tinyID + \"-\" + e.random;} }, { key: \"getMessageOptionByID\", value: function value(e) {return this.messageOptionMap.get(e);} }, { key: \"isMessageSentByCurrentInstance\", value: function value(e) {return !(!this.messagesList.hasLocalMessage(e.conversationID, e.ID) && !this.singlyLinkedList.has(e.random));} }]), n;}(Qh),vy = function () {function e(t) {An(this, e), this.userID = \"\", this.avatar = \"\", this.nick = \"\", this.role = \"\", this.joinTime = \"\", this.lastSendMsgTime = \"\", this.nameCard = \"\", this.muteUntil = 0, this.memberCustomField = [], this._initMember(t);}return Rn(e, [{ key: \"_initMember\", value: function value(e) {this.updateMember(e);} }, { key: \"updateMember\", value: function value(e) {var t = [null, void 0, \"\", 0, NaN];e.memberCustomField && Ga(this.memberCustomField, e.memberCustomField), Ta(this, e, [\"memberCustomField\"], t);} }, { key: \"updateRole\", value: function value(e) {[\"Owner\", \"Admin\", \"Member\"].indexOf(e) < 0 || (this.role = e);} }, { key: \"updateMuteUntil\", value: function value(e) {va(e) || (this.muteUntil = Math.floor((Date.now() + 1e3 * e) / 1e3));} }, { key: \"updateNameCard\", value: function value(e) {va(e) || (this.nameCard = e);} }, { key: \"updateMemberCustomField\", value: function value(e) {e && Ga(this.memberCustomField, e);} }]), e;}(),yy = function () {function e(t) {An(this, e), this.tim = t.tim, this.groupController = t.groupController, this._initListeners();}return Rn(e, [{ key: \"_initListeners\", value: function value() {this.tim.innerEmitter.on(oh, this._onReceivedGroupTips, this);} }, { key: \"_onReceivedGroupTips\", value: function value(e) {var t = this,n = e.data,r = n.result;n.isGroupTip && r.forEach(function (e) {switch (e.payload.operationType) {case 1:t._onNewMemberComeIn(e);break;case 2:t._onMemberQuit(e);break;case 3:t._onMemberKickedOut(e);break;case 4:t._onMemberSetAdmin(e);break;case 5:t._onMemberCancelledAdmin(e);break;case 6:t._onGroupProfileModified(e);break;case 7:t._onMemberInfoModified(e);break;default:la.warn(\"GroupTipsHandler._onReceivedGroupTips Unhandled groupTips. operationType=\", e.payload.operationType);}});} }, { key: \"_onNewMemberComeIn\", value: function value(e) {var t = e.payload,n = t.memberNum,r = t.groupProfile.groupID,o = this.groupController.getLocalGroupProfile(r);o && fa(n) && (o.memberNum = n);} }, { key: \"_onMemberQuit\", value: function value(e) {var t = e.payload,n = t.memberNum,r = t.groupProfile.groupID,o = this.groupController.getLocalGroupProfile(r);o && fa(n) && (o.memberNum = n), this.groupController.deleteLocalGroupMembers(r, e.payload.userIDList);} }, { key: \"_onMemberKickedOut\", value: function value(e) {var t = e.payload,n = t.memberNum,r = t.groupProfile.groupID,o = this.groupController.getLocalGroupProfile(r);o && fa(n) && (o.memberNum = n), this.groupController.deleteLocalGroupMembers(r, e.payload.userIDList);} }, { key: \"_onMemberSetAdmin\", value: function value(e) {var t = this,n = e.payload.groupProfile.groupID;e.payload.userIDList.forEach(function (e) {var r = t.groupController.getLocalGroupMemberInfo(n, e);r && r.updateRole(pn.GRP_MBR_ROLE_ADMIN);});} }, { key: \"_onMemberCancelledAdmin\", value: function value(e) {var t = this,n = e.payload.groupProfile.groupID;e.payload.userIDList.forEach(function (e) {var r = t.groupController.getLocalGroupMemberInfo(n, e);r && r.updateRole(pn.GRP_MBR_ROLE_MEMBER);});} }, { key: \"_onGroupProfileModified\", value: function value(e) {var t = this,n = e.payload.newGroupProfile,r = e.payload.groupProfile.groupID,o = this.groupController.getLocalGroupProfile(r);Object.keys(n).forEach(function (e) {switch (e) {case \"ownerID\":t._ownerChaged(o, n);break;default:o[e] = n[e];}}), this.groupController.emitGroupListUpdate(!0, !0);} }, { key: \"_ownerChaged\", value: function value(e, t) {var n = e.groupID,r = this.groupController.getLocalGroupProfile(n),o = this.tim.context.identifier;if (o === t.ownerID) {r.updateGroup({ selfInfo: { role: pn.GRP_MBR_ROLE_OWNER } });var i = this.groupController.getLocalGroupMemberInfo(n, o),s = this.groupController.getLocalGroupProfile(n).ownerID,a = this.groupController.getLocalGroupMemberInfo(n, s);i && i.updateRole(pn.GRP_MBR_ROLE_OWNER), a && a.updateRole(pn.GRP_MBR_ROLE_MEMBER);}} }, { key: \"_onMemberInfoModified\", value: function value(e) {var t = this,n = e.payload.groupProfile.groupID;e.payload.memberList.forEach(function (e) {var r = t.groupController.getLocalGroupMemberInfo(n, e.userID);r && e.muteTime && r.updateMuteUntil(e.muteTime);});} }]), e;}(),_y = function () {function e(t) {An(this, e), this.groupController = t.groupController, this.tim = t.tim, this.pendencyMap = new Map(), this._initLiceners();}return Rn(e, [{ key: \"_initLiceners\", value: function value() {this.tim.innerEmitter.on(ih, this._onReceivedGroupSystemNotice, this), this.tim.innerEmitter.on(Zf, this._clearGroupSystemNotice, this);} }, { key: \"_clearGroupSystemNotice\", value: function value() {var e = this;this.getPendencyList().then(function (t) {t.forEach(function (t) {e.pendencyMap.set(\"\".concat(t.from, \"_\").concat(t.groupID, \"_\").concat(t.to), t);});var n = e.tim.messageController.getLocalMessageList(pn.CONV_SYSTEM),r = [];n.forEach(function (t) {var n = t.payload,o = n.operatorID,i = n.operationType,s = n.groupProfile;if (i === Hl) {var a = \"\".concat(o, \"_\").concat(s.groupID, \"_\").concat(s.to),u = e.pendencyMap.get(a);u && fa(u.handled) && 0 !== u.handled && r.push(t);}}), e.groupController.deleteGroupSystemNotice({ messageList: r });});} }, { key: \"getPendencyList\", value: function value(e) {var t = this;return this.groupController.request({ name: \"group\", action: \"getGroupPendency\", param: { startTime: e && e.startTime ? e.startTime : 0, limit: e && e.limit ? e.limit : 10, handleAccount: this.tim.context.identifier } }).then(function (e) {var n = e.data,r = n.pendencyList;return 0 !== n.nextStartTime ? t.getPendencyList({ startTime: n.nextStartTime }).then(function (e) {return [].concat(jn(r), jn(e));}) : r;});} }, { key: \"_onReceivedGroupSystemNotice\", value: function value(e) {var t = this,n = e.data,r = n.result;\"sync\" !== n.type && r.forEach(function (e) {switch (e.payload.operationType) {case 1:t._onApplyGroupRequest(e);break;case 2:t._onApplyGroupRequestAgreed(e);break;case 3:t._onApplyGroupRequestRefused(e);break;case 4:t._onMemberKicked(e);break;case 5:t._onGroupDismissed(e);break;case 6:break;case 7:t._onInviteGroup(e);break;case 8:t._onQuitGroup(e);break;case 9:t._onSetManager(e);break;case 10:t._onDeleteManager(e);break;case 11:case 12:case 15:break;case 255:t.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: tp });}});} }, { key: \"_onApplyGroupRequest\", value: function value(e) {this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Hl });} }, { key: \"_onApplyGroupRequestAgreed\", value: function value(e) {var t = this,n = e.payload.groupProfile.groupID;this.groupController.hasLocalGroup(n) || this.groupController.getGroupProfile({ groupID: n }).then(function (e) {var n = e.data.group;n && (t.groupController.updateGroupMap([n]), t.groupController.emitGroupListUpdate());}), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Yl });} }, { key: \"_onApplyGroupRequestRefused\", value: function value(e) {this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: $l });} }, { key: \"_onMemberKicked\", value: function value(e) {var t = e.payload.groupProfile.groupID;this.groupController.hasLocalGroup(t) && this.groupController.deleteLocalGroupAndConversation(t), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Wl });} }, { key: \"_onGroupDismissed\", value: function value(e) {var t = e.payload.groupProfile.groupID,n = this.groupController.hasLocalGroup(t),r = this.groupController.AVChatRoomHandler;n && this.groupController.deleteLocalGroupAndConversation(t), r.checkJoinedAVChatRoomByID(t) && r.reset(t), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: zl });} }, { key: \"_onInviteGroup\", value: function value(e) {var t = this,n = e.payload.groupProfile.groupID;this.groupController.hasLocalGroup(n) || this.groupController.getGroupProfile({ groupID: n }).then(function (e) {var n = e.data.group;n && (t.groupController.updateGroupMap([n]), t.groupController.emitGroupListUpdate());}), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Xl });} }, { key: \"_onQuitGroup\", value: function value(e) {var t = e.payload.groupProfile.groupID;this.groupController.hasLocalGroup(t) && this.groupController.deleteLocalGroupAndConversation(t), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Jl });} }, { key: \"_onSetManager\", value: function value(e) {var t = e.payload.groupProfile,n = t.to,r = t.groupID,o = this.groupController.getLocalGroupMemberInfo(r, n);o && o.updateRole(pn.GRP_MBR_ROLE_ADMIN), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Ql });} }, { key: \"_onDeleteManager\", value: function value(e) {var t = e.payload.groupProfile,n = t.to,r = t.groupID,o = this.groupController.getLocalGroupMemberInfo(r, n);o && o.updateRole(pn.GRP_MBR_ROLE_MEMBER), this.groupController.emitOuterEvent(ln.GROUP_SYSTEM_NOTICE_RECEIVED, { message: e, type: Zl });} }, { key: \"reset\", value: function value() {this.pendencyMap.clear();} }]), e;}(),Iy = { 3: !0, 4: !0, 5: !0, 6: !0 },Ey = function () {function e(t) {var n = t.tim,r = t.groupController;An(this, e), this.tim = n, this.groupController = r, this.sequencesLinkedList = new dy(100), this.receivedMessageCount = 0, this._pollingRequestInfoMap = new Map(), this._pollingInstanceMap = new Map(), this._joinedGroupMap = new Map();}return Rn(e, [{ key: \"hasJoinedAVChatRoom\", value: function value() {return this._joinedGroupMap.size > 0;} }, { key: \"checkJoinedAVChatRoomByID\", value: function value(e) {return this._joinedGroupMap.has(e);} }, { key: \"getJoinedAVChatRoom\", value: function value() {return this._joinedGroupMap.size > 0 ? jn(this._joinedGroupMap.keys()) : null;} }, { key: \"start\", value: function value(e) {var t = this._pollingRequestInfoMap.get(e),n = { key: t.key, startSeq: t.startSeq };if (this._pollingInstanceMap.has(e)) {var r = this._pollingInstanceMap.get(e);r.isRunning() || r.start();} else {var o = this.groupController.createTransportCapsule({ name: \"AVChatRoom\", action: \"startLongPoll\", param: n }),i = this.tim.connectionController.createRunLoop({ pack: o, before: this._updateRequestData.bind(this, e), success: this._handleSuccess.bind(this, e), fail: this._handleFailure.bind(this), isAVChatRoomLoop: !0 });i.start(), this._pollingInstanceMap.set(e, i), la.log(\"AVChatRoomHandler.start message channel started. groupID=\".concat(e));}} }, { key: \"stop\", value: function value(e) {var t = this._pollingInstanceMap.get(e);t && t.isRunning() && (t.abort(), t.stop(), la.log(\"AVChatRoomHandler.stop message channel stopped. groupID=\".concat(e)));} }, { key: \"startRunLoop\", value: function value(e) {var t = this;return this._precheck().then(function () {var n = e.longPollingKey,r = e.group,o = r.groupID;return t._pollingRequestInfoMap.set(o, { key: n, startSeq: 0 }), t._joinedGroupMap.set(o, r), t.groupController.updateGroupMap([r]), t.groupController.emitGroupListUpdate(!0, !1), t.start(o), t.groupController.isLoggedIn() ? od({ status: bu.SUCCESS, group: r }) : od({ status: bu.SUCCESS });});} }, { key: \"joinWithoutAuth\", value: function value(e) {var t = this;return this.groupController.request({ name: \"group\", action: \"applyJoinAVChatRoom\", param: e }).then(function (n) {var r = n.data.longPollingKey;if (va(r)) return id(new Mp({ code: Sp.CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN, message: uf }));la.log(\"AVChatRoomHandler.joinWithoutAuth ok. groupID:\", e.groupID), t.groupController.emitInnerEvent(Uh), t.groupController.emitInnerEvent(Gh, e.groupID);var o = new jv({ groupID: e.groupID });return t.startRunLoop({ group: o, longPollingKey: r }), new td({ status: bu.SUCCESS });}).catch(function (t) {return la.error(\"AVChatRoomHandler.joinWithoutAuth error:\".concat(Da(t), \". groupID:\").concat(e.groupID)), id(t);});} }, { key: \"_precheck\", value: function value() {if (this.tim.context.unlimitedAVChatRoom) return Promise.resolve();if (!this.hasJoinedAVChatRoom()) return Promise.resolve();var e = Bn(this._joinedGroupMap.entries().next().value, 2),t = e[0],n = e[1];if (this.groupController.isLoggedIn()) {if (!(n.selfInfo.role === pn.GRP_MBR_ROLE_OWNER || n.ownerID === this.tim.loginInfo.identifier)) return this.groupController.quitGroup(t);this.groupController.deleteLocalGroupAndConversation(t);} else this.groupController.deleteLocalGroupAndConversation(t);return this.reset(t), Promise.resolve();} }, { key: \"_updateRequestData\", value: function value(e, t) {var n = this._pollingRequestInfoMap.get(e),r = n.key,o = n.startSeq;t.StartSeq = o, t.key = r, this.tim.sumStatController.addTotalCount(sd.LONG_POLLING_AV);} }, { key: \"_handleSuccess\", value: function value(e, t) {this.tim.sumStatController.addSuccessCount(sd.LONG_POLLING_AV), this.tim.sumStatController.addCost(sd.LONG_POLLING_AV, t.data.timecost);var n = t.data,r = n.key,o = n.nextSeq,i = n.rspMsgList;this._pollingRequestInfoMap.set(e, { key: r, startSeq: o }), ma(i) && i.length > 0 && (i.forEach(function (e) {e.to = e.groupID;}), this._dispatchNotice(i)), this.groupController.emitInnerEvent(Th);} }, { key: \"_handleFailure\", value: function value(e) {if (e.error) if (\"ECONNABORTED\" === e.error.code || e.error.code === Sp.NETWORK_TIMEOUT) {if (e.error.config) {var t = e.error.config.url,n = e.error.config.data;la.log(\"AVChatRoomHandler._handleFailure request timed out. url=\".concat(t, \" data=\").concat(n));} else la.log(\"AVChatRoomHandler._handleFailure request timed out\");} else la.log(\"AVChatRoomHandler._handleFailure request failed due to network error\");this.groupController.emitInnerEvent(Sh);} }, { key: \"_dispatchNotice\", value: function value(e) {if (ma(e) && 0 !== e.length) {var t = Date.now(),n = null,r = [],o = [],i = e.length;i > 1 && e.sort(function (e, t) {return e.sequence - t.sequence;});for (var s = 0; s < i; s++) {if (Iy[e[s].event]) {this.receivedMessageCount += 1;var a = (n = this.packMessage(e[s], e[s].event)).conversationID;if (this.receivedMessageCount % 40 == 0 && this.tim.messageLossController.detectMessageLoss(a, this.sequencesLinkedList.data()), null !== this.sequencesLinkedList.tail()) {var u = this.sequencesLinkedList.tail().value,c = n.sequence - u;c > 1 && c <= 20 ? this.tim.messageLossController.onMessageMaybeLost(a, u + 1, c - 1) : c < -1 && c >= -20 && this.tim.messageLossController.onMessageMaybeLost(a, n.sequence + 1, Math.abs(c) - 1);}this.sequencesLinkedList.pushIn(n.sequence), this._isMessageSentByCurrentInstance(n) || (n.conversationType === pn.CONV_SYSTEM && o.push(n), r.push(n));} else la.warn(\"AVChatRoomHandler._dispatchMessage 未处理的 event 类型：\", e[s].event);}if (o.length > 0 && this.groupController.emitInnerEvent(ih, { result: o, eventDataList: [], type: \"poll\" }), 0 !== r.length) {var l = this.packConversationOption(r);l.length > 0 && this.groupController.emitInnerEvent(oh, { eventDataList: l, type: \"poll\" }), la.debug(\"AVChatRoomHandler._dispatchNotice nums=\".concat(r.length));var p = this.tim.sumStatController;p.addTotalCount(sd.MESSAGE_RECEIVED_AV), p.addSuccessCount(sd.MESSAGE_RECEIVED_AV), p.addCost(sd.MESSAGE_RECEIVED_AV, Date.now() - t), this.groupController.emitOuterEvent(ln.MESSAGE_RECEIVED, r);}}} }, { key: \"_isMessageSentByCurrentInstance\", value: function value(e) {return !!this.tim.messageController.isMessageSentByCurrentInstance(e);} }, { key: \"packMessage\", value: function value(e, t) {e.currentUser = this.tim.context.identifier, e.conversationType = 5 === t ? pn.CONV_SYSTEM : pn.CONV_GROUP, e.isSystemMessage = !!e.isSystemMessage;var n = new Uf(e),r = this.packElements(e, t);return n.setElement(r), n;} }, { key: \"packElements\", value: function value(e, t) {return 4 === t || 6 === t ? { type: pn.MSG_GRP_TIP, content: Nn({}, e.elements, { groupProfile: e.groupProfile }) } : 5 === t ? { type: pn.MSG_GRP_SYS_NOTICE, content: Nn({}, e.elements, { groupProfile: e.groupProfile }) } : this.tim.bigDataHallwayController.parseElements(e.elements, e.from);} }, { key: \"packConversationOption\", value: function value(e) {for (var t = new Map(), n = 0; n < e.length; n++) {var r = e[n],o = r.conversationID;if (t.has(o)) {var i = t.get(o);i.lastMessage = r, \"in\" === r.flow && i.unreadCount++;} else t.set(o, { conversationID: r.conversationID, unreadCount: \"out\" === r.flow ? 0 : 1, type: r.conversationType, subType: r.conversationSubType, lastMessage: r });}return jn(t.values());} }, { key: \"reset\", value: function value(e) {if (0 !== this._pollingInstanceMap.size) {if (e) la.log(\"AVChatRoomHandler.reset groupID=\".concat(e)), this.stop(e), this._pollingInstanceMap.delete(e), this._joinedGroupMap.delete(e), this._pollingRequestInfoMap.delete(e);else {la.log(\"AVChatRoomHandler.reset all\");var t,n = Yn(this._pollingInstanceMap.keys());try {for (n.s(); !(t = n.n()).done;) {var r = t.value;this.stop(r);}} catch (o) {n.e(o);} finally {n.f();}this._pollingInstanceMap.clear(), this._joinedGroupMap.clear(), this._pollingRequestInfoMap.clear();}this.sequencesLinkedList.reset(), this.receivedMessageCount = 0;}} }]), e;}(),Cy = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).groupMap = new Map(), r.groupMemberListMap = new Map(), r.groupNoticeHandler = new _y({ tim: e, groupController: qn(r) }), r.groupTipsHandler = new yy({ tim: e, groupController: qn(r) }), r.AVChatRoomHandler = new Ey({ tim: e, groupController: qn(r) }), r._initListeners(), r;}return Rn(n, [{ key: \"createGroup\", value: function value(e) {var t = this;if (![\"Public\", \"Private\", \"ChatRoom\", \"AVChatRoom\"].includes(e.type)) {var n = new Mp({ code: Sp.ILLEGAL_GROUP_TYPE, message: ef });return id(n);}qa(e.type) && !va(e.memberList) && e.memberList.length > 0 && (la.warn(\"GroupController.createGroup 创建AVChatRoom时不能添加群成员，自动忽略该字段\"), e.memberList = void 0), Ua(e.type) || va(e.joinOption) || (la.warn(\"GroupController.createGroup 创建Work/Meeting/AVChatRoom群时不能设置字段：joinOption，自动忽略该字段\"), e.joinOption = void 0);var r = new ad();return r.setMethod(Od).setStart(), la.log(\"GroupController.createGroup.\"), this.request({ name: \"group\", action: \"create\", param: e }).then(function (n) {if (r.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupType=\".concat(e.type, \" groupID=\").concat(n.data.groupID)).setEnd(), la.log(\"GroupController.createGroup ok. groupID:\", n.data.groupID), e.type === pn.GRP_AVCHATROOM) return t.getGroupProfile({ groupID: n.data.groupID });t.updateGroupMap([Nn({}, e, { groupID: n.data.groupID })]);var o = t.tim.createCustomMessage({ to: n.data.groupID, conversationType: pn.CONV_GROUP, payload: { data: \"group_create\", extension: \"\".concat(t.tim.context.identifier, \"创建群组\") } });return t.tim.sendMessage(o), t.emitGroupListUpdate(), t.getGroupProfile({ groupID: n.data.groupID });}).then(function (e) {var t = e.data.group;return t.selfInfo.messageRemindType = pn.MSG_REMIND_ACPT_AND_NOTE, t.selfInfo.role = pn.GRP_MBR_ROLE_OWNER, e;}).catch(function (n) {return r.setText(\"groupType=\".concat(e.type)), t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];r.setError(n, o, i).setEnd();}), la.error(\"GroupController.createGroup error:\", n), id(n);});} }, { key: \"joinGroup\", value: function value(e) {if (this.hasLocalGroup(e.groupID)) {var t = { status: pn.JOIN_STATUS_ALREADY_IN_GROUP };return od(t);}if (e.type === pn.GRP_WORK) {var n = new Mp({ code: Sp.CANNOT_JOIN_WORK, message: tf });return id(n);}return la.log(\"GroupController.joinGroup. groupID:\", e.groupID), this.isLoggedIn() ? this.applyJoinGroup(e) : this.AVChatRoomHandler.joinWithoutAuth(e);} }, { key: \"quitGroup\", value: function value(e) {var t = this;la.log(\"GroupController.quitGroup. groupID:\", e);var n = this.AVChatRoomHandler.checkJoinedAVChatRoomByID(e);if (n && !this.isLoggedIn()) return la.log(\"GroupController.quitGroup anonymously ok. groupID:\", e), this.deleteLocalGroupAndConversation(e), this.AVChatRoomHandler.reset(e), od({ groupID: e });var r = new ad();return r.setMethod(Nd).setStart(), this.request({ name: \"group\", action: \"quitGroup\", param: { groupID: e } }).then(function () {return r.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(e)).setEnd(), la.log(\"GroupController.quitGroup ok. groupID:\", e), n && t.AVChatRoomHandler.reset(e), t.deleteLocalGroupAndConversation(e), new td({ groupID: e });}).catch(function (n) {return r.setText(\"groupID=\".concat(e)), t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];r.setError(n, o, i).setEnd();}), la.error(\"GroupController.quitGroup error. error:\".concat(Da(n), \" groupID:\").concat(e)), id(n);});} }, { key: \"changeGroupOwner\", value: function value(e) {var t = this;if (this.hasLocalGroup(e.groupID) && this.getLocalGroupProfile(e.groupID).type === pn.GRP_AVCHATROOM) return id(new Mp({ code: Sp.CANNOT_CHANGE_OWNER_IN_AVCHATROOM, message: nf }));if (e.newOwnerID === this.tim.loginInfo.identifier) return id(new Mp({ code: Sp.CANNOT_CHANGE_OWNER_TO_SELF, message: rf }));var n = new ad();return n.setMethod(bd).setStart(), la.log(\"GroupController.changeGroupOwner. groupID:\", e.groupID), this.request({ name: \"group\", action: \"changeGroupOwner\", param: e }).then(function () {n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(e.groupID)).setEnd(), la.log(\"GroupController.changeGroupOwner ok. groupID:\", e.groupID);var r = e.groupID,o = e.newOwnerID;t.groupMap.get(r).ownerID = o;var i = t.groupMemberListMap.get(r);if (i instanceof Map) {var s = i.get(t.tim.loginInfo.identifier);va(s) || (s.updateRole(\"Member\"), t.groupMap.get(r).selfInfo.role = \"Member\");var a = i.get(o);va(a) || a.updateRole(\"Owner\");}return t.emitGroupListUpdate(!0, !1), new td({ group: t.groupMap.get(r) });}).catch(function (r) {return n.setText(\"groupID=\".concat(e.groupID)), t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];n.setError(r, o, i).setEnd();}), la.error(\"GroupController.changeGroupOwner error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"dismissGroup\", value: function value(e) {var t = this;if (this.hasLocalGroup(e) && this.getLocalGroupProfile(e).type === pn.GRP_WORK) return id(new Mp({ code: Sp.CANNOT_DISMISS_WORK, message: of }));var n = new ad();return n.setMethod(Ud).setStart(), la.log(\"GroupController.dismissGroup. groupID:\".concat(e)), this.request({ name: \"group\", action: \"destroyGroup\", param: { groupID: e } }).then(function () {return n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(e)).setEnd(), la.log(\"GroupController.dismissGroup ok. groupID:\".concat(e)), t.deleteLocalGroupAndConversation(e), t.checkJoinedAVChatRoomByID(e) && t.AVChatRoomHandler.reset(e), new td({ groupID: e });}).catch(function (r) {return n.setText(\"groupID=\".concat(e)), t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];n.setError(r, o, i).setEnd();}), la.error(\"GroupController.dismissGroup error:\".concat(Da(r), \" groupID:\").concat(e)), id(r);});} }, { key: \"updateGroupProfile\", value: function value(e) {var t = this;!this.hasLocalGroup(e.groupID) || Ua(this.getLocalGroupProfile(e.groupID).type) || va(e.joinOption) || (la.warn(\"GroupController.updateGroupProfile Work/Meeting/AVChatRoom群不能设置字段：joinOption，自动忽略该字段\"), e.joinOption = void 0), va(e.muteAllMembers) || (e.muteAllMembers ? e.muteAllMembers = \"On\" : e.muteAllMembers = \"Off\");var n = new ad();return n.setMethod(xd).setStart(), n.setText(JSON.stringify(e)), la.log(\"GroupController.updateGroupProfile. groupID:\", e.groupID), this.request({ name: \"group\", action: \"updateGroupProfile\", param: e }).then(function () {(n.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.updateGroupProfile ok. groupID:\", e.groupID), t.hasLocalGroup(e.groupID)) && (t.groupMap.get(e.groupID).updateGroup(e), t._setStorageGroupList());return new td({ group: t.groupMap.get(e.groupID) });}).catch(function (r) {return t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];n.setError(r, o, i).setEnd();}), la.log(\"GroupController.updateGroupProfile failed. error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"setGroupMemberRole\", value: function value(e) {var t = this,n = e.groupID,r = e.userID,o = e.role,i = this.groupMap.get(n);if (i.selfInfo.role !== pn.GRP_MBR_ROLE_OWNER) return id(new Mp({ code: Sp.NOT_OWNER, message: lf }));if ([pn.GRP_WORK, pn.GRP_AVCHATROOM].includes(i.type)) return id(new Mp({ code: Sp.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM, message: pf }));if ([pn.GRP_MBR_ROLE_ADMIN, pn.GRP_MBR_ROLE_MEMBER].indexOf(o) < 0) return id(new Mp({ code: Sp.INVALID_MEMBER_ROLE, message: ff }));if (r === this.tim.loginInfo.identifier) return id(new Mp({ code: Sp.CANNOT_SET_SELF_MEMBER_ROLE, message: hf }));var s = new ad();return s.setMethod(zd).setStart(), s.setText(\"groupID=\".concat(n, \" userID=\").concat(r, \" role=\").concat(o)), la.log(\"GroupController.setGroupMemberRole. groupID:\".concat(n, \". userID: \").concat(r)), this._modifyGroupMemberInfo({ groupID: n, userID: r, role: o }).then(function (e) {return s.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.setGroupMemberRole ok. groupID:\".concat(n, \". userID: \").concat(r)), new td({ group: i, member: e });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];s.setError(e, r, o).setEnd();}), la.error(\"GroupController.setGroupMemberRole error:\".concat(Da(e), \" groupID:\").concat(n, \" userID:\").concat(r)), id(e);});} }, { key: \"setGroupMemberMuteTime\", value: function value(e) {var t = this,n = e.groupID,r = e.userID,o = e.muteTime;if (r === this.tim.loginInfo.identifier) return id(new Mp({ code: Sp.CANNOT_MUTE_SELF, message: df }));la.log(\"GroupController.setGroupMemberMuteTime. groupID:\".concat(n, \". userID: \").concat(r));var i = new ad();return i.setMethod($d).setStart(), i.setText(\"groupID=\".concat(n, \" userID=\").concat(r, \" muteTime=\").concat(o)), this._modifyGroupMemberInfo({ groupID: n, userID: r, muteTime: o }).then(function (e) {return i.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.setGroupMemberMuteTime ok. groupID:\".concat(n, \". userID: \").concat(r)), new td({ group: t.getLocalGroupProfile(n), member: e });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];i.setError(e, r, o).setEnd();}), la.error(\"GroupController.setGroupMemberMuteTime error:\".concat(Da(e), \" groupID:\").concat(n, \" userID:\").concat(r)), id(e);});} }, { key: \"setMessageRemindType\", value: function value(e) {var t = this,n = new ad();n.setMethod(Gd).setStart(), n.setText(\"groupID=\".concat(e.groupID, \" userID=\").concat(e.userID || this.tim.loginInfo.identifier)), la.log(\"GroupController.setMessageRemindType. groupID:\".concat(e.groupID, \". userID: \").concat(e.userID || this.tim.loginInfo.identifier));var r = e.groupID,o = e.messageRemindType;return this._modifyGroupMemberInfo({ groupID: r, messageRemindType: o, userID: this.tim.loginInfo.identifier }).then(function () {n.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.setMessageRemindType ok. groupID:\".concat(e.groupID, \" userID:\").concat(e.userID || t.tim.loginInfo.identifier));var r = t.getLocalGroupProfile(e.groupID);return r && (r.selfInfo.messageRemindType = o), new td({ group: r });}).catch(function (r) {return t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];n.setError(r, o, i).setEnd();}), la.error(\"GroupController.setMessageRemindType error:\".concat(Da(r), \" groupID:\").concat(e.groupID, \" userID:\").concat(e.userID || t.tim.loginInfo.identifier)), id(r);});} }, { key: \"setGroupMemberNameCard\", value: function value(e) {var t = this,n = e.groupID,r = e.userID,o = void 0 === r ? this.tim.loginInfo.identifier : r,i = e.nameCard;la.log(\"GroupController.setGroupMemberNameCard. groupID:\".concat(n, \". userID: \").concat(o));var s = new ad();return s.setMethod(Wd).setStart(), s.setText(\"groupID=\".concat(n, \" userID=\").concat(o, \" nameCard=\").concat(i)), this._modifyGroupMemberInfo({ groupID: n, userID: o, nameCard: i }).then(function (e) {la.log(\"GroupController.setGroupMemberNameCard ok. groupID:\".concat(n, \". userID: \").concat(o)), s.setCode(0).setNetworkType(t.getNetworkType()).setEnd();var r = t.getLocalGroupProfile(n);return o === t.tim.loginInfo.identifier && r && r.setSelfNameCard(i), new td({ group: r, member: e });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];s.setError(e, r, o).setEnd();}), la.error(\"GroupController.setGroupMemberNameCard error:\".concat(Da(e), \" groupID:\").concat(n, \" userID:\").concat(o)), id(e);});} }, { key: \"setGroupMemberCustomField\", value: function value(e) {var t = this,n = e.groupID,r = e.userID,o = void 0 === r ? this.tim.loginInfo.identifier : r,i = e.memberCustomField;la.log(\"GroupController.setGroupMemberCustomField. groupID:\".concat(n, \". userID: \").concat(o));var s = new ad();return s.setMethod(Xd).setStart(), s.setText(\"groupID=\".concat(n, \" userID=\").concat(o, \" memberCustomField=\").concat(i)), this._modifyGroupMemberInfo({ groupID: n, userID: o, memberCustomField: i }).then(function (e) {return s.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.setGroupMemberCustomField ok. groupID:\".concat(n, \". userID: \").concat(o)), new td({ group: t.groupMap.get(n), member: e });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];s.setError(e, r, o).setEnd();}), la.error(\"GroupController.setGroupMemberCustomField error:\".concat(Da(e), \" groupID:\").concat(n, \" userID:\").concat(o)), id(e);});} }, { key: \"getGroupList\", value: function value(e) {var t = this,n = new ad();n.setMethod(qd).setStart(), la.log(\"GroupController.getGroupList\");var r = { introduction: \"Introduction\", notification: \"Notification\", createTime: \"CreateTime\", ownerID: \"Owner_Account\", lastInfoTime: \"LastInfoTime\", memberNum: \"MemberNum\", maxMemberNum: \"MaxMemberNum\", joinOption: \"ApplyJoinOption\", muteAllMembers: \"ShutUpAllMember\" },o = [\"Type\", \"Name\", \"FaceUrl\", \"NextMsgSeq\", \"LastMsgTime\"];return e && e.groupProfileFilter && e.groupProfileFilter.forEach(function (e) {r[e] && o.push(r[e]);}), this.request({ name: \"group\", action: \"list\", param: { responseFilter: { groupBaseInfoFilter: o, selfInfoFilter: [\"Role\", \"JoinTime\", \"MsgFlag\"] } } }).then(function (e) {var r = e.data.groups;return n.setCode(0).setNetworkType(t.getNetworkType()).setText(r.length).setEnd(), la.log(\"GroupController.getGroupList ok. nums=\".concat(r.length)), t._groupListTreeShaking(r), t.updateGroupMap(r), t.tempConversationList && (la.log(\"GroupController.getGroupList update last message with tempConversationList, nums=\".concat(t.tempConversationList.length)), t._handleUpdateGroupLastMessage({ data: t.tempConversationList }), t.tempConversationList = null), t.emitGroupListUpdate(), new td({ groupList: t.getLocalGroups() });}).catch(function (e) {return t.probeNetwork().then(function (t) {var r = Bn(t, 2),o = r[0],i = r[1];n.setError(e, o, i).setEnd();}), la.error(\"GroupController.getGroupList error:\", e), id(e);});} }, { key: \"getGroupMemberList\", value: function value(e) {var t = this,n = e.groupID,r = e.offset,o = void 0 === r ? 0 : r,i = e.count,s = void 0 === i ? 15 : i,a = new ad();a.setMethod(jd).setStart(), la.log(\"GroupController.getGroupMemberList groupID: \".concat(n, \" offset: \").concat(o, \" count: \").concat(s));var u = [];return this.request({ name: \"group\", action: \"getGroupMemberList\", param: { groupID: n, offset: o, limit: s > 100 ? 100 : s, memberInfoFilter: [\"Role\", \"NameCard\", \"ShutUpUntil\"] } }).then(function (e) {var r = e.data,o = r.members,i = r.memberNum;return ma(o) && 0 !== o.length ? (t.hasLocalGroup(n) && (t.getLocalGroupProfile(n).memberNum = i), u = t._updateLocalGroupMemberMap(n, o), t.tim.getUserProfile({ userIDList: o.map(function (e) {return e.userID;}), tagList: [ip.NICK, ip.AVATAR] })) : Promise.resolve([]);}).then(function (e) {var r = e.data;if (!ma(r) || 0 === r.length) return od({ memberList: [] });var i = r.map(function (e) {return { userID: e.userID, nick: e.nick, avatar: e.avatar };});return t._updateLocalGroupMemberMap(n, i), a.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(n, \" offset=\").concat(o, \" count=\").concat(s)).setEnd(), la.log(\"GroupController.getGroupMemberList ok.\"), new td({ memberList: u });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];a.setError(e, r, o).setEnd();}), la.error(\"GroupController.getGroupMemberList error:\", e), id(e);});} }, { key: \"getLocalGroups\", value: function value() {return jn(this.groupMap.values());} }, { key: \"getLocalGroupProfile\", value: function value(e) {return this.groupMap.get(e);} }, { key: \"hasLocalGroup\", value: function value(e) {return this.groupMap.has(e);} }, { key: \"getLocalGroupMemberInfo\", value: function value(e, t) {return this.groupMemberListMap.has(e) ? this.groupMemberListMap.get(e).get(t) : null;} }, { key: \"setLocalGroupMember\", value: function value(e, t) {if (this.groupMemberListMap.has(e)) this.groupMemberListMap.get(e).set(t.userID, t);else {var n = new Map().set(t.userID, t);this.groupMemberListMap.set(e, n);}} }, { key: \"hasLocalGroupMember\", value: function value(e, t) {return this.groupMemberListMap.has(e) && this.groupMemberListMap.get(e).has(t);} }, { key: \"hasLocalGroupMemberMap\", value: function value(e) {return this.groupMemberListMap.has(e);} }, { key: \"getGroupProfile\", value: function value(e) {var t = this,n = new ad();n.setMethod(Fd).setStart(), la.log(\"GroupController.getGroupProfile. groupID:\", e.groupID);var r = e.groupID,o = e.groupCustomFieldFilter,i = { groupIDList: [r], responseFilter: { groupBaseInfoFilter: [\"Type\", \"Name\", \"Introduction\", \"Notification\", \"FaceUrl\", \"Owner_Account\", \"CreateTime\", \"InfoSeq\", \"LastInfoTime\", \"LastMsgTime\", \"MemberNum\", \"MaxMemberNum\", \"ApplyJoinOption\", \"NextMsgSeq\", \"ShutUpAllMember\"], groupCustomFieldFilter: o } };return this.getGroupProfileAdvance(i).then(function (o) {var i,s = o.data,a = s.successGroupList,u = s.failureGroupList;return la.log(\"GroupController.getGroupProfile ok. groupID:\".concat(e.groupID)), u.length > 0 ? id(u[0]) : (qa(a[0].type) && !t.hasLocalGroup(r) ? i = new jv(a[0]) : (t.updateGroupMap(a), i = t.getLocalGroupProfile(r)), n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(i.groupID, \" type=\").concat(i.type, \" muteAllMembers=\").concat(i.muteAllMembers, \" ownerID=\").concat(i.ownerID)).setEnd(), i && i.selfInfo && !i.selfInfo.nameCard ? t.updateSelfInfo(i).then(function (e) {return new td({ group: e });}) : new td({ group: i }));}).catch(function (r) {return t.probeNetwork().then(function (t) {var o = Bn(t, 2),i = o[0],s = o[1];n.setError(r, i, s).setText(\"groupID=\".concat(e.groupID)).setEnd();}), la.error(\"GroupController.getGroupProfile error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"getGroupMemberProfile\", value: function value(e) {var t = this,n = new ad();n.setMethod(Kd).setText(e.userIDList.length > 5 ? \"userIDList.length=\".concat(e.userIDList.length) : \"userIDList=\".concat(e.userIDList)).setStart(), la.log(\"GroupController.getGroupMemberProfile groupID:\".concat(e.groupID, \" userIDList:\").concat(e.userIDList.join(\",\"))), e.userIDList.length > 50 && (e.userIDList = e.userIDList.slice(0, 50));var r = e.groupID,o = e.userIDList;return this._getGroupMemberProfileAdvance(Nn({}, e, { userIDList: o })).then(function (e) {var n = e.data.members;return ma(n) && 0 !== n.length ? (t._updateLocalGroupMemberMap(r, n), t.tim.getUserProfile({ userIDList: n.map(function (e) {return e.userID;}), tagList: [ip.NICK, ip.AVATAR] })) : od([]);}).then(function (e) {var i = e.data.map(function (e) {return { userID: e.userID, nick: e.nick, avatar: e.avatar };});t._updateLocalGroupMemberMap(r, i);var s = o.filter(function (e) {return t.hasLocalGroupMember(r, e);}).map(function (e) {return t.getLocalGroupMemberInfo(r, e);});return n.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), new td({ memberList: s });});} }, { key: \"_getGroupMemberProfileAdvance\", value: function value(e) {return this.request({ name: \"group\", action: \"getGroupMemberProfile\", param: Nn({}, e, { memberInfoFilter: e.memberInfoFilter ? e.memberInfoFilter : [\"Role\", \"JoinTime\", \"NameCard\", \"ShutUpUntil\"] }) });} }, { key: \"updateSelfInfo\", value: function value(e) {var t = e.groupID;la.log(\"GroupController.updateSelfInfo groupID:\", t);var n = { groupID: t, userIDList: [this.tim.loginInfo.identifier] };return this.getGroupMemberProfile(n).then(function (n) {var r = n.data.memberList;return la.log(\"GroupController.updateSelfInfo ok. groupID:\", t), e && 0 !== r.length && e.updateSelfInfo(r[0]), e;});} }, { key: \"addGroupMember\", value: function value(e) {var t = this,n = new ad();n.setMethod(Hd).setText(\"groupID=\".concat(e.groupID)).setStart();var r = this.getLocalGroupProfile(e.groupID);if (qa(r.type)) {var o = new Mp({ code: Sp.CANNOT_ADD_MEMBER_IN_AVCHATROOM, message: af });return n.setCode(Sp.CANNOT_ADD_MEMBER_IN_AVCHATROOM).setMessage(af).setNetworkType(this.getNetworkType()).setText(\"groupID=\".concat(e.groupID, \" groupType=\").concat(r.type)).setEnd(), id(o);}return e.userIDList = e.userIDList.map(function (e) {return { userID: e };}), la.log(\"GroupController.addGroupMember. groupID:\", e.groupID), this.request({ name: \"group\", action: \"addGroupMember\", param: e }).then(function (o) {var i = o.data.members;n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(e.groupID)).setEnd(), la.log(\"GroupController.addGroupMember ok. groupID:\", e.groupID);var s = i.filter(function (e) {return 1 === e.result;}).map(function (e) {return e.userID;}),a = i.filter(function (e) {return 0 === e.result;}).map(function (e) {return e.userID;}),u = i.filter(function (e) {return 2 === e.result;}).map(function (e) {return e.userID;});return 0 === s.length ? new td({ successUserIDList: s, failureUserIDList: a, existedUserIDList: u }) : (r.memberNum += s.length, new td({ successUserIDList: s, failureUserIDList: a, existedUserIDList: u, group: r }));}).catch(function (r) {return t.probeNetwork().then(function (t) {var o = Bn(t, 2),i = o[0],s = o[1];n.setError(r, i, s).setText(\"groupID=\".concat(e.groupID)).setEnd();}), la.error(\"GroupController.addGroupMember error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"deleteGroupMember\", value: function value(e) {var t = this,n = new ad();n.setMethod(Yd).setText(e.userIDList.length > 5 ? \"userIDList.length=\".concat(e.userIDList.length) : \"userIDList=\".concat(e.userIDList)).setStart(), la.log(\"GroupController.deleteGroupMember groupID:\".concat(e.groupID, \" userIDList:\").concat(e.userIDList));var r = this.getLocalGroupProfile(e.groupID);return r.type === pn.GRP_AVCHATROOM ? id(new Mp({ code: Sp.CANNOT_KICK_MEMBER_IN_AVCHATROOM, message: cf })) : this.request({ name: \"group\", action: \"deleteGroupMember\", param: e }).then(function () {return n.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.deleteGroupMember ok\"), r.memberNum--, t.deleteLocalGroupMembers(e.groupID, e.userIDList), new td({ group: r, userIDList: e.userIDList });}).catch(function (r) {return t.probeNetwork().then(function (t) {var o = Bn(t, 2),i = o[0],s = o[1];n.setError(r, i, s).setText(\"groupID=\".concat(e.groupID)).setEnd();}), la.error(\"GroupController.deleteGroupMember error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"searchGroupByID\", value: function value(e) {var t = this,n = { groupIDList: [e] },r = new ad();return r.setMethod(Ld).setText(\"groupID=\".concat(e)).setStart(), la.log(\"GroupController.searchGroupByID. groupID:\".concat(e)), this.request({ name: \"group\", action: \"searchGroupByID\", param: n }).then(function (n) {var o = n.data.groupProfile;if (o[0].errorCode !== Pu.SUCCESS) throw new Mp({ code: o[0].errorCode, message: o[0].errorInfo });return r.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.searchGroupByID ok. groupID:\".concat(e)), new td({ group: new jv(o[0]) });}).catch(function (n) {return t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];r.setError(n, o, i).setEnd();}), la.warn(\"GroupController.searchGroupByID error:\".concat(Da(n), \" groupID:\").concat(e)), id(n);});} }, { key: \"applyJoinGroup\", value: function value(e) {var t = this,n = new ad();return n.setMethod(wd).setStart(), this.request({ name: \"group\", action: \"applyJoinGroup\", param: e }).then(function (r) {var o = r.data,i = o.joinedStatus,s = o.longPollingKey;switch (n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"groupID=\".concat(e.groupID, \" joinedStatus=\").concat(i)).setEnd(), la.log(\"GroupController.joinGroup ok. groupID:\".concat(e.groupID, \" joinedStatus:\").concat(i, \" longPollingKey:\").concat(s)), i) {case bu.WAIT_APPROVAL:return new td({ status: bu.WAIT_APPROVAL });case bu.SUCCESS:return t.getGroupProfile({ groupID: e.groupID }).then(function (n) {var r = n.data.group,o = { status: bu.SUCCESS, group: r };return va(s) ? (t.emitGroupListUpdate(!0, !1), new td(o)) : (t.emitInnerEvent(Gh, e.groupID), t.AVChatRoomHandler.startRunLoop({ longPollingKey: s, group: r }));});default:var a = new Mp({ code: Sp.JOIN_GROUP_FAIL, message: sf });return la.error(\"GroupController.joinGroup error:\".concat(Da(a), \" groupID:\").concat(e.groupID)), id(a);}}).catch(function (r) {return n.setText(\"groupID=\".concat(e.groupID)), t.probeNetwork().then(function (e) {var t = Bn(e, 2),o = t[0],i = t[1];n.setError(r, o, i).setEnd();}), la.error(\"GroupController.joinGroup error:\".concat(Da(r), \" groupID:\").concat(e.groupID)), id(r);});} }, { key: \"applyJoinAVChatRoom\", value: function value(e) {return this.AVChatRoomHandler.applyJoinAVChatRoom(e);} }, { key: \"handleGroupApplication\", value: function value(e) {var t = this,n = e.message.payload,r = n.groupProfile.groupID,o = n.authentication,i = n.messageKey,s = n.operatorID,a = new ad();return a.setMethod(Pd).setText(\"groupID=\".concat(r)).setStart(), la.log(\"GroupController.handleApplication. groupID:\", r), this.request({ name: \"group\", action: \"handleApplyJoinGroup\", param: Nn({}, e, { applicant: s, groupID: r, authentication: o, messageKey: i }) }).then(function () {return a.setCode(0).setNetworkType(t.getNetworkType()).setEnd(), la.log(\"GroupController.handleApplication ok. groupID:\", r), t.deleteGroupSystemNotice({ messageList: [e.message] }), new td({ group: t.getLocalGroupProfile(r) });}).catch(function (e) {return t.probeNetwork().then(function (t) {var n = Bn(t, 2),r = n[0],o = n[1];a.setError(e, r, o).setEnd();}), la.error(\"GroupController.handleApplication error. error:\".concat(Da(e), \" groupID:\").concat(r)), id(e);});} }, { key: \"deleteGroupSystemNotice\", value: function value(e) {var t = this;return ma(e.messageList) && 0 !== e.messageList.length ? (la.log(\"GroupController.deleteGroupSystemNotice \" + e.messageList.map(function (e) {return e.ID;})), this.request({ name: \"group\", action: \"deleteGroupSystemNotice\", param: { messageListToDelete: e.messageList.map(function (e) {return { from: pn.CONV_SYSTEM, messageSeq: e.clientSequence, messageRandom: e.random };}) } }).then(function () {return la.log(\"GroupController.deleteGroupSystemNotice ok\"), e.messageList.forEach(function (e) {t.tim.messageController.deleteLocalMessage(e);}), new td();}).catch(function (e) {return la.error(\"GroupController.deleteGroupSystemNotice error:\", e), id(e);})) : od();} }, { key: \"getGroupProfileAdvance\", value: function value(e) {return ma(e.groupIDList) && e.groupIDList.length > 50 && (la.warn(\"GroupController.getGroupProfileAdvance 获取群资料的数量不能超过50个\"), e.groupIDList.length = 50), la.log(\"GroupController.getGroupProfileAdvance. groupIDList:\", e.groupIDList), this.request({ name: \"group\", action: \"query\", param: e }).then(function (e) {la.log(\"GroupController.getGroupProfileAdvance ok.\");var t = e.data.groups,n = t.filter(function (e) {return va(e.errorCode) || e.errorCode === Pu.SUCCESS;}),r = t.filter(function (e) {return e.errorCode && e.errorCode !== Pu.SUCCESS;}).map(function (e) {return new Mp({ code: Number(\"500\".concat(e.errorCode)), message: e.errorInfo, data: { groupID: e.groupID } });});return new td({ successGroupList: n, failureGroupList: r });}).catch(function (t) {return la.error(\"GroupController.getGroupProfileAdvance error:\".concat(Da(t), \" groupIDList:\").concat(e.groupIDList)), id(t);});} }, { key: \"_deleteLocalGroup\", value: function value(e) {return this.groupMap.delete(e), this.groupMemberListMap.delete(e), this._setStorageGroupList(), this.groupMap.has(e) && this.groupMemberListMap.has(e);} }, { key: \"_initGroupList\", value: function value() {var e = this,t = new ad();t.setMethod(Vd).setStart(), la.time(sd.INIT_GROUP_LIST), la.log(\"GroupController._initGroupList\");var n = this._getStorageGroupList();ma(n) && n.length > 0 ? (n.forEach(function (t) {e.groupMap.set(t.groupID, new jv(t));}), this.emitGroupListUpdate(!0, !1), t.setCode(0).setNetworkType(this.getNetworkType()).setText(this.groupMap.size).setEnd()) : t.setCode(0).setNetworkType(this.getNetworkType()).setText(0).setEnd(), this.triggerReady(), la.log(\"GroupController._initGroupList ok. initCost=\".concat(la.timeEnd(sd.INIT_GROUP_LIST), \"ms\")), this.getGroupList();} }, { key: \"_initListeners\", value: function value() {var e = this.tim.innerEmitter;e.once(Xf, this._initGroupList, this), e.on(Nh, this._handleUpdateGroupLastMessage, this), e.on(oh, this._handleReceivedGroupMessage, this), e.on(Ph, this._handleProfileUpdated, this);} }, { key: \"emitGroupListUpdate\", value: function value() {var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],n = this.getLocalGroups();t && this.emitInnerEvent(Dh, n), e && this.emitOuterEvent(ln.GROUP_LIST_UPDATED, n);} }, { key: \"_handleReceivedGroupMessage\", value: function value(e) {var t = this,n = e.data.eventDataList;Array.isArray(n) && n.forEach(function (e) {var n = e.conversationID.replace(pn.CONV_GROUP, \"\");t.groupMap.has(n) && (t.groupMap.get(n).nextMessageSeq = e.lastMessage.sequence + 1);});} }, { key: \"_onReceivedGroupSystemNotice\", value: function value(e) {var t = e.data;this.groupNoticeHandler._onReceivedGroupNotice(t);} }, { key: \"_handleUpdateGroupLastMessage\", value: function value(e) {var t = e.data;if (la.log(\"GroupController._handleUpdateGroupLastMessage convNums=\".concat(t.length, \" groupNums=\").concat(this.groupMap.size)), 0 !== this.groupMap.size) {for (var n, r, o, i = !1, s = 0, a = t.length; s < a; s++) {(n = t[s]).conversationID && n.type !== pn.CONV_GROUP && (r = n.conversationID.split(/^GROUP/)[1], (o = this.getLocalGroupProfile(r)) && (o.lastMessage = n.lastMessage, i = !0));}i && (this.groupMap = this._sortLocalGroupList(this.groupMap), this.emitGroupListUpdate(!0, !1));} else this.tempConversationList = t;} }, { key: \"_sortLocalGroupList\", value: function value(e) {var t = jn(e).filter(function (e) {var t = Bn(e, 2);t[0];return !ja(t[1].lastMessage);});return t.sort(function (e, t) {return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;}), new Map([].concat(jn(t), jn(e)));} }, { key: \"_getStorageGroupList\", value: function value() {return this.tim.storage.getItem(\"groupMap\");} }, { key: \"_setStorageGroupList\", value: function value() {var e = this.getLocalGroups().filter(function (e) {var t = e.type;return !qa(t);}).slice(0, 20).map(function (e) {return { groupID: e.groupID, name: e.name, avatar: e.avatar, type: e.type };});this.tim.storage.setItem(\"groupMap\", e);} }, { key: \"updateGroupMap\", value: function value(e) {var t = this;e.forEach(function (e) {t.groupMap.has(e.groupID) ? t.groupMap.get(e.groupID).updateGroup(e) : t.groupMap.set(e.groupID, new jv(e));}), this._setStorageGroupList();} }, { key: \"_updateLocalGroupMemberMap\", value: function value(e, t) {var n = this;return ma(t) && 0 !== t.length ? t.map(function (t) {return n.hasLocalGroupMember(e, t.userID) ? n.getLocalGroupMemberInfo(e, t.userID).updateMember(t) : n.setLocalGroupMember(e, new vy(t)), n.getLocalGroupMemberInfo(e, t.userID);}) : [];} }, { key: \"deleteLocalGroupMembers\", value: function value(e, t) {var n = this.groupMemberListMap.get(e);n && t.forEach(function (e) {n.delete(e);});} }, { key: \"_modifyGroupMemberInfo\", value: function value(e) {var t = this,n = e.groupID,r = e.userID;return this.request({ name: \"group\", action: \"modifyGroupMemberInfo\", param: e }).then(function () {if (t.hasLocalGroupMember(n, r)) {var o = t.getLocalGroupMemberInfo(n, r);return va(e.muteTime) || o.updateMuteUntil(e.muteTime), va(e.role) || o.updateRole(e.role), va(e.nameCard) || o.updateNameCard(e.nameCard), va(e.memberCustomField) || o.updateMemberCustomField(e.memberCustomField), o;}return t.getGroupMemberProfile({ groupID: n, userIDList: [r] }).then(function (e) {return Bn(e.data.memberList, 1)[0];});});} }, { key: \"_groupListTreeShaking\", value: function value(e) {for (var t = new Map(jn(this.groupMap)), n = 0, r = e.length; n < r; n++) {t.delete(e[n].groupID);}this.AVChatRoomHandler.hasJoinedAVChatRoom() && this.AVChatRoomHandler.getJoinedAVChatRoom().forEach(function (e) {t.delete(e);});for (var o = jn(t.keys()), i = 0, s = o.length; i < s; i++) {this.groupMap.delete(o[i]);}} }, { key: \"_handleProfileUpdated\", value: function value(e) {for (var t = this, n = e.data, r = function r(e) {var r = n[e];t.groupMemberListMap.forEach(function (e) {e.has(r.userID) && e.get(r.userID).updateMember({ nick: r.nick, avatar: r.avatar });});}, o = 0; o < n.length; o++) {r(o);}} }, { key: \"getJoinedAVChatRoom\", value: function value() {return this.AVChatRoomHandler.getJoinedAVChatRoom();} }, { key: \"deleteLocalGroupAndConversation\", value: function value(e) {this._deleteLocalGroup(e), this.tim.conversationController.deleteLocalConversation(\"GROUP\".concat(e)), this.emitGroupListUpdate(!0, !1);} }, { key: \"checkJoinedAVChatRoomByID\", value: function value(e) {return this.AVChatRoomHandler.checkJoinedAVChatRoomByID(e);} }, { key: \"getGroupLastSequence\", value: function value(e) {var t = this,n = new ad();n.setMethod(Bd).setStart();var r = 0;if (this.hasLocalGroup(e)) {var o = this.getLocalGroupProfile(e);if (o.lastMessage.lastSequence > 0) return r = o.lastMessage.lastSequence, la.log(\"GroupController.getGroupLastSequence got lastSequence=\".concat(r, \" from local group profile[lastMessage.lastSequence]. groupID=\").concat(e)), n.setCode(0).setNetworkType(this.getNetworkType()).setText(\"got lastSequence=\".concat(r, \" from local group profile[lastMessage.lastSequence]. groupID=\").concat(e)).setEnd(), Promise.resolve(r);if (o.nextMessageSeq > 1) return r = o.nextMessageSeq - 1, la.log(\"GroupController.getGroupLastSequence got lastSequence=\".concat(r, \" from local group profile[nextMessageSeq]. groupID=\").concat(e)), n.setCode(0).setNetworkType(this.getNetworkType()).setText(\"got lastSequence=\".concat(r, \" from local group profile[nextMessageSeq]. groupID=\").concat(e)).setEnd(), Promise.resolve(r);}var i = \"GROUP\".concat(e),s = this.tim.conversationController.getLocalConversation(i);if (s && s.lastMessage.lastSequence) return r = s.lastMessage.lastSequence, la.log(\"GroupController.getGroupLastSequence got lastSequence=\".concat(r, \" from local conversation profile[lastMessage.lastSequence]. groupID=\").concat(e)), n.setCode(0).setNetworkType(this.getNetworkType()).setText(\"got lastSequence=\".concat(r, \" from local conversation profile[lastMessage.lastSequence]. groupID=\").concat(e)).setEnd(), Promise.resolve(r);var a = { groupIDList: [e], responseFilter: { groupBaseInfoFilter: [\"NextMsgSeq\"] } };return this.getGroupProfileAdvance(a).then(function (o) {var i = o.data.successGroupList;return ja(i) ? la.log(\"GroupController.getGroupLastSequence successGroupList is empty. groupID=\".concat(e)) : (r = i[0].nextMessageSeq - 1, la.log(\"GroupController.getGroupLastSequence got lastSequence=\".concat(r, \" from getGroupProfileAdvance. groupID=\").concat(e))), n.setCode(0).setNetworkType(t.getNetworkType()).setText(\"got lastSequence=\".concat(r, \" from getGroupProfileAdvance. groupID=\").concat(e)).setEnd(), r;}).catch(function (r) {return t.probeNetwork().then(function (t) {var o = Bn(t, 2),i = o[0],s = o[1];n.setError(r, i, s).setText(\"get lastSequence failed from getGroupProfileAdvance. groupID=\".concat(e)).setEnd();}), la.warn(\"GroupController.getGroupLastSequence failed. \".concat(r)), id(r);});} }, { key: \"reset\", value: function value() {this.groupMap.clear(), this.groupMemberListMap.clear(), this.resetReady(), this.groupNoticeHandler.reset(), this.AVChatRoomHandler.reset(), this.tim.innerEmitter.once(Xf, this._initGroupList, this);} }]), n;}(Qh),My = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;An(this, n), (r = t.call(this, e)).REALTIME_MESSAGE_TIMEOUT = 11e4, r.LONGPOLLING_ID_TIMEOUT = 3e5, r._currentState = pn.NET_STATE_CONNECTED, r._status = { OPENIM: { lastResponseReceivedTime: 0, jitterCount: 0, failedCount: 0 }, AVCHATROOM: { lastResponseReceivedTime: 0, jitterCount: 0, failedCount: 0 } };var o = r.tim.innerEmitter;return o.on(ah, r._onGetLongPollIDFailed, qn(r)), o.on(ch, r._onOpenIMResponseOK, qn(r)), o.on(uh, r._onOpenIMRequestFailed, qn(r)), o.on(Th, r._onAVChatroomResponseOK, qn(r)), o.on(Sh, r._onAVChatroomRequestFailed, qn(r)), r;}return Rn(n, [{ key: \"_onGetLongPollIDFailed\", value: function value() {this._currentState !== pn.NET_STATE_DISCONNECTED && this._emitNetStateChangeEvent(pn.NET_STATE_DISCONNECTED);} }, { key: \"_onOpenIMResponseOK\", value: function value() {this._onResponseOK(\"OPENIM\");} }, { key: \"_onOpenIMRequestFailed\", value: function value() {this._onRequestFailed(\"OPENIM\");} }, { key: \"_onAVChatroomResponseOK\", value: function value() {this.isLoggedIn() || this._onResponseOK(\"AVCHATROOM\");} }, { key: \"_onAVChatroomRequestFailed\", value: function value() {this.isLoggedIn() || this._onRequestFailed(\"AVCHATROOM\");} }, { key: \"_onResponseOK\", value: function value(e) {var t = this._status[e],n = Date.now();if (0 !== t.lastResponseReceivedTime) {var r = n - t.lastResponseReceivedTime;if (la.debug(\"StatusController._onResponseOK key=\".concat(e, \" currentState=\").concat(this._currentState, \" interval=\").concat(r, \" failedCount=\").concat(t.failedCount, \" jitterCount=\").concat(t.jitterCount)), t.failedCount > 0 && (t.failedCount = 0, t.jitterCount += 1, this._currentState !== pn.NET_STATE_CONNECTED && this._emitNetStateChangeEvent(pn.NET_STATE_CONNECTED)), r <= this.REALTIME_MESSAGE_TIMEOUT) {if (t.jitterCount >= 3) {var o = new ad();o.setMethod(Zd).setStart(), o.setCode(0).setText(\"\".concat(e, \"-\").concat(r, \"-\").concat(t.jitterCount)).setNetworkType(this.getNetworkType()).setEnd(), t.jitterCount = 0;}} else if (r >= this.REALTIME_MESSAGE_TIMEOUT && r < this.LONGPOLLING_ID_TIMEOUT) {var i = new ad();i.setMethod(eg).setStart(), i.setCode(0).setText(\"\".concat(e, \"-\").concat(r)).setNetworkType(this.getNetworkType()).setEnd(), la.warn(\"StatusController._onResponseOK, fast start. key=\".concat(e, \" interval=\").concat(r, \" ms\")), this.emitInnerEvent(lh);} else if (r >= this.LONGPOLLING_ID_TIMEOUT) {var s = new ad();s.setMethod(tg).setStart(), s.setCode(0).setText(\"\".concat(e, \"-\").concat(r)).setNetworkType(this.getNetworkType()).setEnd(), la.warn(\"StatusController._onResponseOK, slow start. key=\".concat(e, \" interval=\").concat(r, \" ms\")), this.emitInnerEvent(ph);}t.lastResponseReceivedTime = n;} else t.lastResponseReceivedTime = n;} }, { key: \"_onRequestFailed\", value: function value(e) {var t = this,n = this._status[e];Date.now() - n.lastResponseReceivedTime >= this.LONGPOLLING_ID_TIMEOUT ? this._currentState !== pn.NET_STATE_DISCONNECTED && (la.warn(\"StatusController._onRequestFailed, disconnected, longpolling unavailable more than 5min. key=\".concat(e, \" networkType=\").concat(this.getNetworkType())), this._emitNetStateChangeEvent(pn.NET_STATE_DISCONNECTED)) : (n.failedCount += 1, n.failedCount > 5 ? this.probeNetwork().then(function (r) {var o = Bn(r, 2),i = o[0],s = o[1];i ? (t._currentState !== pn.NET_STATE_CONNECTING && t._emitNetStateChangeEvent(pn.NET_STATE_CONNECTING), la.warn(\"StatusController._onRequestFailed, connecting, network jitter. key=\".concat(e, \" networkType=\").concat(s))) : (t._currentState !== pn.NET_STATE_DISCONNECTED && t._emitNetStateChangeEvent(pn.NET_STATE_DISCONNECTED), la.warn(\"StatusController._onRequestFailed, disconnected, longpolling unavailable. key=\".concat(e, \" networkType=\").concat(s))), n.failedCount = 0, n.jitterCount = 0;}) : this._currentState === pn.NET_STATE_CONNECTED && this._emitNetStateChangeEvent(pn.NET_STATE_CONNECTING));} }, { key: \"_emitNetStateChangeEvent\", value: function value(e) {la.log(\"StatusController._emitNetStateChangeEvent net state changed from \".concat(this._currentState, \" to \").concat(e)), this._currentState = e, this.emitOuterEvent(ln.NET_STATE_CHANGE, { state: e });} }, { key: \"reset\", value: function value() {la.log(\"StatusController.reset\"), this._currentState = pn.NET_STATE_CONNECTED, this._status = { OPENIM: { lastResponseReceivedTime: 0, jitterCount: 0, failedCount: 0 }, AVCHATROOM: { lastResponseReceivedTime: 0, jitterCount: 0, failedCount: 0 } };} }]), n;}(Qh);function Sy() {return null;}var Ty = function () {function e(t) {An(this, e), this.tim = t, this.isWX = Ns, this.storageQueue = new Map(), this.checkTimes = 0, this.checkTimer = setInterval(this._onCheckTimer.bind(this), 1e3), this._errorTolerantHandle();}return Rn(e, [{ key: \"_errorTolerantHandle\", value: function value() {!this.isWX && va(window.localStorage) && (this.getItem = Sy, this.setItem = Sy, this.removeItem = Sy, this.clear = Sy);} }, { key: \"_onCheckTimer\", value: function value() {if (this.checkTimes++, this.checkTimes % 20 == 0) {if (0 === this.storageQueue.size) return;this._doFlush();}} }, { key: \"_doFlush\", value: function value() {try {var e,t = Yn(this.storageQueue);try {for (t.s(); !(e = t.n()).done;) {var n = Bn(e.value, 2),r = n[0],o = n[1];this.isWX ? wx.setStorageSync(this._getKey(r), o) : localStorage.setItem(this._getKey(r), JSON.stringify(o));}} catch (i) {t.e(i);} finally {t.f();}this.storageQueue.clear();} catch (c_) {la.warn(\"Storage._doFlush error\", c_);}} }, { key: \"_getPrefix\", value: function value() {var e = this.tim.loginInfo,t = e.SDKAppID,n = e.identifier;return \"TIM_\".concat(t, \"_\").concat(n, \"_\");} }, { key: \"getItem\", value: function value(e) {var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];try {var n = t ? this._getKey(e) : e;return this.isWX ? wx.getStorageSync(n) : JSON.parse(localStorage.getItem(n));} catch (c_) {la.warn(\"Storage.getItem error:\", c_);}} }, { key: \"setItem\", value: function value(e, t) {var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];if (n) {var o = r ? this._getKey(e) : e;this.isWX ? wx.setStorageSync(o, t) : localStorage.setItem(o, JSON.stringify(t));} else this.storageQueue.set(e, t);} }, { key: \"clear\", value: function value() {try {this.isWX ? wx.clearStorageSync() : localStorage.clear();} catch (c_) {la.warn(\"Storage.clear error:\", c_);}} }, { key: \"removeItem\", value: function value(e) {var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];try {var n = t ? this._getKey(e) : e;this.isWX ? wx.removeStorageSync(n) : localStorage.removeItem(n);} catch (c_) {la.warn(\"Storage.removeItem error:\", c_);}} }, { key: \"getSize\", value: function value(e) {var t = this,n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"b\";try {var r = { size: 0, limitSize: 5242880, unit: n };if (Object.defineProperty(r, \"leftSize\", { enumerable: !0, get: function get() {return r.limitSize - r.size;} }), this.isWX && (r.limitSize = 1024 * wx.getStorageInfoSync().limitSize), e) r.size = JSON.stringify(this.getItem(e)).length + this._getKey(e).length;else if (this.isWX) {var o = wx.getStorageInfoSync(),i = o.keys;i.forEach(function (e) {r.size += JSON.stringify(wx.getStorageSync(e)).length + t._getKey(e).length;});} else for (var s in localStorage) {localStorage.hasOwnProperty(s) && (r.size += localStorage.getItem(s).length + s.length);}return this._convertUnit(r);} catch (c_) {la.warn(\"Storage.getSize error:\", c_);}} }, { key: \"_convertUnit\", value: function value(e) {var t = {},n = e.unit;for (var r in t.unit = n, e) {\"number\" == typeof e[r] && (\"kb\" === n.toLowerCase() ? t[r] = Math.round(e[r] / 1024) : \"mb\" === n.toLowerCase() ? t[r] = Math.round(e[r] / 1024 / 1024) : t[r] = e[r]);}return t;} }, { key: \"_getKey\", value: function value(e) {return \"\".concat(this._getPrefix()).concat(e);} }, { key: \"reset\", value: function value() {this._doFlush(), this.checkTimes = 0;} }]), e;}(),Dy = t(function (e) {var t = Object.prototype.hasOwnProperty,n = \"~\";function r() {}function o(e, t, n) {this.fn = e, this.context = t, this.once = n || !1;}function i(e, t, r, i, s) {if (\"function\" != typeof r) throw new TypeError(\"The listener must be a function\");var a = new o(r, i || e, s),u = n ? n + t : t;return e._events[u] ? e._events[u].fn ? e._events[u] = [e._events[u], a] : e._events[u].push(a) : (e._events[u] = a, e._eventsCount++), e;}function s(e, t) {0 == --e._eventsCount ? e._events = new r() : delete e._events[t];}function a() {this._events = new r(), this._eventsCount = 0;}Object.create && (r.prototype = Object.create(null), new r().__proto__ || (n = !1)), a.prototype.eventNames = function () {var e,r,o = [];if (0 === this._eventsCount) return o;for (r in e = this._events) {t.call(e, r) && o.push(n ? r.slice(1) : r);}return Object.getOwnPropertySymbols ? o.concat(Object.getOwnPropertySymbols(e)) : o;}, a.prototype.listeners = function (e) {var t = n ? n + e : e,r = this._events[t];if (!r) return [];if (r.fn) return [r.fn];for (var o = 0, i = r.length, s = new Array(i); o < i; o++) {s[o] = r[o].fn;}return s;}, a.prototype.listenerCount = function (e) {var t = n ? n + e : e,r = this._events[t];return r ? r.fn ? 1 : r.length : 0;}, a.prototype.emit = function (e, t, r, o, i, s) {var a = n ? n + e : e;if (!this._events[a]) return !1;var u,c,l = this._events[a],p = arguments.length;if (l.fn) {switch (l.once && this.removeListener(e, l.fn, void 0, !0), p) {case 1:return l.fn.call(l.context), !0;case 2:return l.fn.call(l.context, t), !0;case 3:return l.fn.call(l.context, t, r), !0;case 4:return l.fn.call(l.context, t, r, o), !0;case 5:return l.fn.call(l.context, t, r, o, i), !0;case 6:return l.fn.call(l.context, t, r, o, i, s), !0;}for (c = 1, u = new Array(p - 1); c < p; c++) {u[c - 1] = arguments[c];}l.fn.apply(l.context, u);} else {var f,h = l.length;for (c = 0; c < h; c++) {switch (l[c].once && this.removeListener(e, l[c].fn, void 0, !0), p) {case 1:l[c].fn.call(l[c].context);break;case 2:l[c].fn.call(l[c].context, t);break;case 3:l[c].fn.call(l[c].context, t, r);break;case 4:l[c].fn.call(l[c].context, t, r, o);break;default:if (!u) for (f = 1, u = new Array(p - 1); f < p; f++) {u[f - 1] = arguments[f];}l[c].fn.apply(l[c].context, u);}}}return !0;}, a.prototype.on = function (e, t, n) {return i(this, e, t, n, !1);}, a.prototype.once = function (e, t, n) {return i(this, e, t, n, !0);}, a.prototype.removeListener = function (e, t, r, o) {var i = n ? n + e : e;if (!this._events[i]) return this;if (!t) return s(this, i), this;var a = this._events[i];if (a.fn) a.fn !== t || o && !a.once || r && a.context !== r || s(this, i);else {for (var u = 0, c = [], l = a.length; u < l; u++) {(a[u].fn !== t || o && !a[u].once || r && a[u].context !== r) && c.push(a[u]);}c.length ? this._events[i] = 1 === c.length ? c[0] : c : s(this, i);}return this;}, a.prototype.removeAllListeners = function (e) {var t;return e ? (t = n ? n + e : e, this._events[t] && s(this, t)) : (this._events = new r(), this._eventsCount = 0), this;}, a.prototype.off = a.prototype.removeListener, a.prototype.addListener = a.prototype.on, a.prefixed = n, a.EventEmitter = a, e.exports = a;}),Ay = function Ay(e) {var t, n, r, o, i;return ja(e.context) ? (t = \"\", n = 0, r = 0, o = 0, i = 1) : (t = e.context.a2Key, n = e.context.tinyID, r = e.context.SDKAppID, o = e.context.contentType, i = e.context.apn), { platform: jf, websdkappid: Bf, v: Vf, a2: t, tinyid: n, sdkappid: r, contentType: o, apn: i, reqtime: function reqtime() {return +new Date();} };},ky = function () {function e(t) {An(this, e), this.tim = t, this.tim.innerEmitter.on(Wf, this._update, this), this.tim.innerEmitter.on(zf, this._update, this), this.tim.innerEmitter.on(Jf, this._updateSpecifiedConfig, this), this._initConfig();}return Rn(e, [{ key: \"_update\", value: function value(e) {this._initConfig();} }, { key: \"_updateSpecifiedConfig\", value: function value(e) {var t = this;e.data.forEach(function (e) {t._set(e);});} }, { key: \"get\", value: function value(e) {var t = e.name,n = e.action,r = e.param,o = e.tjgID;if (va(this.config[t]) || va(this.config[t][n])) throw new Mp({ code: Sp.NETWORK_PACKAGE_UNDEFINED, message: \"\".concat(Mf, \": PackageConfig.\").concat(t) });var i = function e(t) {if (0 === Object.getOwnPropertyNames(t).length) return Object.create(null);var n = Array.isArray(t) ? [] : Object.create(null),r = \"\";for (var o in t) {null !== t[o] ? void 0 !== t[o] ? (r = Dn(t[o]), [\"string\", \"number\", \"function\", \"boolean\"].indexOf(r) >= 0 ? n[o] = t[o] : n[o] = e(t[o])) : n[o] = void 0 : n[o] = null;}return n;}(this.config[t][n]);return i.requestData = this._initRequestData(r, i), i.encode = this._initEncoder(i), i.decode = this._initDecoder(i), o && (i.queryString.tjg_id = o), i;} }, { key: \"_set\", value: function value(e) {var t = e.key,n = e.value;if (!1 != !!t) {var r = t.split(\".\");if (!(r.length <= 0)) {!function e(t, n, r, o) {var i = n[r];\"object\" === Dn(t[i]) ? e(t[i], n, r + 1, o) : t[i] = o;}(this.config, r, 0, n);}}} }, { key: \"_initConfig\", value: function value() {var e;this.config = {}, this.config.accessLayer = (e = this.tim, { create: null, query: { serverName: Yf.NAME.WEB_IM, cmd: Yf.CMD.ACCESS_LAYER, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { platform: jf, identifier: e.context.identifier, usersig: e.context.userSig, contentType: e.context.contentType, apn: null !== e.context ? e.context.apn : 1, websdkappid: Bf, v: Vf }, requestData: {} }, update: null, delete: null }), this.config.login = function (e) {return { create: null, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.LOGIN, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { websdkappid: Bf, v: Vf, platform: jf, identifier: e.loginInfo.identifier, usersig: e.loginInfo.userSig, sdkappid: e.loginInfo.SDKAppID, accounttype: e.loginInfo.accountType, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: +new Date() / 1e3 }, requestData: { state: \"Online\" }, keyMaps: { request: { tinyID: \"tinyId\" }, response: { TinyId: \"tinyID\" } } }, update: null, delete: null };}(this.tim), this.config.logout = function (e) {return { create: null, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.LOGOUT_ALL, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { websdkappid: Bf, v: Vf, platform: jf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : \"\", sdkappid: null !== e.loginInfo ? e.loginInfo.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : \"\", reqtime: +new Date() / 1e3 }, requestData: {} }, update: null, delete: null };}(this.tim), this.config.longPollLogout = function (e) {return { create: null, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.LOGOUT_LONG_POLL, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { websdkappid: Bf, v: Vf, platform: jf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return Date.now();} }, requestData: { longPollID: \"\" }, keyMaps: { request: { longPollID: \"LongPollingId\" } } }, update: null, delete: null };}(this.tim), this.config.profile = function (e) {var t = Ay(e),n = Yf.NAME.PROFILE,r = Yf.CHANNEL.XHR,o = Hf;return { query: { serverName: n, cmd: Yf.CMD.PORTRAIT_GET, channel: r, protocol: o, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", userItem: [] }, keyMaps: { request: { toAccount: \"To_Account\", standardSequence: \"StandardSequence\", customSequence: \"CustomSequence\" } } }, update: { serverName: n, cmd: Yf.CMD.PORTRAIT_SET, channel: r, protocol: o, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", profileItem: [{ tag: ip.NICK, value: \"\" }, { tag: ip.GENDER, value: \"\" }, { tag: ip.ALLOWTYPE, value: \"\" }, { tag: ip.AVATAR, value: \"\" }] } } };}(this.tim), this.config.group = function (e) {var t = { websdkappid: Bf, v: Vf, platform: jf, a2: null !== e.context && e.context.a2Key ? e.context.a2Key : void 0, tinyid: null !== e.context && e.context.tinyID ? e.context.tinyID : void 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, accounttype: null !== e.context ? e.context.accountType : 0 },n = { request: { ownerID: \"Owner_Account\", userID: \"Member_Account\", newOwnerID: \"NewOwner_Account\", maxMemberNum: \"MaxMemberCount\", groupCustomField: \"AppDefinedData\", memberCustomField: \"AppMemberDefinedData\", groupCustomFieldFilter: \"AppDefinedDataFilter_Group\", memberCustomFieldFilter: \"AppDefinedDataFilter_GroupMember\", messageRemindType: \"MsgFlag\", userIDList: \"MemberList\", groupIDList: \"GroupIdList\", applyMessage: \"ApplyMsg\", muteTime: \"ShutUpTime\", muteAllMembers: \"ShutUpAllMember\", joinOption: \"ApplyJoinOption\" }, response: { GroupIdList: \"groups\", MsgFlag: \"messageRemindType\", AppDefinedData: \"groupCustomField\", AppMemberDefinedData: \"memberCustomField\", AppDefinedDataFilter_Group: \"groupCustomFieldFilter\", AppDefinedDataFilter_GroupMember: \"memberCustomFieldFilter\", InfoSeq: \"infoSequence\", MemberList: \"members\", GroupInfo: \"groups\", ShutUpUntil: \"muteUntil\", ShutUpAllMember: \"muteAllMembers\", ApplyJoinOption: \"joinOption\" } };return { create: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.CREATE_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { type: pn.GRP_WORK, name: void 0, groupID: void 0, ownerID: e.loginInfo.identifier, introduction: void 0, notification: void 0, avatar: void 0, maxMemberNum: void 0, joinOption: void 0, memberList: void 0, groupCustomField: void 0 }, keyMaps: n }, list: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_JOINED_GROUPS, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { userID: e.loginInfo.identifier, limit: void 0, offset: void 0, groupType: void 0, responseFilter: void 0 }, keyMaps: n }, query: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_GROUP_INFO, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupIDList: void 0, responseFilter: void 0 }, keyMaps: n }, getGroupMemberProfile: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_GROUP_MEMBER_INFO, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, userIDList: void 0, memberInfoFilter: void 0, memberCustomFieldFilter: void 0 }, keyMaps: { request: Nn({}, n.request, { userIDList: \"Member_List_Account\" }), response: n.response } }, getGroupMemberList: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_GROUP_MEMBER_LIST, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, limit: 0, offset: 0, memberRoleFilter: void 0, memberInfoFilter: void 0 }, keyMaps: n }, quitGroup: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.QUIT_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0 } }, changeGroupOwner: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.CHANGE_GROUP_OWNER, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, newOwnerID: void 0 }, keyMaps: n }, destroyGroup: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.DESTROY_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0 } }, updateGroupProfile: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.MODIFY_GROUP_INFO, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, name: void 0, introduction: void 0, notification: void 0, avatar: void 0, maxMemberNum: void 0, joinOption: void 0, groupCustomField: void 0, muteAllMembers: void 0 }, keyMaps: { request: Nn({}, n.request, { groupCustomField: \"AppDefinedData\" }), response: n.response } }, modifyGroupMemberInfo: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.MODIFY_GROUP_MEMBER_INFO, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, userID: void 0, messageRemindType: void 0, nameCard: void 0, role: void 0, memberCustomField: void 0, muteTime: void 0 }, keyMaps: n }, addGroupMember: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.ADD_GROUP_MEMBER, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, silence: void 0, userIDList: void 0 }, keyMaps: n }, deleteGroupMember: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.DELETE_GROUP_MEMBER, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, userIDList: void 0, reason: void 0 }, keyMaps: { request: { userIDList: \"MemberToDel_Account\" } } }, searchGroupByID: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.SEARCH_GROUP_BY_ID, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupIDList: void 0, responseFilter: { groupBasePublicInfoFilter: [\"Type\", \"Name\", \"Introduction\", \"Notification\", \"FaceUrl\", \"CreateTime\", \"Owner_Account\", \"LastInfoTime\", \"LastMsgTime\", \"NextMsgSeq\", \"MemberNum\", \"MaxMemberNum\", \"ApplyJoinOption\"] } }, keyMaps: { request: { groupIDList: \"GroupIdList\" } } }, applyJoinGroup: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.APPLY_JOIN_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0 }, keyMaps: n }, applyJoinAVChatRoom: { serverName: Yf.NAME.BIG_GROUP_NO_AUTH, cmd: Yf.CMD.APPLY_JOIN_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: { websdkappid: Bf, v: Vf, platform: jf, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, accounttype: null !== e.context ? e.context.accountType : 0 }, requestData: { groupID: void 0, applyMessage: void 0, userDefinedField: void 0 }, keyMaps: n }, handleApplyJoinGroup: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.HANDLE_APPLY_JOIN_GROUP, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { groupID: void 0, applicant: void 0, handleAction: void 0, handleMessage: void 0, authentication: void 0, messageKey: void 0, userDefinedField: void 0 }, keyMaps: { request: { applicant: \"Applicant_Account\", handleAction: \"HandleMsg\", handleMessage: \"ApprovalMsg\", messageKey: \"MsgKey\" }, response: { MsgKey: \"messageKey\" } } }, deleteGroupSystemNotice: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.DELETE_GROUP_SYSTEM_MESSAGE, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { messageListToDelete: void 0 }, keyMaps: { request: { messageListToDelete: \"DelMsgList\", messageSeq: \"MsgSeq\", messageRandom: \"MsgRandom\" } } }, getGroupPendency: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_GROUP_PENDENCY, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: t, requestData: { startTime: void 0, limit: void 0, handleAccount: void 0 }, keyMaps: { request: { handleAccount: \"Handle_Account\" } } } };}(this.tim), this.config.longPollID = function (e) {return { create: {}, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.GET_LONG_POLL_ID, channel: Yf.CHANNEL.XHR, protocol: Hf, queryString: { websdkappid: Bf, v: Vf, platform: jf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: +new Date() / 1e3 }, requestData: {}, keyMaps: { response: { LongPollingId: \"longPollingID\" } } }, update: {}, delete: {} };}(this.tim), this.config.longPoll = function (e) {var t = { websdkappid: Bf, v: Vf, platform: jf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, accounttype: null !== e.context ? e.loginInfo.accountType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: Math.ceil(+new Date() / 1e3) };return { create: {}, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.LONG_POLL, channel: Yf.CHANNEL.AUTO, protocol: Hf, queryString: t, requestData: { timeout: null, cookie: { notifySeq: 0, noticeSeq: 0, longPollingID: 0 } }, keyMaps: { response: { C2cMsgArray: \"C2CMessageArray\", GroupMsgArray: \"groupMessageArray\", GroupTips: \"groupTips\", C2cNotifyMsgArray: \"C2CNotifyMessageArray\", ClientSeq: \"clientSequence\", MsgPriority: \"priority\", NoticeSeq: \"noticeSequence\", MsgContent: \"content\", MsgType: \"type\", MsgBody: \"elements\", ToGroupId: \"to\", Desc: \"description\", Ext: \"extension\" } } }, update: {}, delete: {} };}(this.tim), this.config.applyC2C = function (e) {var t = Ay(e),n = Yf.NAME.FRIEND,r = Yf.CHANNEL.XHR,o = Hf;return { create: { serverName: n, cmd: Yf.CMD.FRIEND_ADD, channel: r, protocol: o, queryString: t, requestData: { fromAccount: \"\", addFriendItem: [] } }, get: { serverName: n, cmd: Yf.CMD.GET_PENDENCY, channel: r, protocol: o, queryString: t, requestData: { fromAccount: \"\", pendencyType: \"Pendency_Type_ComeIn\" } }, update: { serverName: n, cmd: Yf.CMD.RESPONSE_PENDENCY, channel: r, protocol: o, queryString: t, requestData: { fromAccount: \"\", responseFriendItem: [] } }, delete: { serverName: n, cmd: Yf.CMD.DELETE_PENDENCY, channel: r, protocol: o, queryString: t, requestData: { fromAccount: \"\", toAccount: [], pendencyType: \"Pendency_Type_ComeIn\" } } };}(this.tim), this.config.friend = function (e) {var t = Ay(e),n = Yf.NAME.FRIEND,r = Yf.CHANNEL.XHR,o = Hf;return { get: { serverName: n, cmd: Yf.CMD.FRIEND_GET_ALL, channel: r, protocol: o, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", timeStamp: 0, tagList: [ip.NICK, \"Tag_SNS_IM_Remark\", ip.AVATAR] }, keyMaps: { request: {}, response: {} } }, delete: { serverName: n, cmd: Yf.CMD.FRIEND_DELETE, channel: r, protocol: o, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", toAccount: [], deleteType: \"Delete_Type_Single\" } } };}(this.tim), this.config.blacklist = function (e) {var t = Ay(e);return { create: { serverName: Yf.NAME.FRIEND, cmd: Yf.CMD.ADD_BLACKLIST, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", toAccount: [] } }, get: { serverName: Yf.NAME.FRIEND, cmd: Yf.CMD.GET_BLACKLIST, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", startIndex: 0, maxLimited: 30, lastSequence: 0 } }, delete: { serverName: Yf.NAME.FRIEND, cmd: Yf.CMD.DELETE_BLACKLIST, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: \"\", toAccount: [] } }, update: {} };}(this.tim), this.config.c2cMessage = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} },n = { request: { fromAccount: \"From_Account\", toAccount: \"To_Account\", msgTimeStamp: \"MsgTimeStamp\", msgSeq: \"MsgSeq\", msgRandom: \"MsgRandom\", msgBody: \"MsgBody\", count: \"MaxCnt\", lastMessageTime: \"LastMsgTime\", messageKey: \"MsgKey\", peerAccount: \"Peer_Account\", data: \"Data\", description: \"Desc\", extension: \"Ext\", type: \"MsgType\", content: \"MsgContent\", sizeType: \"Type\", uuid: \"UUID\", imageUrl: \"URL\", fileUrl: \"Url\", remoteAudioUrl: \"Url\", remoteVideoUrl: \"VideoUrl\", thumbUUID: \"ThumbUUID\", videoUUID: \"VideoUUID\", videoUrl: \"\", downloadFlag: \"Download_Flag\" }, response: { MsgContent: \"content\", MsgTime: \"time\", Data: \"data\", Desc: \"description\", Ext: \"extension\", MsgKey: \"messageKey\", MsgType: \"type\", MsgBody: \"elements\", Download_Flag: \"downloadFlag\", ThumbUUID: \"thumbUUID\", VideoUUID: \"videoUUID\" } };return { create: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.SEND_MESSAGE, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: e.loginInfo.identifier, toAccount: \"\", msgTimeStamp: Math.ceil(+new Date() / 1e3), msgSeq: 0, msgRandom: 0, msgBody: [], msgLifeTime: void 0, offlinePushInfo: { pushFlag: 0, title: \"\", desc: \"\", ext: \"\", apnsInfo: { badgeMode: 0 }, androidInfo: { OPPOChannelID: \"\" } } }, keyMaps: n }, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.GET_C2C_ROAM_MESSAGES, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { peerAccount: \"\", count: 15, lastMessageTime: 0, messageKey: \"\", withRecalledMsg: 1 }, keyMaps: n } };}(this.tim), this.config.c2cMessageWillBeRevoked = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} };return { create: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.REVOKE_C2C_MESSAGE, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { msgInfo: { fromAccount: \"\", toAccount: \"\", msgTimeStamp: Math.ceil(+new Date() / 1e3), msgSeq: 0, msgRandom: 0 } }, keyMaps: { request: { msgInfo: \"MsgInfo\", fromAccount: \"From_Account\", toAccount: \"To_Account\", msgTimeStamp: \"MsgTimeStamp\", msgSeq: \"MsgSeq\", msgRandom: \"MsgRandom\", msgBody: \"MsgBody\" } } } };}(this.tim), this.config.c2cPeerReadTime = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} };return { get: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.GET_PEER_READ_TIME, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { userIDList: void 0 }, keyMaps: { request: { userIDList: \"To_Account\" }, response: { ReadTime: \"peerReadTimeList\" } } } };}(this.tim), this.config.groupMessage = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} },n = { request: { to: \"GroupId\", extension: \"Ext\", data: \"Data\", description: \"Desc\", random: \"Random\", sequence: \"ReqMsgSeq\", count: \"ReqMsgNumber\", type: \"MsgType\", priority: \"MsgPriority\", content: \"MsgContent\", elements: \"MsgBody\", sizeType: \"Type\", uuid: \"UUID\", imageUrl: \"URL\", fileUrl: \"Url\", remoteAudioUrl: \"Url\", remoteVideoUrl: \"VideoUrl\", thumbUUID: \"ThumbUUID\", videoUUID: \"VideoUUID\", videoUrl: \"\", downloadFlag: \"Download_Flag\", clientSequence: \"ClientSeq\" }, response: { Random: \"random\", MsgTime: \"time\", MsgSeq: \"sequence\", ReqMsgSeq: \"sequence\", RspMsgList: \"messageList\", IsPlaceMsg: \"isPlaceMessage\", IsSystemMsg: \"isSystemMessage\", ToGroupId: \"to\", EnumFrom_AccountType: \"fromAccountType\", EnumTo_AccountType: \"toAccountType\", GroupCode: \"groupCode\", MsgPriority: \"priority\", MsgBody: \"elements\", MsgType: \"type\", MsgContent: \"content\", IsFinished: \"complete\", Download_Flag: \"downloadFlag\", ClientSeq: \"clientSequence\", ThumbUUID: \"thumbUUID\", VideoUUID: \"videoUUID\" } };return { create: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.SEND_GROUP_MESSAGE, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { groupID: \"\", fromAccount: e.loginInfo.identifier, random: 0, clientSequence: 0, priority: \"\", msgBody: [], onlineOnlyFlag: 0, offlinePushInfo: { pushFlag: 0, title: \"\", desc: \"\", ext: \"\", apnsInfo: { badgeMode: 0 }, androidInfo: { OPPOChannelID: \"\" } } }, keyMaps: n }, query: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.GET_GROUP_ROAM_MESSAGES, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { withRecalledMsg: 1, groupID: \"\", count: 15, sequence: \"\" }, keyMaps: n }, update: null, delete: null };}(this.tim), this.config.groupMessageWillBeRevoked = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} };return { create: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.REVOKE_GROUP_MESSAGE, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { to: \"\", msgSeqList: [] }, keyMaps: { request: { to: \"GroupId\", msgSeqList: \"MsgSeqList\", msgSeq: \"MsgSeq\" } } } };}(this.tim), this.config.conversation = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1 };return { query: { serverName: Yf.NAME.RECENT_CONTACT, cmd: Yf.CMD.GET_CONVERSATION_LIST, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: e.loginInfo.identifier, count: 0 }, keyMaps: { request: {}, response: { SessionItem: \"conversations\", ToAccount: \"groupID\", To_Account: \"userID\", UnreadMsgCount: \"unreadCount\", MsgGroupReadedSeq: \"messageReadSeq\" } } }, pagingQuery: { serverName: Yf.NAME.RECENT_CONTACT, cmd: Yf.CMD.PAGING_GET_CONVERSATION_LIST, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: void 0, timeStamp: void 0, orderType: void 0 }, keyMaps: { request: {}, response: { SessionItem: \"conversations\", ToAccount: \"groupID\", To_Account: \"userID\", UnreadMsgCount: \"unreadCount\", MsgGroupReadedSeq: \"messageReadSeq\", C2cPeerReadTime: \"c2cPeerReadTime\" } } }, delete: { serverName: Yf.NAME.RECENT_CONTACT, cmd: Yf.CMD.DELETE_CONVERSATION, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { fromAccount: e.loginInfo.identifier, toAccount: void 0, type: 1, toGroupID: void 0 }, keyMaps: { request: { toGroupID: \"ToGroupid\" } } }, setC2CMessageRead: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.SET_C2C_MESSAGE_READ, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { C2CMsgReaded: void 0 }, keyMaps: { request: { lastMessageTime: \"LastedMsgTime\" } } }, setGroupMessageRead: { serverName: Yf.NAME.GROUP, cmd: Yf.CMD.SET_GROUP_MESSAGE_READ, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { groupID: void 0, messageReadSeq: void 0 }, keyMaps: { request: { messageReadSeq: \"MsgReadedSeq\" } } } };}(this.tim), this.config.syncMessage = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return [Math.ceil(+new Date()), Math.random()].join(\"\");} };return { create: null, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.GET_MESSAGES, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { cookie: \"\", syncFlag: 0, needAbstract: 1 }, keyMaps: { request: { fromAccount: \"From_Account\", toAccount: \"To_Account\", from: \"From_Account\", to: \"To_Account\", time: \"MsgTimeStamp\", sequence: \"MsgSeq\", random: \"MsgRandom\", elements: \"MsgBody\" }, response: { MsgList: \"messageList\", SyncFlag: \"syncFlag\", To_Account: \"to\", From_Account: \"from\", ClientSeq: \"clientSequence\", MsgSeq: \"sequence\", NoticeSeq: \"noticeSequence\", NotifySeq: \"notifySequence\", MsgRandom: \"random\", MsgTimeStamp: \"time\", MsgContent: \"content\", ToGroupId: \"groupID\", MsgKey: \"messageKey\", GroupTips: \"groupTips\", MsgBody: \"elements\", MsgType: \"type\", C2CRemainingUnreadCount: \"C2CRemainingUnreadList\" } } }, update: null, delete: null };}(this.tim), this.config.AVChatRoom = function (e) {return { startLongPoll: { serverName: Yf.NAME.BIG_GROUP_LONG_POLLING_NO_AUTH, cmd: Yf.CMD.AVCHATROOM_LONG_POLL, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { websdkappid: Bf, v: Vf, platform: jf, sdkappid: e.loginInfo.SDKAppID, accounttype: \"792\", apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} }, requestData: { USP: 1, startSeq: 1, holdTime: 90, key: void 0 }, keyMaps: { request: { USP: \"USP\" }, response: { ToGroupId: \"groupID\", MsgPriority: \"priority\" } } } };}(this.tim), this.config.cosUpload = function (e) {var t = { platform: jf, websdkappid: Bf, v: Vf, a2: null !== e.context ? e.context.a2Key : \"\", tinyid: null !== e.context ? e.context.tinyID : 0, sdkappid: null !== e.context ? e.context.SDKAppID : 0, contentType: null !== e.context ? e.context.contentType : 0, apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return Date.now();} };return { create: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.FILE_UPLOAD, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { appVersion: \"2.1\", fromAccount: \"\", toAccount: \"\", sequence: 0, time: function time() {return Math.ceil(Date.now() / 1e3);}, random: function random() {return Ra();}, fileStrMd5: \"\", fileSize: \"\", serverVer: 1, authKey: \"\", busiId: 1, pkgFlag: 1, sliceOffset: 0, sliceSize: 0, sliceData: \"\", contentType: \"application/x-www-form-urlencoded\" }, keyMaps: { request: {}, response: {} } }, update: null, delete: null };}(this.tim), this.config.cosSig = function (e) {var t = { sdkappid: function sdkappid() {return e.loginInfo.SDKAppID;}, identifier: function identifier() {return e.loginInfo.identifier;}, userSig: function userSig() {return e.context.userSig;} };return { create: null, query: { serverName: Yf.NAME.IM_COS_SIGN, cmd: Yf.CMD.COS_SIGN, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: t, requestData: { cmd: \"open_im_cos_svc\", subCmd: \"get_cos_token\", duration: 300, version: 2 }, keyMaps: { request: { userSig: \"usersig\", subCmd: \"sub_cmd\", cmd: \"cmd\", duration: \"duration\", version: \"version\" }, response: { expired_time: \"expiredTime\", bucket_name: \"bucketName\", session_token: \"sessionToken\", tmp_secret_id: \"secretId\", tmp_secret_key: \"secretKey\" } } }, update: null, delete: null };}(this.tim), this.config.bigDataHallwayAuthKey = function (e) {return { create: null, query: { serverName: Yf.NAME.OPEN_IM, cmd: Yf.CMD.BIG_DATA_HALLWAY_AUTH_KEY, channel: Yf.CHANNEL.XHR, protocol: Hf, method: \"POST\", queryString: { websdkappid: Bf, v: Vf, platform: jf, sdkappid: e.loginInfo.SDKAppID, accounttype: \"792\", apn: null !== e.context ? e.context.apn : 1, reqtime: function reqtime() {return +new Date();} }, requestData: {} } };}(this.tim), this.config.ssoEventStat = function (e) {var t = { sdkappid: e.loginInfo.SDKAppID, reqtime: Math.ceil(+new Date() / 1e3) };return { create: { serverName: Yf.NAME.IM_OPEN_STAT, cmd: Yf.CMD.TIM_WEB_REPORT, channel: Yf.CHANNEL.AUTO, protocol: Hf, queryString: t, requestData: { table: \"\", report: [] }, keyMaps: { request: { table: \"table\", report: \"report\", SDKAppID: \"sdkappid\", version: \"version\", tinyID: \"tinyid\", userID: \"userid\", platform: \"platform\", method: \"method\", time: \"time\", start: \"start\", end: \"end\", cost: \"cost\", status: \"status\", codeint: \"codeint\", message: \"message\", pointer: \"pointer\", text: \"text\", msgType: \"msgtype\", networkType: \"networktype\", startts: \"startts\", endts: \"endts\", timespan: \"timespan\" } } }, query: {}, update: {}, delete: {} };}(this.tim), this.config.ssoSumStat = function (e) {var t = null;null !== e.context && (t = { sdkappid: e.context.SDKAppID, reqtime: Math.ceil(+new Date() / 1e3) });return { create: { serverName: Yf.NAME.IM_OPEN_STAT, cmd: Yf.CMD.TIM_WEB_REPORT, channel: Yf.CHANNEL.AUTO, protocol: Hf, queryString: t, requestData: { table: \"\", report: [] }, keyMaps: { request: { table: \"table\", report: \"report\", SDKAppID: \"sdkappid\", version: \"version\", tinyID: \"tinyid\", userID: \"userid\", item: \"item\", lpID: \"lpid\", platform: \"platform\", networkType: \"networktype\", total: \"total\", successRate: \"successrate\", avg: \"avg\", timespan: \"timespan\", time: \"time\" } } }, query: {}, update: {}, delete: {} };}(this.tim);} }, { key: \"_initRequestData\", value: function value(e, t) {if (void 0 === e) return Hh(t.requestData, this._getRequestMap(t), this.tim);var n = t.requestData,r = Object.create(null);for (var o in n) {if (Object.prototype.hasOwnProperty.call(n, o)) {if (r[o] = \"function\" == typeof n[o] ? n[o]() : n[o], void 0 === e[o]) continue;r[o] = e[o];}}return r = Hh(r, this._getRequestMap(t), this.tim);} }, { key: \"_getRequestMap\", value: function value(e) {if (e.keyMaps && e.keyMaps.request && Object.keys(e.keyMaps.request).length > 0) return e.keyMaps.request;} }, { key: \"_initEncoder\", value: function value(e) {switch (e.protocol) {case Hf:return function (e) {if (\"string\" === Dn(e)) try {return JSON.parse(e);} catch (c_) {return e;}return e;};case Kf:return function (e) {return e;};default:return function (e) {return la.warn(\"PackageConfig._initEncoder(), unknow response type, data: \", JSON.stringify(e)), e;};}} }, { key: \"_initDecoder\", value: function value(e) {switch (e.protocol) {case Hf:return function (e) {if (\"string\" === Dn(e)) try {return JSON.parse(e);} catch (c_) {return e;}return e;};case Kf:return function (e) {return e;};default:return function (e) {return la.warn(\"PackageConfig._initDecoder(), unknow response type, data: \", e), e;};}} }]), e;}(),Ry = Math.floor;Re({ target: \"Number\", stat: !0 }, { isInteger: function isInteger(e) {return !m(e) && isFinite(e) && Ry(e) === e;} });var Oy = function Oy() {for (var e = [], t = wy(arguments), n = 0; n < arguments.length; n++) {Number.isInteger(arguments[n]) ? e.push(arguments[n]) : e.push(!0 == !!arguments[n] ? \"1\" : \"0\");}return e.join(t);},wy = function wy(e) {var t = e.length,n = e[t - 1];if (\"string\" != typeof n) return \"\";if (n.length > 1) return \"\";var r = e[t - 1];return delete e[t - 1], e.length -= t === e.length ? 1 : 0, r;},Ny = { C2CMessageArray: 1, groupMessageArray: 1, groupTips: 1, C2CNotifyMessageArray: 1, profileModify: 1, friendListMod: 1 },Ly = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e))._initialization(), r;}return Rn(n, [{ key: \"_initialization\", value: function value() {this._syncOffset = \"\", this._syncNoticeList = [], this._syncEventArray = [], this._syncMessagesIsRunning = !1, this._syncMessagesFinished = !1, this._isLongPoll = !1, this._longPollID = 0, this._noticeSequence = 0, this._initializeListener(), this._runLoop = null, this._initShuntChannels();} }, { key: \"_initShuntChannels\", value: function value() {this._shuntChannels = Object.create(null), this._shuntChannels.C2CMessageArray = this._C2CMessageArrayChannel.bind(this), this._shuntChannels.groupMessageArray = this._groupMessageArrayChannel.bind(this), this._shuntChannels.groupTips = this._groupTipsChannel.bind(this), this._shuntChannels.C2CNotifyMessageArray = this._C2CNotifyMessageArrayChannel.bind(this), this._shuntChannels.profileModify = this._profileModifyChannel.bind(this), this._shuntChannels.friendListMod = this._friendListModChannel.bind(this);} }, { key: \"_C2CMessageArrayChannel\", value: function value(e, t, n) {this.emitInnerEvent(dh, t);} }, { key: \"_groupMessageArrayChannel\", value: function value(e, t, n) {this.emitInnerEvent(gh, t);} }, { key: \"_groupTipsChannel\", value: function value(e, t, n) {var r = this;switch (e) {case 4:case 6:this.emitInnerEvent(mh, t);break;case 5:t.forEach(function (e) {ma(e.elements.revokedInfos) ? r.emitInnerEvent(Eh, t) : r.emitInnerEvent(vh, { groupSystemNotices: t, type: n });});break;default:la.log(\"NotificationController._groupTipsChannel unknown event=\".concat(e, \" type=\").concat(n), t);}} }, { key: \"_C2CNotifyMessageArrayChannel\", value: function value(e, t, n) {if (t[0]) {var r = t[0];r.hasOwnProperty(\"kickoutMsgNotify\") ? this.emitInnerEvent(hh) : r.hasOwnProperty(\"sysCmdMsgNotify\") ? this.emitInnerEvent(Ih) : r.hasOwnProperty(\"c2cMessageRevokedNotify\") ? this.emitInnerEvent(Ch, t) : r.hasOwnProperty(\"c2cMessageReadReceipt\") && this.emitInnerEvent(Mh, t);}} }, { key: \"_profileModifyChannel\", value: function value(e, t, n) {this.emitInnerEvent(_h, t);} }, { key: \"_friendListModChannel\", value: function value(e, t, n) {this.emitInnerEvent(yh, t);} }, { key: \"_dispatchNotice\", value: function value(e) {var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"poll\";if (ma(e)) for (var n = null, r = null, o = \"\", i = \"\", s = \"\", a = 0, u = 0, c = e.length; u < c; u++) {a = (n = e[u]).event, o = Object.keys(n).find(function (e) {return void 0 !== Ny[e];}), _a(this._shuntChannels[o]) ? (r = n[o], \"poll\" === t && this._updatenoticeSequence(r), this._shuntChannels[o](a, r, t)) : (\"poll\" === t && this._updatenoticeSequence(), i = \"\".concat(Sp.NOTICE_RUNLOOP_UNEXPECTED_CONDITION), s = \"\".concat(Df, \": \").concat(a, \", \").concat(o), this.emitInnerEvent(wh, new Mp({ code: i, message: s, data: { payloadName: o, event: a } })), i = \"\", s = \"\");}} }, { key: \"getLongPollID\", value: function value() {return this._longPollID;} }, { key: \"_IAmReady\", value: function value() {this.triggerReady();} }, { key: \"reset\", value: function value() {this._noticeSequence = 0, this._resetSync(), this.closeNoticeChannel();} }, { key: \"_resetSync\", value: function value() {this._syncOffset = \"\", this._syncNoticeList = [], this._syncEventArray = [], this._syncMessagesIsRunning = !1, this._syncMessagesFinished = !1;} }, { key: \"_setNoticeSeqInRequestData\", value: function value(e) {e.Cookie.NoticeSeq = this._noticeSequence, this.tim.sumStatController.addTotalCount(sd.LONG_POLLING);} }, { key: \"_updatenoticeSequence\", value: function value(e) {if (e) {var t = e[e.length - 1].noticeSequence;t && \"number\" == typeof t ? t <= this._noticeSequence || (this._noticeSequence = t) : this._noticeSequence++;} else this._noticeSequence++;} }, { key: \"_initializeListener\", value: function value() {var e = this.tim.innerEmitter;e.on(Xf, this._startSyncMessages, this), e.on(Rh, this.closeNoticeChannel, this), e.on(lh, this._onFastStart, this);} }, { key: \"openNoticeChannel\", value: function value() {la.log(\"NotificationController.openNoticeChannel\"), this._getLongPollID();} }, { key: \"closeNoticeChannel\", value: function value() {la.log(\"NotificationController.closeNoticeChannel\"), (this._runLoop instanceof Sv || this._runLoop instanceof Tv) && (this._runLoop.abort(), this._runLoop.stop()), this._longPollID = 0, this._isLongPoll = !1;} }, { key: \"_getLongPollID\", value: function value() {var e = this;if (0 === this._longPollID) {var t = new ad();t.setMethod(Jd).setStart(), this.request({ name: \"longPollID\", action: \"query\" }).then(function (n) {var r = n.data.longPollingID;e._onGetLongPollIDSuccess(r), t.setCode(0).setText(\"longPollingID=\".concat(r)).setNetworkType(e.getNetworkType()).setEnd();}).catch(function (n) {var r = new Mp({ code: n.code || Sp.GET_LONGPOLL_ID_FAILED, message: n.message || kf });e.emitInnerEvent(ah), e.emitInnerEvent(wh, r), e.probeNetwork().then(function (e) {var n = Bn(e, 2),o = n[0],i = n[1];t.setError(r, o, i).setEnd();});});} else this._onGetLongPollIDSuccess(this._longPollID);} }, { key: \"_onGetLongPollIDSuccess\", value: function value(e) {this.emitInnerEvent(Jf, [{ key: \"long_poll_logout.query.requestData.longPollingID\", value: e }, { key: \"longPoll.query.requestData.cookie.longPollingID\", value: e }]), this._longPollID = e, this._startLongPoll(), this._IAmReady(), this.tim.sumStatController.recordLongPollingID(this._longPollID);} }, { key: \"_startLongPoll\", value: function value() {if (!0 !== this._isLongPoll) {la.log(\"NotificationController._startLongPoll...\");var e = this.tim.connectionController,t = this.createTransportCapsule({ name: \"longPoll\", action: \"query\" });this._isLongPoll = !0, this._runLoop = e.createRunLoop({ pack: t, before: this._setNoticeSeqInRequestData.bind(this), success: this._onNoticeReceived.bind(this), fail: this._onNoticeFail.bind(this) }), this._runLoop.start();} else la.log(\"NotificationController._startLongPoll is running...\");} }, { key: \"_onFastStart\", value: function value() {this.closeNoticeChannel(), this.syncMessage();} }, { key: \"_onNoticeReceived\", value: function value(e) {var t = e.data;if (t.errorCode !== Pu.SUCCESS) {var n = new ad();n.setMethod(Qd).setStart(), n.setMessage(t.errorInfo || JSON.stringify(t)).setCode(t.errorCode).setNetworkType(this.getNetworkType()).setEnd(!0), this._onResponseError(t);} else this.emitInnerEvent(ch);this.tim.sumStatController.addSuccessCount(sd.LONG_POLLING), this.tim.sumStatController.addCost(sd.LONG_POLLING, t.timecost), e.data.eventArray && this._dispatchNotice(e.data.eventArray);} }, { key: \"_onResponseError\", value: function value(e) {switch (e.errorCode) {case Sp.LONG_POLL_KICK_OUT:la.warn(\"NotificationController._onResponseError, longPollingID=\".concat(this._longPollID, \" was kicked out\")), this.emitInnerEvent(fh), this.closeNoticeChannel();break;case Sp.MESSAGE_A2KEY_EXPIRED:case Sp.ACCOUNT_A2KEY_EXPIRED:this.emitInnerEvent(Oh);break;default:va(e.errorCode) || va(e.errorInfo) ? la.log(\"NotificationController._onResponseError, errorCode or errorInfo undefined!\", e) : this.emitInnerEvent(wh, new Mp({ code: e.errorCode, message: e.errorInfo }));}} }, { key: \"_onNoticeFail\", value: function value(e) {if (e.error) if (\"ECONNABORTED\" === e.error.code || e.error.code === Sp.NETWORK_TIMEOUT) {if (e.error.config) {var t = e.error.config.url,n = e.error.config.data;la.log(\"NotificationController._onNoticeFail request timed out. url=\".concat(t, \" data=\").concat(n));} else la.log(\"NotificationController._onNoticeFail request timed out.\");} else la.log(\"NotificationController._onNoticeFail request failed due to network error\");this.emitInnerEvent(uh);} }, { key: \"_startSyncMessages\", value: function value(e) {!0 !== this._syncMessagesFinished && this.syncMessage();} }, { key: \"syncMessage\", value: function value() {var e = this,t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\",n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;this._syncMessagesIsRunning = !0, this.request({ name: \"syncMessage\", action: \"query\", param: { cookie: t, syncFlag: n } }).then(function (t) {var n = t.data;switch (Oy(n.cookie, n.syncFlag)) {case \"00\":case \"01\":e.emitInnerEvent(wh, { code: Sp.NOTICE_RUNLOOP_OFFSET_LOST, message: Af });break;case \"10\":case \"11\":n.eventArray && e._dispatchNotice(n.eventArray, \"sync\"), e._syncNoticeList = e._syncNoticeList.concat(n.messageList), e.emitInnerEvent(Qf, { data: n.messageList, C2CRemainingUnreadList: n.C2CRemainingUnreadList }), e._syncOffset = n.cookie, e.syncMessage(n.cookie, n.syncFlag);break;case \"12\":n.eventArray && e._dispatchNotice(n.eventArray, \"sync\"), e.openNoticeChannel(), e._syncNoticeList = e._syncNoticeList.concat(n.messageList), e.emitInnerEvent(Zf, { messageList: n.messageList, C2CRemainingUnreadList: n.C2CRemainingUnreadList }), e._syncOffset = n.cookie, e._syncNoticeList = [], e._syncMessagesIsRunning = !1, e._syncMessagesFinished = !0;}}).catch(function (t) {e._syncMessagesIsRunning = !1, la.error(\"NotificationController.syncMessage failed. error:\", t);});} }]), n;}(Qh),by = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).COSSDK = null, r._cosUploadMethod = null, r.expiredTimeLimit = 300, r.appid = 0, r.bucketName = \"\", r.ciUrl = \"\", r.directory = \"\", r.downloadUrl = \"\", r.uploadUrl = \"\", r.expiredTimeOut = r.expiredTimeLimit, r.region = \"ap-shanghai\", r.cos = null, r.cosOptions = { secretId: \"\", secretKey: \"\", sessionToken: \"\", expiredTime: 0 }, r._timer = 0, r.tim.innerEmitter.on(Xf, r._init, qn(r)), r.triggerReady(), r;}return Rn(n, [{ key: \"_expiredTimer\", value: function value() {var e = this;this._timer = setInterval(function () {Math.ceil(Date.now() / 1e3) >= e.cosOptions.expiredTime - 60 && (e._getAuthorizationKey(), clearInterval(e._timer));}, 3e4);} }, { key: \"_init\", value: function value() {var e = Ns ? \"cos-wx-sdk\" : \"cos-js-sdk\";this.COSSDK = this.tim.getPlugin(e), this.COSSDK ? this._getAuthorizationKey() : la.warn(\"UploadController._init 没有检测到上传插件，将无法发送图片、音频、视频、文件等类型的消息。详细请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#registerPlugin\");} }, { key: \"_getAuthorizationKey\", value: function value() {var e = this,t = Math.ceil(Date.now() / 1e3),n = new ad();n.setMethod(gd).setStart(), this.request({ name: \"cosSig\", action: \"query\", param: { duration: this.expiredTimeLimit } }).then(function (r) {la.log(\"UploadController._getAuthorizationKey ok. data:\", r.data);var o = r.data,i = o.expiredTime - t;n.setCode(0).setText(\"timeout=\".concat(i, \"s\")).setNetworkType(e.getNetworkType()).setEnd(), e.appid = o.appid, e.bucketName = o.bucketName, e.ciUrl = o.ciUrl, e.directory = o.directory, e.downloadUrl = o.downloadUrl, e.uploadUrl = o.uploadUrl, e.expiredTimeOut = i, e.cosOptions = { secretId: o.secretId, secretKey: o.secretKey, sessionToken: o.sessionToken, expiredTime: o.expiredTime }, e._initUploaderMethod(), e._expiredTimer();}).catch(function (t) {e.probeNetwork().then(function (n) {var r = Bn(n, 2),o = r[0],i = r[1];e.setError(t, o, i).setEnd();}), la.warn(\"UploadController._getAuthorizationKey failed. error:\", t);});} }, { key: \"_initUploaderMethod\", value: function value() {var e = this;this.appid && (this.cos = Ns ? new this.COSSDK({ ForcePathStyle: !0, getAuthorization: this._getAuthorization.bind(this) }) : new this.COSSDK({ getAuthorization: this._getAuthorization.bind(this) }), this._cosUploadMethod = Ns ? function (t, n) {e.cos.postObject(t, n);} : function (t, n) {e.cos.uploadFiles(t, n);});} }, { key: \"_getAuthorization\", value: function value(e, t) {t({ TmpSecretId: this.cosOptions.secretId, TmpSecretKey: this.cosOptions.secretKey, XCosSecurityToken: this.cosOptions.sessionToken, ExpiredTime: this.cosOptions.expiredTime });} }, { key: \"uploadImage\", value: function value(e) {if (!e.file) return id(new Mp({ code: Sp.MESSAGE_IMAGE_SELECT_FILE_FIRST, message: qp }));var t = this._checkImageType(e.file);if (!0 !== t) return t;var n = this._checkImageMime(e.file);if (!0 !== n) return n;var r = this._checkImageSize(e.file);return !0 !== r ? r : this.upload(e);} }, { key: \"_checkImageType\", value: function value(e) {var t = \"\";return t = Ns ? e.url.slice(e.url.lastIndexOf(\".\") + 1) : e.files[0].name.slice(e.files[0].name.lastIndexOf(\".\") + 1), Of.indexOf(t.toLowerCase()) >= 0 || id(new Mp({ coe: Sp.MESSAGE_IMAGE_TYPES_LIMIT, message: Fp }));} }, { key: \"_checkImageMime\", value: function value(e) {return !0;} }, { key: \"_checkImageSize\", value: function value(e) {var t = 0;return 0 === (t = Ns ? e.size : e.files[0].size) ? id(new Mp({ code: Sp.MESSAGE_FILE_IS_EMPTY, message: \"\".concat(Gp) })) : t < 20971520 || id(new Mp({ coe: Sp.MESSAGE_IMAGE_SIZE_LIMIT, message: \"\".concat(Vp) }));} }, { key: \"uploadFile\", value: function value(e) {var t = null;return e.file ? e.file.files[0].size > 104857600 ? (t = new Mp({ code: Sp.MESSAGE_FILE_SIZE_LIMIT, message: zp }), id(t)) : 0 === e.file.files[0].size ? (t = new Mp({ code: Sp.MESSAGE_FILE_IS_EMPTY, message: \"\".concat(Gp) }), id(t)) : this.upload(e) : (t = new Mp({ code: Sp.MESSAGE_FILE_SELECT_FILE_FIRST, message: Wp }), id(t));} }, { key: \"uploadVideo\", value: function value(e) {return e.file.videoFile.size > 104857600 ? id(new Mp({ code: Sp.MESSAGE_VIDEO_SIZE_LIMIT, message: \"\".concat(Hp) })) : 0 === e.file.videoFile.size ? id(new Mp({ code: Sp.MESSAGE_FILE_IS_EMPTY, message: \"\".concat(Gp) })) : -1 === wf.indexOf(e.file.videoFile.type) ? id(new Mp({ code: Sp.MESSAGE_VIDEO_TYPES_LIMIT, message: \"\".concat(Yp) })) : Ns ? this.handleVideoUpload({ file: e.file.videoFile }) : ws ? this.handleVideoUpload(e) : void 0;} }, { key: \"handleVideoUpload\", value: function value(e) {var t = this;return new Promise(function (n, r) {t.upload(e).then(function (e) {n(e);}).catch(function () {t.upload(e).then(function (e) {n(e);}).catch(function () {r(new Mp({ code: Sp.MESSAGE_VIDEO_UPLOAD_FAIL, message: Kp }));});});});} }, { key: \"uploadAudio\", value: function value(e) {return e.file ? e.file.size > 20971520 ? id(new Mp({ code: Sp.MESSAGE_AUDIO_SIZE_LIMIT, message: \"\".concat(jp) })) : 0 === e.file.size ? id(new Mp({ code: Sp.MESSAGE_FILE_IS_EMPTY, message: \"\".concat(Gp) })) : this.upload(e) : id(new Mp({ code: Sp.MESSAGE_AUDIO_UPLOAD_FAIL, message: Bp }));} }, { key: \"upload\", value: function value(e) {var t = this;if (!_a(this._cosUploadMethod)) return la.warn(\"UploadController.upload 没有检测到上传插件，将无法发送图片、音频、视频、文件等类型的消息。详细请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html#registerPlugin\"), id(new Mp({ code: Sp.COS_UNDETECTED, message: wp }));var n = new ad();n.setMethod(md).setStart(), la.time(sd.UPLOAD);var r = Ns ? e.file : e.file.files[0];return new Promise(function (o, i) {var s = Ns ? t._createCosOptionsWXMiniApp(e) : t._createCosOptionsWeb(e),a = t;t._cosUploadMethod(s, function (e, s) {var u = Object.create(null);if (s) {if (e || ma(s.files) && s.files[0].error) {var c = new Mp({ code: Sp.MESSAGE_FILE_UPLOAD_FAIL, message: $p });return n.setError(c, !0, t.getNetworkType()).setEnd(), la.log(\"UploadController.upload failed, error:\", s.files[0].error), 403 === s.files[0].error.statusCode && (la.warn(\"UploadController.upload failed. cos AccessKeyId was invalid, regain auth key!\"), t._getAuthorizationKey()), void i(c);}u.fileName = r.name, u.fileSize = r.size, u.fileType = r.type.slice(r.type.indexOf(\"/\") + 1).toLowerCase(), u.location = Ns ? s.Location : s.files[0].data.Location;var l = la.timeEnd(sd.UPLOAD),p = a._formatFileSize(r.size),f = a._formatSpeed(1e3 * r.size / l),h = \"size=\".concat(p, \",time=\").concat(l, \"ms,speed=\").concat(f);return la.log(\"UploadController.upload success name=\".concat(r.name, \",\").concat(h)), o(u), void n.setCode(0).setNetworkType(t.getNetworkType()).setText(h).setEnd();}var d = new Mp({ code: Sp.MESSAGE_FILE_UPLOAD_FAIL, message: $p });n.setError(d, !0, a.getNetworkType()).setEnd(), la.warn(\"UploadController.upload failed, error:\", e), 403 === e.statusCode && (la.warn(\"UploadController.upload failed. cos AccessKeyId was invalid, regain auth key!\"), t._getAuthorizationKey()), i(d);});});} }, { key: \"_formatFileSize\", value: function value(e) {return e < 1024 ? e + \"B\" : e < 1048576 ? Math.floor(e / 1024) + \"KB\" : Math.floor(e / 1048576) + \"MB\";} }, { key: \"_formatSpeed\", value: function value(e) {return e <= 1048576 ? (e / 1024).toFixed(1) + \"KB/s\" : (e / 1048576).toFixed(1) + \"MB/s\";} }, { key: \"_createCosOptionsWeb\", value: function value(e) {var t = this.tim.context.identifier,n = this._genFileName(t, e.to, e.file.files[0].name);return { files: [{ Bucket: \"\".concat(this.bucketName, \"-\").concat(this.appid), Region: this.region, Key: \"\".concat(this.directory, \"/\").concat(n), Body: e.file.files[0] }], SliceSize: 1048576, onProgress: function onProgress(t) {if (\"function\" == typeof e.onProgress) try {e.onProgress(t.percent);} catch (n) {la.warn(\"onProgress callback error:\", n), la.error(n);}}, onFileFinish: function onFileFinish(e, t, n) {} };} }, { key: \"_createCosOptionsWXMiniApp\", value: function value(e) {var t = this.tim.context.identifier,n = this._genFileName(t, e.to, e.file.name),r = e.file.url;return { Bucket: \"\".concat(this.bucketName, \"-\").concat(this.appid), Region: this.region, Key: \"\".concat(this.directory, \"/\").concat(n), FilePath: r, onProgress: function onProgress(t) {if (la.log(JSON.stringify(t)), \"function\" == typeof e.onProgress) try {e.onProgress(t.percent);} catch (n) {la.warn(\"onProgress callback error:\", n), la.error(n);}} };} }, { key: \"_genFileName\", value: function value(e, t, n) {return \"\".concat(e, \"-\").concat(t, \"-\").concat(Ra(99999), \"-\").concat(n);} }, { key: \"reset\", value: function value() {this._timer && (clearInterval(this._timer), this._timer = 0);} }]), n;}(Qh),Py = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).FILETYPE = { SOUND: 2106, FILE: 2107, VIDEO: 2113 }, r._bdh_download_server = \"grouptalk.c2c.qq.com\", r._BDHBizID = 10001, r._authKey = \"\", r._expireTime = 0, r.tim.innerEmitter.on(Xf, r._getAuthKey, qn(r)), r;}return Rn(n, [{ key: \"_getAuthKey\", value: function value() {var e = this;this.request({ name: \"bigDataHallwayAuthKey\", action: \"query\" }).then(function (t) {t.data.authKey && (e._authKey = t.data.authKey, e._expireTime = parseInt(t.data.expireTime));});} }, { key: \"_isFromOlderVersion\", value: function value(e) {return 2 !== e.content.downloadFlag;} }, { key: \"parseElements\", value: function value(e, t) {if (!ma(e) || !t) return [];for (var n = [], r = null, o = 0; o < e.length; o++) {r = e[o], this._needParse(r) ? n.push(this._parseElement(r, t)) : n.push(e[o]);}return n;} }, { key: \"_needParse\", value: function value(e) {return !(!this._isFromOlderVersion(e) || e.type !== pn.MSG_AUDIO && e.type !== pn.MSG_FILE && e.type !== pn.MSG_VIDEO);} }, { key: \"_parseElement\", value: function value(e, t) {switch (e.type) {case pn.MSG_AUDIO:return this._parseAudioElement(e, t);case pn.MSG_FILE:return this._parseFileElement(e, t);case pn.MSG_VIDEO:return this._parseVideoElement(e, t);}} }, { key: \"_parseAudioElement\", value: function value(e, t) {return e.content.url = this._genAudioUrl(e.content.uuid, t), e;} }, { key: \"_parseFileElement\", value: function value(e, t) {return e.content.url = this._genFileUrl(e.content.uuid, t, e.content.fileName), e;} }, { key: \"_parseVideoElement\", value: function value(e, t) {return e.content.url = this._genVideoUrl(e.content.uuid, t), e;} }, { key: \"_genAudioUrl\", value: function value(e, t) {return \"\" === this._authKey ? (la.warn(\"BigDataHallwayController._genAudioUrl no authKey!\"), \"\") : \"https://\".concat(this._bdh_download_server, \"/asn.com/stddownload_common_file?authkey=\").concat(this._authKey, \"&bid=\").concat(this._BDHBizID, \"&subbid=\").concat(this.tim.context.SDKAppID, \"&fileid=\").concat(e, \"&filetype=\").concat(this.FILETYPE.SOUND, \"&openid=\").concat(t, \"&ver=0\");} }, { key: \"_genFileUrl\", value: function value(e, t, n) {return \"\" === this._authKey ? (la.warn(\"BigDataHallwayController._genFileUrl no authKey!\"), \"\") : (n || (n = \"\".concat(Math.floor(1e5 * Math.random()), \"-\").concat(Date.now())), \"https://\".concat(this._bdh_download_server, \"/asn.com/stddownload_common_file?authkey=\").concat(this._authKey, \"&bid=\").concat(this._BDHBizID, \"&subbid=\").concat(this.tim.context.SDKAppID, \"&fileid=\").concat(e, \"&filetype=\").concat(this.FILETYPE.FILE, \"&openid=\").concat(t, \"&ver=0&filename=\").concat(encodeURIComponent(n)));} }, { key: \"_genVideoUrl\", value: function value(e, t) {return \"\" === this._authKey ? (la.warn(\"BigDataHallwayController._genVideoUrl no authKey!\"), \"\") : \"https://\".concat(this._bdh_download_server, \"/asn.com/stddownload_common_file?authkey=\").concat(this._authKey, \"&bid=\").concat(this._BDHBizID, \"&subbid=\").concat(this.tim.context.SDKAppID, \"&fileid=\").concat(e, \"&filetype=\").concat(this.FILETYPE.VIDEO, \"&openid=\").concat(t, \"&ver=0\");} }, { key: \"reset\", value: function value() {this._authKey = \"\", this.expireTime = 0;} }]), n;}(Qh),Gy = { app_id: \"\", event_id: \"\", api_base: \"https://pingtas.qq.com/pingd\", prefix: \"_mta_\", version: \"1.3.9\", stat_share_app: !1, stat_pull_down_fresh: !1, stat_reach_bottom: !1, stat_param: !0 };function Uy() {try {var e = \"s\" + xy();return wx.setStorageSync(Gy.prefix + \"ssid\", e), e;} catch (t) {}}function xy(e) {for (var t = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], n = 10; 1 < n; n--) {var r = Math.floor(10 * Math.random()),o = t[r];t[r] = t[n - 1], t[n - 1] = o;}for (n = r = 0; 5 > n; n++) {r = 10 * r + t[n];}return (e || \"\") + (r + \"\") + +new Date();}function qy() {try {var e = getCurrentPages(),t = \"/\";return 0 < e.length && (t = e.pop().__route__), t;} catch (n) {__f__(\"log\", \"get current page path error:\" + n, \" at tim-js-sdk/tim-js.js:1\");}}function Fy() {var e,t = { dm: \"wechat.apps.xx\", url: encodeURIComponent(qy() + jy(Ky.Data.pageQuery)), pvi: \"\", si: \"\", ty: 0 };return t.pvi = ((e = function () {try {return wx.getStorageSync(Gy.prefix + \"auid\");} catch (t) {}}()) || (e = function () {try {var t = xy();return wx.setStorageSync(Gy.prefix + \"auid\", t), t;} catch (e) {}}(), t.ty = 1), e), t.si = function () {var e = function () {try {return wx.getStorageSync(Gy.prefix + \"ssid\");} catch (e) {}}();return e || (e = Uy()), e;}(), t;}function Vy() {var e = function () {var e = wx.getSystemInfoSync();return { adt: encodeURIComponent(e.model), scl: e.pixelRatio, scr: e.windowWidth + \"x\" + e.windowHeight, lg: e.language, fl: e.version, jv: encodeURIComponent(e.system), tz: encodeURIComponent(e.platform) };}();return function (e) {wx.getNetworkType({ success: function success(t) {e(t.networkType);} });}(function (e) {try {wx.setStorageSync(Gy.prefix + \"ntdata\", e);} catch (t) {}}), e.ct = wx.getStorageSync(Gy.prefix + \"ntdata\") || \"4g\", e;}function By() {var e,t = Ky.Data.userInfo,n = [];for (e in t) {t.hasOwnProperty(e) && n.push(e + \"=\" + t[e]);}return t = n.join(\";\"), { r2: Gy.app_id, r4: \"wx\", ext: \"v=\" + Gy.version + (null !== t && \"\" !== t ? \";ui=\" + encodeURIComponent(t) : \"\") };}function jy(e) {if (!Gy.stat_param || !e) return \"\";e = function (e) {if (1 > Gy.ignore_params.length) return e;var t,n = {};for (t in e) {0 <= Gy.ignore_params.indexOf(t) || (n[t] = e[t]);}return n;}(e);var t,n = [];for (t in e) {n.push(t + \"=\" + e[t]);}return 0 < n.length ? \"?\" + n.join(\"&\") : \"\";}var Ky = { App: { init: function init(e) {\"appID\" in e && (Gy.app_id = e.appID), \"eventID\" in e && (Gy.event_id = e.eventID), \"statShareApp\" in e && (Gy.stat_share_app = e.statShareApp), \"statPullDownFresh\" in e && (Gy.stat_pull_down_fresh = e.statPullDownFresh), \"statReachBottom\" in e && (Gy.stat_reach_bottom = e.statReachBottom), \"ignoreParams\" in e && (Gy.ignore_params = e.ignoreParams), \"statParam\" in e && (Gy.stat_param = e.statParam), Uy();try {\"lauchOpts\" in e && (Ky.Data.lanchInfo = e.lauchOpts, Ky.Data.lanchInfo.landing = 1);} catch (t) {}\"autoReport\" in e && e.autoReport && function () {var e = Page;Page = function Page(t) {var n = t.onLoad;t.onLoad = function (e) {n && n.call(this, e), Ky.Data.lastPageQuery = Ky.Data.pageQuery, Ky.Data.pageQuery = e, Ky.Data.lastPageUrl = Ky.Data.pageUrl, Ky.Data.pageUrl = qy(), Ky.Data.show = !1, Ky.Page.init();}, e(t);};}();} }, Page: { init: function init() {var e,t = getCurrentPages()[getCurrentPages().length - 1];t.onShow && (e = t.onShow, t.onShow = function () {if (!0 === Ky.Data.show) {var t = Ky.Data.lastPageQuery;Ky.Data.lastPageQuery = Ky.Data.pageQuery, Ky.Data.pageQuery = t, Ky.Data.lastPageUrl = Ky.Data.pageUrl, Ky.Data.pageUrl = qy();}Ky.Data.show = !0, Ky.Page.stat(), e.apply(this, arguments);}), Gy.stat_pull_down_fresh && t.onPullDownRefresh && function () {var e = t.onPullDownRefresh;t.onPullDownRefresh = function () {Ky.Event.stat(Gy.prefix + \"pulldownfresh\", { url: t.__route__ }), e.apply(this, arguments);};}(), Gy.stat_reach_bottom && t.onReachBottom && function () {var e = t.onReachBottom;t.onReachBottom = function () {Ky.Event.stat(Gy.prefix + \"reachbottom\", { url: t.__route__ }), e.apply(this, arguments);};}(), Gy.stat_share_app && t.onShareAppMessage && function () {var e = t.onShareAppMessage;t.onShareAppMessage = function () {return Ky.Event.stat(Gy.prefix + \"shareapp\", { url: t.__route__ }), e.apply(this, arguments);};}();}, multiStat: function multiStat(e, t) {if (1 == t) Ky.Page.stat(e);else {var n = getCurrentPages()[getCurrentPages().length - 1];n.onShow && function () {var t = n.onShow;n.onShow = function () {Ky.Page.stat(e), t.call(this, arguments);};}();}}, stat: function stat(e) {if (\"\" != Gy.app_id) {var t = [],n = By();if (e && (n.r2 = e), e = [Fy(), n, Vy()], Ky.Data.lanchInfo) {e.push({ ht: Ky.Data.lanchInfo.scene }), Ky.Data.pageQuery && Ky.Data.pageQuery._mta_ref_id && e.push({ rarg: Ky.Data.pageQuery._mta_ref_id });try {1 == Ky.Data.lanchInfo.landing && (n.ext += \";lp=1\", Ky.Data.lanchInfo.landing = 0);} catch (i) {}}e.push({ rdm: \"/\", rurl: 0 >= Ky.Data.lastPageUrl.length ? Ky.Data.pageUrl + jy(Ky.Data.lastPageQuery) : encodeURIComponent(Ky.Data.lastPageUrl + jy(Ky.Data.lastPageQuery)) }), e.push({ rand: +new Date() }), n = 0;for (var r = e.length; n < r; n++) {for (var o in e[n]) {e[n].hasOwnProperty(o) && t.push(o + \"=\" + (void 0 === e[n][o] ? \"\" : e[n][o]));}}wx.request({ url: Gy.api_base + \"?\" + t.join(\"&\").toLowerCase() });}} }, Event: { stat: function stat(e, t) {if (\"\" != Gy.event_id) {var n = [],r = Fy(),o = By();r.dm = \"wxapps.click\", r.url = e, o.r2 = Gy.event_id;var i,s = void 0 === t ? {} : t,a = [];for (i in s) {s.hasOwnProperty(i) && a.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(s[i]));}for (s = a.join(\";\"), o.r5 = s, s = 0, o = (r = [r, o, Vy(), { rand: +new Date() }]).length; s < o; s++) {for (var u in r[s]) {r[s].hasOwnProperty(u) && n.push(u + \"=\" + (void 0 === r[s][u] ? \"\" : r[s][u]));}}wx.request({ url: Gy.api_base + \"?\" + n.join(\"&\").toLowerCase() });}} }, Data: { userInfo: null, lanchInfo: null, pageQuery: null, lastPageQuery: null, pageUrl: \"\", lastPageUrl: \"\", show: !1 } },Hy = Ky,Yy = function () {function e() {An(this, e), this.cache = [], this.MtaWX = null, this._init();}return Rn(e, [{ key: \"report\", value: function value(e, t) {var n = this;try {ws ? window.MtaH5 ? (window.MtaH5.clickStat(e, t), this.cache.forEach(function (e) {var t = e.name,r = e.param;window.MtaH5.clickStat(t, r), n.cache.shift();})) : this.cache.push({ name: e, param: t }) : Ns && (this.MtaWX ? (this.MtaWX.Event.stat(e, t), this.cache.forEach(function (e) {var t = e.name,r = e.param;n.MtaWX.stat(t, r), n.cache.shift();})) : this.cache.push({ name: e, param: t }));} catch (c_) {}} }, { key: \"stat\", value: function value() {try {ws && window.MtaH5 ? window.MtaH5.pgv() : Ns && this.MtaWX && this.MtaWX.Page.stat();} catch (c_) {}} }, { key: \"_init\", value: function value() {try {if (ws) {window._mtac = { autoReport: 0 };var e = document.createElement(\"script\"),t = ba();e.src = \"\".concat(t, \"//pingjs.qq.com/h5/stats.js?v2.0.4\"), e.setAttribute(\"name\", \"MTAH5\"), e.setAttribute(\"sid\", \"500690998\"), e.setAttribute(\"cid\", \"500691017\");var n = document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(e, n);} else Ns && (this.MtaWX = Hy, this.MtaWX.App.init({ appID: \"500690995\", eventID: \"500691014\", autoReport: !1, statParam: !0 }));} catch (c_) {}} }]), e;}(),$y = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;An(this, n), (r = t.call(this, e)).MTA = new Yy();var o = r.tim.innerEmitter;return o.on(xh, r._stat, qn(r)), o.on(Uh, r._stat, qn(r)), r;}return Rn(n, [{ key: \"_stat\", value: function value() {this.MTA.report(\"sdkappid\", { value: this.tim.context.SDKAppID }), this.MTA.report(\"version\", { value: u_.VERSION }), this.MTA.stat();} }]), n;}(Qh),Wy = function () {function e(t) {An(this, e), this._table = \"timwebii\", this._report = [];}return Rn(e, [{ key: \"pushIn\", value: function value(e) {la.debug(\"SSOLogBody.pushIn\", this._report.length, e), this._report.push(e);} }, { key: \"backfill\", value: function value(e) {var t;ma(e) && 0 !== e.length && (la.debug(\"SSOLogBody.backfill\", this._report.length, e.length), (t = this._report).unshift.apply(t, jn(e)));} }, { key: \"getLogsNumInMemory\", value: function value() {return this._report.length;} }, { key: \"isEmpty\", value: function value() {return 0 === this._report.length;} }, { key: \"_reset\", value: function value() {this._report.length = 0, this._report = [];} }, { key: \"getTable\", value: function value() {return this._table;} }, { key: \"getLogsInMemory\", value: function value() {var e = this._report.slice();return this._reset(), e;} }]), e;}(),zy = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).TAG = \"im-ssolog-event\", r._reportBody = new Wy(), r._version = \"2.7.1\", r.MIN_THRESHOLD = 20, r.MAX_THRESHOLD = 100, r.WAITING_TIME = 6e4, r.INTERVAL = 2e4, r._timerID = 0, r._resetLastReportTime(), r._startReportTimer(), r._retryCount = 0, r.MAX_RETRY_COUNT = 3, r.tim.innerEmitter.on(Ah, r._onLoginSuccess, qn(r)), r;}return Rn(n, [{ key: \"reportAtOnce\", value: function value() {la.debug(\"EventStatController.reportAtOnce\"), this._report();} }, { key: \"_onLoginSuccess\", value: function value() {var e = this,t = this.tim.storage,n = t.getItem(this.TAG, !1);ja(n) || (la.log(\"EventStatController._onLoginSuccess get ssolog in storage, nums=\" + n.length), n.forEach(function (t) {e._reportBody.pushIn(t);}), t.removeItem(this.TAG, !1));} }, { key: \"pushIn\", value: function value(e) {e instanceof ad && (e.setCommonInfo(this.tim.context.SDKAppID, this._version, this.tim.context.tinyID, this.tim.loginInfo.identifier, this.getPlatform()), this._reportBody.pushIn(e), this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD && this._report());} }, { key: \"_resetLastReportTime\", value: function value() {this._lastReportTime = Date.now();} }, { key: \"_startReportTimer\", value: function value() {var e = this;this._timerID = setInterval(function () {Date.now() < e._lastReportTime + e.WAITING_TIME || e._reportBody.isEmpty() || e._report();}, this.INTERVAL);} }, { key: \"_stopReportTimer\", value: function value() {this._timerID > 0 && (clearInterval(this._timerID), this._timerID = 0);} }, { key: \"_report\", value: function value() {var e = this;if (!this._reportBody.isEmpty()) {var t = this._reportBody.getLogsInMemory();this.request({ name: \"ssoEventStat\", action: \"create\", param: { table: this._reportBody.getTable(), report: t } }).then(function () {e._resetLastReportTime(), e._retryCount > 0 && (la.debug(\"EventStatController.report retry success\"), e._retryCount = 0);}).catch(function (n) {if (la.warn(\"EventStatController.report, networkType:\".concat(e.getNetworkType(), \" error:\").concat(Da(n))), e._reportBody.backfill(t), e._reportBody.getLogsNumInMemory() > e.MAX_THRESHOLD || e._retryCount === e.MAX_RETRY_COUNT || 0 === e._timerID) return e._retryCount = 0, void e._flushAtOnce();e._retryCount += 1;});}} }, { key: \"_flushAtOnce\", value: function value() {var e = this.tim.storage,t = e.getItem(this.TAG, !1),n = this._reportBody.getLogsInMemory();if (ja(t)) la.log(\"EventStatController._flushAtOnce nums=\" + n.length), e.setItem(this.TAG, n, !0, !1);else {var r = n.concat(t);r.length > this.MAX_THRESHOLD && (r = r.slice(0, this.MAX_THRESHOLD)), la.log(\"EventStatController._flushAtOnce nums=\" + r.length), e.setItem(this.TAG, r, !0, !1);}} }, { key: \"reset\", value: function value() {la.log(\"EventStatController.reset\"), this._stopReportTimer(), this._report();} }]), n;}(Qh),Xy = \"none\",Jy = \"online\",Qy = function () {function e() {An(this, e), this._networkType = \"\", this.maxWaitTime = 3e3;}return Rn(e, [{ key: \"start\", value: function value() {var e = this;Ns ? (wx.getNetworkType({ success: function success(t) {e._networkType = t.networkType, t.networkType === Xy ? la.warn(\"NetMonitor no network, please check!\") : la.info(\"NetMonitor networkType:\".concat(t.networkType));} }), wx.onNetworkStatusChange(this._onWxNetworkStatusChange.bind(this))) : this._networkType = Jy;} }, { key: \"_onWxNetworkStatusChange\", value: function value(e) {this._networkType = e.networkType, e.isConnected ? la.info(\"NetMonitor networkType:\".concat(e.networkType)) : la.warn(\"NetMonitor no network, please check!\");} }, { key: \"probe\", value: function value() {var e = this;return new Promise(function (t, n) {if (Ns) wx.getNetworkType({ success: function success(n) {e._networkType = n.networkType, n.networkType === Xy ? (la.warn(\"NetMonitor no network, please check!\"), t([!1, n.networkType])) : (la.info(\"NetMonitor networkType:\".concat(n.networkType)), t([!0, n.networkType]));} });else if (window && window.fetch) fetch(\"\".concat(ba(), \"//webim-1252463788.file.myqcloud.com/assets/test/speed.xml?random=\").concat(Math.random())).then(function (e) {e.ok ? t([!0, Jy]) : t([!1, Xy]);}).catch(function (e) {t([!1, Xy]);});else {var r = new XMLHttpRequest(),o = setTimeout(function () {la.warn(\"NetMonitor fetch timeout. Probably no network, please check!\"), r.abort(), e._networkType = Xy, t([!1, Xy]);}, e.maxWaitTime);r.onreadystatechange = function () {4 === r.readyState && (clearTimeout(o), 200 === r.status || 304 === r.status ? (this._networkType = Jy, t([!0, Jy])) : (la.warn(\"NetMonitor fetch status:\".concat(r.status, \". Probably no network, please check!\")), this._networkType = Xy, t([!1, Xy])));}, r.open(\"GET\", \"\".concat(ba(), \"//webim-1252463788.file.myqcloud.com/assets/test/speed.xml?random=\").concat(Math.random())), r.send();}});} }, { key: \"getNetworkType\", value: function value() {return this._networkType;} }, { key: \"reset\", value: function value() {this._networkType = \"\";} }]), e;}(),Zy = function () {function e(t) {var n = this;An(this, e), ma(t) ? (this._map = new Map(), t.forEach(function (e) {n._map.set(e, []);})) : la.warn(\"AverageCalculator.constructor need keys\");}return Rn(e, [{ key: \"push\", value: function value(e, t) {return !(va(e) || !this._map.has(e) || !fa(t)) && (this._map.get(e).push(t), !0);} }, { key: \"getSize\", value: function value(e) {return va(e) || !this._map.has(e) ? -1 : this._map.get(e).length;} }, { key: \"getAvg\", value: function value(e) {if (va(e) || !this._map.has(e)) return -1;var t = this._map.get(e),n = t.length;if (0 === n) return 0;var r = 0;return t.forEach(function (e) {r += e;}), t.length = 0, this._map.set(e, []), parseInt(r / n);} }, { key: \"getMax\", value: function value(e) {return va(e) || !this._map.has(e) ? -1 : Math.max.apply(null, this._map.get(e));} }, { key: \"getMin\", value: function value(e) {return va(e) || !this._map.has(e) ? -1 : Math.min.apply(null, this._map.get(e));} }, { key: \"reset\", value: function value() {this._map.forEach(function (e) {e.length = 0;});} }]), e;}(),e_ = function () {function e(t) {var n = this;An(this, e), ma(t) ? (this._map = new Map(), t.forEach(function (e) {n._map.set(e, { totalCount: 0, successCount: 0 });})) : la.warn(\"SuccessRateCalculator.constructor need keys\");}return Rn(e, [{ key: \"addTotalCount\", value: function value(e) {return !(va(e) || !this._map.has(e)) && (this._map.get(e).totalCount += 1, !0);} }, { key: \"addSuccessCount\", value: function value(e) {return !(va(e) || !this._map.has(e)) && (this._map.get(e).successCount += 1, !0);} }, { key: \"getSuccessRate\", value: function value(e) {if (va(e) || !this._map.has(e)) return -1;var t = this._map.get(e);if (0 === t.totalCount) return 1;var n = parseFloat((t.successCount / t.totalCount).toFixed(2));return n > 1 && (n = 1), t.totalCount = t.successCount = 0, n;} }, { key: \"getTotalCount\", value: function value(e) {return va(e) || !this._map.has(e) ? -1 : this._map.get(e).totalCount;} }, { key: \"reset\", value: function value() {this._map.forEach(function (e) {e.totalCount = 0, e.successCount = 0;});} }]), e;}(),t_ = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e)).TABLE = \"timwebsum\", r.TAG = \"im-ssolog-sumstat\", r._items = [sd.LONG_POLLING, sd.LONG_POLLING_AV, sd.SEND_MESSAGE, sd.SEND_MESSAGE_C2C, sd.SEND_MESSAGE_GROUP_WORK, sd.SEND_MESSAGE_GROUP_PUBLIC, sd.SEND_MESSAGE_GROUP_MEETING, sd.SEND_MESSAGE_GROUP_AV, sd.MESSAGE_RECEIVED, sd.MESSAGE_RECEIVED_AV], r._thresholdMap = new Map(), r._thresholdMap.set(sd.LONG_POLLING, 100), r._thresholdMap.set(sd.LONG_POLLING_AV, 150), r._thresholdMap.set(sd.SEND_MESSAGE, 15), r._thresholdMap.set(sd.SEND_MESSAGE_C2C, 6), r._thresholdMap.set(sd.SEND_MESSAGE_GROUP_WORK, 6), r._thresholdMap.set(sd.SEND_MESSAGE_GROUP_PUBLIC, 6), r._thresholdMap.set(sd.SEND_MESSAGE_GROUP_MEENTING, 6), r._thresholdMap.set(sd.SEND_MESSAGE_GROUP_AV, 6), r._thresholdMap.set(sd.MESSAGE_RECEIVED, 50), r._thresholdMap.set(sd.MESSAGE_RECEIVED_AV, 50), r._lpID = \"\", r._platform = r.getPlatform(), r._lastReportTime = 0, r._statInfoArr = [], r._retryCount = 0, r._avgCalc = new Zy(r._items), r._successRateCalc = new e_(r._items), r.tim.innerEmitter.on(Ah, r._onLoginSuccess, qn(r)), r;}return Rn(n, [{ key: \"_onLoginSuccess\", value: function value() {var e = this,t = this.tim.storage,n = t.getItem(this.TAG, !1);ja(n) || (la.log(\"SumStatController._onLoginSuccess get sumstatlog in storage, nums=\" + n.length), n.forEach(function (t) {e._statInfoArr.pushIn(t);}), t.removeItem(this.TAG, !1));} }, { key: \"recordLongPollingID\", value: function value(e) {this._lpID = e;} }, { key: \"addTotalCount\", value: function value(e) {this._successRateCalc.addTotalCount(e) ? 1 === this._successRateCalc.getTotalCount(e) && (this._lastReportTime = Date.now()) : la.warn(\"SumStatController.addTotalCount invalid key:\", e);} }, { key: \"addSuccessCount\", value: function value(e) {this._successRateCalc.addSuccessCount(e) || la.warn(\"SumStatController.addSuccessCount invalid key:\", e);} }, { key: \"addCost\", value: function value(e, t) {this._avgCalc.push(e, t) ? (la.debug(\"SumStatController.addCost\", e, t, this._avgCalc.getSize(e)), this._avgCalc.getSize(e) >= this._thresholdMap.get(e) && this._report(e)) : la.warn(\"SumStatController.addCost invalid key or cost:\", e, t);} }, { key: \"_getItemNum\", value: function value(e) {switch (e) {case sd.LONG_POLLING:return 1;case sd.LONG_POLLING_AV:return 2;case sd.SEND_MESSAGE:return 3;case sd.MESSAGE_RECEIVED:return 4;case sd.MESSAGE_RECEIVED_AV:return 5;case sd.SEND_MESSAGE_C2C:return 6;case sd.SEND_MESSAGE_GROUP_WORK:return 7;case sd.SEND_MESSAGE_GROUP_PUBLIC:return 8;case sd.SEND_MESSAGE_GROUP_MEETING:return 9;case sd.SEND_MESSAGE_GROUP_AV:return 10;default:return 100;}} }, { key: \"_getStatInfo\", value: function value(e) {var t = null;return this._avgCalc.getSize(e) > 0 && (t = { SDKAppID: \"\".concat(this.tim.context.SDKAppID), version: \"\".concat(\"2.7.1\"), tinyID: this.tim.context.tinyID, userID: this.tim.loginInfo.identifier, item: this._getItemNum(e), lpID: e === sd.LONG_POLLING ? this._lpID : \"\", platform: this._platform, networkType: this.getNetworkType(), total: this._successRateCalc.getTotalCount(e), successRate: this._successRateCalc.getSuccessRate(e), avg: this._avgCalc.getAvg(e), timespan: Date.now() - this._lastReportTime, time: Aa() }), t;} }, { key: \"_report\", value: function value(e) {var t = this,n = [],r = null;va(e) ? this._items.forEach(function (e) {null !== (r = t._getStatInfo(e)) && n.push(r);}) : null !== (r = this._getStatInfo(e)) && n.push(r), la.debug(\"SumStatController._report\", n), this._statInfoArr.length > 0 && (n = n.concat(this.statInfoArr), this._statInfoArr = []), this._doReport(n);} }, { key: \"_doReport\", value: function value(e) {var t = this;ja(e) ? la.warn(\"SumStatController._doReport statInfoArr is empty, do nothing\") : this.request({ name: \"ssoSumStat\", action: \"create\", param: { table: this.TABLE, report: e } }).then(function () {t._lastReportTime = Date.now(), t._retryCount > 0 && (la.debug(\"SumStatController._doReport retry success\"), t._retryCount = 0);}).catch(function (n) {la.warn(\"SumStatController._doReport, online:\".concat(t.getNetworkType(), \" error:\").concat(Da(n)), e), t._retryCount <= 1 ? setTimeout(function () {la.info(\"SumStatController._doReport retry\", e), t._retryCount += 1, t._doReport(e);}, 5e3) : (t._retryCount = 0, t._statInfoArr = t._statInfoArr.concat(e), t._flusgAtOnce());});} }, { key: \"_flushAtOnce\", value: function value() {var e = this.tim.storage,t = e.getItem(this.TAG, !1),n = this._statInfoArr;if (ja(t)) la.log(\"SumStatController._flushAtOnce nums=\" + n.length), e.setItem(this.TAG, n, !0, !1);else {var r = n.concat(t);r.length > 10 && (r = r.slice(0, 10)), la.log(\"SumStatController._flushAtOnce nums=\" + r.length), e.setItem(this.TAG, r, !0, !1);}this._statInfoArr = [];} }, { key: \"reset\", value: function value() {la.info(\"SumStatController.reset\"), this._report(), this._avgCalc.reset(), this._successRateCalc.reset();} }]), n;}(Qh),n_ = function () {function e() {An(this, e), this._funcMap = new Map();}return Rn(e, [{ key: \"defense\", value: function value(e, t) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;if (\"string\" != typeof e) return null;if (0 === e.length) return null;if (\"function\" != typeof t) return null;if (this._funcMap.has(e) && this._funcMap.get(e).has(t)) return this._funcMap.get(e).get(t);this._funcMap.has(e) || this._funcMap.set(e, new Map());var r = null;return this._funcMap.get(e).has(t) ? r = this._funcMap.get(e).get(t) : (r = this._pack(e, t, n), this._funcMap.get(e).set(t, r)), r;} }, { key: \"defenseOnce\", value: function value(e, t) {var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;return \"function\" != typeof t ? null : this._pack(e, t, n);} }, { key: \"find\", value: function value(e, t) {return \"string\" != typeof e || 0 === e.length || \"function\" != typeof t ? null : this._funcMap.has(e) ? this._funcMap.get(e).has(t) ? this._funcMap.get(e).get(t) : (la.log(\"SafetyCallback.find: 找不到 func —— \".concat(e, \"/\").concat(\"\" !== t.name ? t.name : \"[anonymous]\")), null) : (la.log(\"SafetyCallback.find: 找不到 eventName-\".concat(e, \" 对应的 func\")), null);} }, { key: \"delete\", value: function value(e, t) {return \"function\" == typeof t && !!this._funcMap.has(e) && !!this._funcMap.get(e).has(t) && (this._funcMap.get(e).delete(t), 0 === this._funcMap.get(e).size && this._funcMap.delete(e), !0);} }, { key: \"_pack\", value: function value(e, t, n) {return function () {try {t.apply(n, Array.from(arguments));} catch (o) {var r = new ad();r.setMethod(cg).setText(\"eventName=\".concat(e)).setStart(), r.setCode(0).setMessage(o.message).setEnd();}};} }]), e;}(),r_ = function (e) {Ln(n, e);var t = Vn(n);function n(e) {var r;return An(this, n), (r = t.call(this, e))._maybeLostSequencesMap = new Map(), r;}return Rn(n, [{ key: \"onMessageMaybeLost\", value: function value(e, t, n) {this._maybeLostSequencesMap.has(e) || this._maybeLostSequencesMap.set(e, []);for (var r = this._maybeLostSequencesMap.get(e), o = 0; o < n; o++) {r.push(t + o);}la.debug(\"MessageLossController.onMessageMaybeLost. maybeLostSequences:\".concat(r));} }, { key: \"detectMessageLoss\", value: function value(e, t) {var n = this._maybeLostSequencesMap.get(e);if (!ja(n) && !ja(t)) {var r = t.filter(function (e) {return -1 !== n.indexOf(e);});if (la.debug(\"MessageLossController.detectMessageLoss. matchedSequences:\".concat(r)), n.length === r.length) la.info(\"MessageLossController.detectMessageLoss no message loss. conversationID=\".concat(e));else {var o,i = n.filter(function (e) {return -1 === r.indexOf(e);}),s = i.length;s <= 5 ? o = e + \"-\" + i.join(\"-\") : (i.sort(function (e, t) {return e - t;}), o = e + \" start:\" + i[0] + \" end:\" + i[s - 1] + \" count:\" + s);var a = new ad();a.setMethod(ng).setStart(), a.setCode(0).setText(o).setNetworkType(this.getNetworkType()).setEnd(), la.warn(\"MessageLossController.detectMessageLoss message loss detected. conversationID:\".concat(e, \" lostSequences:\").concat(i));}n.length = 0;}} }, { key: \"reset\", value: function value() {la.log(\"MessageLossController.reset\"), this._maybeLostSequencesMap.clear();} }]), n;}(Qh),o_ = function () {function e(t) {An(this, e);var n = new ad();n.setMethod(ud).setStart(), Jh.mixin(this), this._initOptions(t), this._initMemberVariables(), this._initControllers(), this._initListener(), ad.bindController(this.eventStatController), n.setCode(0).setText(\"mp=\".concat(Ns, \"-ua=\").concat(Ls)).setEnd(), la.info(\"SDK inWxMiniApp:\".concat(Ns, \", SDKAppID:\").concat(t.SDKAppID, \", UserAgent:\").concat(Ls)), this._safetyCallbackFactory = new n_();}return Rn(e, [{ key: \"login\", value: function value(e) {return la.time(sd.SDK_READY), this._ssoLog = new ad(), this._ssoLog.setMethod(cd).setStart(), this.netMonitor.start(), this.loginInfo.identifier = e.identifier || e.userID, this.loginInfo.userSig = e.userSig, this.signController.login(this.loginInfo);} }, { key: \"logout\", value: function value() {var e = this.signController.logout();return this.resetSDK(), e;} }, { key: \"on\", value: function value(e, t, n) {e === ln.GROUP_SYSTEM_NOTICE_RECEIVED && la.warn(\"！！！TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED v2.6.0起弃用，为了更好的体验，请在 TIM.EVENT.MESSAGE_RECEIVED 事件回调内接收处理群系统通知，详细请参考：https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/Message.html#.GroupSystemNoticePayload\"), la.debug(\"on\", \"eventName:\".concat(e)), this.outerEmitter.on(e, this._safetyCallbackFactory.defense(e, t, n), n);} }, { key: \"once\", value: function value(e, t, n) {la.debug(\"once\", \"eventName:\".concat(e)), this.outerEmitter.once(e, this._safetyCallbackFactory.defenseOnce(e, t, n), n || this);} }, { key: \"off\", value: function value(e, t, n, r) {la.debug(\"off\", \"eventName:\".concat(e));var o = this._safetyCallbackFactory.find(e, t);null !== o && (this.outerEmitter.off(e, o, n, r), this._safetyCallbackFactory.delete(e, t));} }, { key: \"registerPlugin\", value: function value(e) {var t = this;this.plugins || (this.plugins = {}), Object.keys(e).forEach(function (n) {t.plugins[n] = e[n];});var n = new ad();n.setMethod(dd).setStart(), n.setCode(0).setText(\"key=\".concat(Object.keys(e))).setEnd();} }, { key: \"getPlugin\", value: function value(e) {return this.plugins[e] || void 0;} }, { key: \"setLogLevel\", value: function value(e) {if (e <= 0) {__f__(\"log\", [\"\", \" ________  ______  __       __  __       __  ________  _______\", \"|        \\\\|      \\\\|  \\\\     /  \\\\|  \\\\  _  |  \\\\|        \\\\|       \\\\\", \" \\\\$$$$$$$$ \\\\$$$$$$| $$\\\\   /  $$| $$ / \\\\ | $$| $$$$$$$$| $$$$$$$\\\\\", \"   | $$     | $$  | $$$\\\\ /  $$$| $$/  $\\\\| $$| $$__    | $$__/ $$\", \"   | $$     | $$  | $$$$\\\\  $$$$| $$  $$$\\\\ $$| $$  \\\\   | $$    $$\", \"   | $$     | $$  | $$\\\\$$ $$ $$| $$ $$\\\\$$\\\\$$| $$$$$   | $$$$$$$\\\\\", \"   | $$    _| $$_ | $$ \\\\$$$| $$| $$$$  \\\\$$$$| $$_____ | $$__/ $$\", \"   | $$   |   $$ \\\\| $$  \\\\$ | $$| $$$    \\\\$$$| $$     \\\\| $$    $$\", \"    \\\\$$    \\\\$$$$$$ \\\\$$      \\\\$$ \\\\$$      \\\\$$ \\\\$$$$$$$$ \\\\$$$$$$$\", \"\", \"\"].join(\"\\n\"), \" at tim-js-sdk/tim-js.js:1\"), __f__(\"log\", \"%cIM 智能客服，随时随地解决您的问题 →_→ https://cloud.tencent.com/act/event/smarty-service?from=im-doc\", \"color:#ff0000\", \" at tim-js-sdk/tim-js.js:1\");__f__(\"log\", [\"\", \"参考以下文档，会更快解决问题哦！(#^.^#)\\n\", \"SDK 更新日志: https://cloud.tencent.com/document/product/269/38492\\n\", \"SDK 接口文档: https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/SDK.html\\n\", \"常见问题: https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/tutorial-01-faq.html\\n\", \"反馈问题？戳我提 issue: https://github.com/tencentyun/TIMSDK/issues\\n\", \"如果您需要在生产环境关闭上面的日志，请 tim.setLogLevel(1)\\n\"].join(\"\\n\"), \" at tim-js-sdk/tim-js.js:1\");}la.setLevel(e);} }, { key: \"downloadLog\", value: function value() {var e = document.createElement(\"a\"),t = new Date(),n = new Blob(this.getLog());e.download = \"TIM-\" + t.getFullYear() + \"-\" + (t.getMonth() + 1) + \"-\" + t.getDate() + \"-\" + this.loginInfo.SDKAppID + \"-\" + this.context.identifier + \".txt\", e.href = URL.createObjectURL(n), e.click(), URL.revokeObjectURL(n);} }, { key: \"destroy\", value: function value() {this.logout(), this.outerEmitter.emit(ln.SDK_DESTROY, { SDKAppID: this.loginInfo.SDKAppID });} }, { key: \"createTextMessage\", value: function value(e) {return this.messageController.createTextMessage(e);} }, { key: \"createImageMessage\", value: function value(e) {return this.messageController.createImageMessage(e);} }, { key: \"createAudioMessage\", value: function value(e) {return this.messageController.createAudioMessage(e);} }, { key: \"createVideoMessage\", value: function value(e) {return this.messageController.createVideoMessage(e);} }, { key: \"createCustomMessage\", value: function value(e) {return this.messageController.createCustomMessage(e);} }, { key: \"createFaceMessage\", value: function value(e) {return this.messageController.createFaceMessage(e);} }, { key: \"createFileMessage\", value: function value(e) {return this.messageController.createFileMessage(e);} }, { key: \"sendMessage\", value: function value(e, t) {return e instanceof Uf ? this.messageController.sendMessageInstance(e, t) : id(new Mp({ code: Sp.MESSAGE_SEND_NEED_MESSAGE_INSTANCE, message: bp }));} }, { key: \"revokeMessage\", value: function value(e) {return this.messageController.revokeMessage(e);} }, { key: \"resendMessage\", value: function value(e) {return this.messageController.resendMessage(e);} }, { key: \"getMessageList\", value: function value(e) {return this.messageController.getMessageList(e);} }, { key: \"setMessageRead\", value: function value(e) {return this.messageController.setMessageRead(e);} }, { key: \"getConversationList\", value: function value() {return this.conversationController.getConversationList();} }, { key: \"getConversationProfile\", value: function value(e) {return this.conversationController.getConversationProfile(e);} }, { key: \"deleteConversation\", value: function value(e) {return this.conversationController.deleteConversation(e);} }, { key: \"getMyProfile\", value: function value() {return this.userController.getMyProfile();} }, { key: \"getUserProfile\", value: function value(e) {return this.userController.getUserProfile(e);} }, { key: \"updateMyProfile\", value: function value(e) {return this.userController.updateMyProfile(e);} }, { key: \"getFriendList\", value: function value() {return this.userController.getFriendList();} }, { key: \"deleteFriend\", value: function value(e) {return this.userController.deleteFriend(e);} }, { key: \"getBlacklist\", value: function value() {return this.userController.getBlacklist();} }, { key: \"addToBlacklist\", value: function value(e) {return this.userController.addBlacklist(e);} }, { key: \"removeFromBlacklist\", value: function value(e) {return this.userController.deleteBlacklist(e);} }, { key: \"getGroupList\", value: function value(e) {return this.groupController.getGroupList(e);} }, { key: \"getGroupProfile\", value: function value(e) {return this.groupController.getGroupProfile(e);} }, { key: \"createGroup\", value: function value(e) {return this.groupController.createGroup(e);} }, { key: \"dismissGroup\", value: function value(e) {return this.groupController.dismissGroup(e);} }, { key: \"updateGroupProfile\", value: function value(e) {return this.groupController.updateGroupProfile(e);} }, { key: \"joinGroup\", value: function value(e) {return this.groupController.joinGroup(e);} }, { key: \"quitGroup\", value: function value(e) {return this.groupController.quitGroup(e);} }, { key: \"searchGroupByID\", value: function value(e) {return this.groupController.searchGroupByID(e);} }, { key: \"changeGroupOwner\", value: function value(e) {return this.groupController.changeGroupOwner(e);} }, { key: \"handleGroupApplication\", value: function value(e) {return this.groupController.handleGroupApplication(e);} }, { key: \"setMessageRemindType\", value: function value(e) {return this.groupController.setMessageRemindType(e);} }, { key: \"getGroupMemberList\", value: function value(e) {return this.groupController.getGroupMemberList(e);} }, { key: \"getGroupMemberProfile\", value: function value(e) {return this.groupController.getGroupMemberProfile(e);} }, { key: \"addGroupMember\", value: function value(e) {return this.groupController.addGroupMember(e);} }, { key: \"deleteGroupMember\", value: function value(e) {return this.groupController.deleteGroupMember(e);} }, { key: \"setGroupMemberMuteTime\", value: function value(e) {return this.groupController.setGroupMemberMuteTime(e);} }, { key: \"setGroupMemberRole\", value: function value(e) {return this.groupController.setGroupMemberRole(e);} }, { key: \"setGroupMemberNameCard\", value: function value(e) {return this.groupController.setGroupMemberNameCard(e);} }, { key: \"setGroupMemberCustomField\", value: function value(e) {return this.groupController.setGroupMemberCustomField(e);} }, { key: \"_initOptions\", value: function value(e) {this.plugins = {};var t = e.SDKAppID || 0,n = Ra();this.context = { SDKAppID: t, accountType: n }, this.loginInfo = { SDKAppID: t, accountType: n, identifier: null, userSig: null, unlimitedAVChatRoom: e.unlimitedAVChatRoom || !1 }, this.options = { runLoopNetType: e.runLoopNetType || np, enablePointer: e.enablePointer || !1 };} }, { key: \"_initMemberVariables\", value: function value() {this.innerEmitter = new Dy(), this.outerEmitter = new Dy(), rd(this.outerEmitter), this.packageConfig = new ky(this), this.storage = new Ty(this), this.netMonitor = new Qy(), this.outerEmitter._emit = this.outerEmitter.emit, this.outerEmitter.emit = function (e, t) {var n = arguments[0],r = [n, { name: arguments[0], data: arguments[1] }];this.outerEmitter._emit.apply(this.outerEmitter, r);}.bind(this), this.innerEmitter._emit = this.innerEmitter.emit, this.innerEmitter.emit = function (e, t) {var n;ga(arguments[1]) && arguments[1].data ? (la.warn(\"inner eventData has data property, please check!\"), n = [e, { name: arguments[0], data: arguments[1].data }]) : n = [e, { name: arguments[0], data: arguments[1] }], this.innerEmitter._emit.apply(this.innerEmitter, n);}.bind(this);} }, { key: \"_initControllers\", value: function value() {this.exceptionController = new Av(this), this.connectionController = new Dv(this), this.contextController = new ed(this), this.context = this.contextController.getContext(), this.signController = new pg(this), this.messageController = new my(this), this.conversationController = new $v(this), this.userController = new Gv(this), this.groupController = new Cy(this), this.notificationController = new Ly(this), this.bigDataHallwayController = new Py(this), this.statusController = new My(this), this.uploadController = new by(this), this.messageLossController = new r_(this), this.eventStatController = new zy(this), this.sumStatController = new t_(this), this.mtaReportController = new $y(this), this._initReadyListener();} }, { key: \"_initListener\", value: function value() {var e = this;if (this.innerEmitter.on(ph, this._onSlowStart, this), Ns && \"function\" == typeof wx.onAppShow && \"function\" == typeof wx.onAppHide) {var t = null;wx.onAppHide(function () {(t = new ad()).setMethod(ug).setStart();}), wx.onAppShow(function () {null !== t && t.setCode(0).setNetworkType(e.netMonitor.getNetworkType()).setEnd();});}} }, { key: \"_initReadyListener\", value: function value() {for (var e = this, t = this.readyList, n = 0, r = t.length; n < r; n++) {this[t[n]].ready(function () {return e._readyHandle();});}} }, { key: \"_onSlowStart\", value: function value() {la.log(\"slow start longpolling...\"), this.resetSDK(), this.login(this.loginInfo);} }, { key: \"resetSDK\", value: function value() {var e = this;this.initList.forEach(function (t) {e[t].reset && e[t].reset();}), this.netMonitor.reset(), this.storage.reset(), this.resetReady(), this._initReadyListener(), this.outerEmitter.emit(ln.SDK_NOT_READY);} }, { key: \"_readyHandle\", value: function value() {for (var e = this.readyList, t = !0, n = 0, r = e.length; n < r; n++) {if (!this[e[n]].isReady()) {t = !1;break;}}if (t) {var o = la.timeEnd(sd.SDK_READY);la.warn(\"SDK is ready. cost=\".concat(o, \"ms\")), this.triggerReady(), this.innerEmitter.emit(xh), this.outerEmitter.emit(ln.SDK_READY), this._ssoLog.setCode(0).setNetworkType(this.netMonitor.getNetworkType()).setText(o).setEnd();}} }]), e;}();o_.prototype.readyList = [\"conversationController\"], o_.prototype.initList = [\"exceptionController\", \"connectionController\", \"signController\", \"contextController\", \"messageController\", \"conversationController\", \"userController\", \"groupController\", \"notificationController\", \"eventStatController\", \"sumStatController\", \"messageLossController\", \"statusController\"];var i_ = { login: \"login\", on: \"on\", off: \"off\", ready: \"ready\", setLogLevel: \"setLogLevel\", joinGroup: \"joinGroup\", quitGroup: \"quitGroup\", registerPlugin: \"registerPlugin\" };function s_(e, t) {return !(!e.isReady() && void 0 === i_[t]) || (e.innerEmitter.emit(wh, new Mp({ code: Sp.SDK_IS_NOT_READY, message: \"\".concat(t, \" \").concat(Rf, \"，请参考 https://imsdk-1252463788.file.myqcloud.com/IM_DOC/Web/module-EVENT.html#.SDK_READY\") })), !1);}var a_ = {},u_ = {};return u_.create = function (e) {if (e.SDKAppID && a_[e.SDKAppID]) return a_[e.SDKAppID];la.log(\"TIM.create\");var t = new o_(e);t.on(ln.SDK_DESTROY, function (e) {a_[e.data.SDKAppID] = null, delete a_[e.data.SDKAppID];});var n = function (e) {var t = Object.create(null);return Object.keys(Ff).forEach(function (n) {if (e[n]) {var r = Ff[n],o = new $n();t[r] = function () {var t = Array.from(arguments);return o.use(function (t, r) {if (s_(e, n)) return r();}).use(function (e, t) {if (!0 === Ka(e, qf[n], r)) return t();}).use(function (t, r) {return e[n].apply(e, t);}), o.run(t);};}}), t;}(t);return a_[e.SDKAppID] = n, la.log(\"TIM.create ok\"), n;}, u_.TYPES = pn, u_.EVENT = ln, u_.VERSION = \"2.7.1\", la.log(\"TIM.VERSION: \".concat(u_.VERSION)), u_;});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)/buildin/global.js */ 20), __webpack_require__(/*! @dcloudio/uni-mp-weixin/dist/mp.js */ 21)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"], __webpack_require__(/*! @dcloudio/uni-mp-weixin/dist/mp.js */ 21)[\"Page\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/*!*********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/mp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", { value: true });exports.Behavior = Behavior;exports.Component = Component;exports.Page = Page;exports.nextTick = exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 22));var _PROP_DEFAULT_VALUES;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(n);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

function parseData(data, vueComponentOptions) {
  if (!data) {
    return;
  }
  vueComponentOptions.mpOptions.data = data;
}

function parseComponents(vueComponentOptions) {
  vueComponentOptions.components = global.__wxVueOptions.components;
}

var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isFn(fn) {
  return typeof fn === 'function';
}

function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function noop() {}

/**
                    * Create a cached version of a pure function.
                    */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
   * Camelize a hyphen-delimited string.
   */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});
});

var SOURCE_KEY = '__data__';

var COMPONENT_LIFECYCLE = {
  created: 'onServiceCreated',
  attached: 'onServiceAttached',
  ready: 'mounted',
  moved: 'moved',
  detached: 'destroyed' };


var COMPONENT_LIFECYCLE_KEYS = Object.keys(COMPONENT_LIFECYCLE);

var PAGE_LIFETIMES = {
  show: 'onPageShow',
  hide: 'onPageHide',
  resize: 'onPageResize' };


var PAGE_LIFETIMES_KEYS = Object.keys(PAGE_LIFETIMES);

var PAGE_LIFECYCLE = [
'onLoad',
'onShow',
'onReady',
'onHide',
'onUnload',
'onPullDownRefresh',
'onReachBottom',
'onShareAppMessage',
'onPageScroll',
'onResize',
'onTabItemTap'];


function parsePageMethods(mpComponentOptions, vueComponentOptions) {
  var methods = Object.create(null);
  Object.keys(mpComponentOptions).forEach(function (key) {
    var value = mpComponentOptions[key];
    if (isFn(value) && PAGE_LIFECYCLE.indexOf(key) === -1) {
      methods[key] = value;
    }
  });
  vueComponentOptions.methods = methods;
}

function parsePageLifecycle(mpComponentOptions, vueComponentOptions) {
  Object.keys(mpComponentOptions).forEach(function (key) {
    if (PAGE_LIFECYCLE.indexOf(key) !== -1) {
      vueComponentOptions[key] = mpComponentOptions[key];
    }
  });
}

function parsePage(mpComponentOptions) {
  var vueComponentOptions = {
    mixins: [],
    mpOptions: {} };


  parseComponents(vueComponentOptions);

  parseData(mpComponentOptions.data, vueComponentOptions);

  parsePageMethods(mpComponentOptions, vueComponentOptions);
  parsePageLifecycle(mpComponentOptions, vueComponentOptions);

  return vueComponentOptions;
}

function parseProperties(properties, vueComponentOptions) {
  if (!properties) {
    return;
  }
  vueComponentOptions.mpOptions.properties = properties;
}

function parseOptions(options, vueComponentOptions) {
  if (!options) {
    return;
  }
  vueComponentOptions.mpOptions.options = options;
}

function parseMethods(methods, vueComponentOptions) {
  if (!methods) {
    return;
  }
  if (methods.$emit) {
    console.warn('Method "$emit" conflicts with an existing Vue instance method');
    delete methods.$emit;
  }
  vueComponentOptions.methods = methods;
}

function parseLifecycle(mpComponentOptions, vueComponentOptions) {
  COMPONENT_LIFECYCLE_KEYS.forEach(function (name) {
    if (hasOwn(mpComponentOptions, name)) {
      (vueComponentOptions[COMPONENT_LIFECYCLE[name]] || (vueComponentOptions[COMPONENT_LIFECYCLE[name]] = [])).
      push(mpComponentOptions[name]);
    }
  });
}

var mpBehaviors = {
  'wx://form-field': {},
  'wx://component-export': {} };


function callDefinitionFilter(mpComponentOptions) {var

  behaviors =

  mpComponentOptions.behaviors,definitionFilter = mpComponentOptions.definitionFilter;

  var behaviorDefinitionFilters = [];

  if (Array.isArray(behaviors)) {
    behaviors.forEach(function (behavior) {
      behavior = typeof behavior === 'string' ? mpBehaviors[behavior] : behavior;
      if (behavior.definitionFilter) {
        behaviorDefinitionFilters.push(behavior.definitionFilter);
        behavior.definitionFilter.call(null, mpComponentOptions, []);
      }
    });
  }

  if (isFn(definitionFilter)) {
    return function (defFields) {
      definitionFilter(defFields, behaviorDefinitionFilters);
    };
  }
}

function parseDefinitionFilter(mpComponentOptions, vueComponentOptions) {
  callDefinitionFilter(mpComponentOptions);
}

function parseBehavior(behavior) {var

  data =



  behavior.data,methods = behavior.methods,behaviors = behavior.behaviors,properties = behavior.properties;

  var vueComponentOptions = {
    watch: {},
    mpOptions: {
      mpObservers: [] } };



  parseData(data, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);

  parseLifecycle(behavior, vueComponentOptions);
  parseDefinitionFilter(behavior);

  return vueComponentOptions;
}

var BEHAVIORS = {
  'wx://form-field': {
    beforeCreate: function beforeCreate() {
      var mpOptions = this.$options.mpOptions;
      if (!mpOptions.properties) {
        mpOptions.properties = Object.create(null);
      }

      var props = mpOptions.properties;
      // TODO form submit,reset
      if (!hasOwn(props, 'name')) {
        props.name = {
          type: String };

      }
      if (!hasOwn(props, 'value')) {
        props.value = {
          type: String // 默认类型调整为 String,否则默认值为 null,导致一些自定义 input 显示不正确
        };
      }
    } } };



function parseBehaviors(behaviors, vueComponentOptions) {
  if (!behaviors) {
    return;
  }
  behaviors.forEach(function (behavior) {
    if (typeof behavior === 'string') {
      BEHAVIORS[behavior] && vueComponentOptions.mixins.push(BEHAVIORS[behavior]);
    } else {
      vueComponentOptions.mixins.push(parseBehavior(behavior));
    }
  });
}

function parseSinglePath(path) {
  return path.split('.');
}

function parseMultiPaths(paths) {
  return paths.split(',').map(function (path) {return parseSinglePath(path);});
}

function parseObservers(observers, vueComponentOptions) {
  if (!observers) {
    return;
  }var


  mpObservers =
  vueComponentOptions.mpOptions.mpObservers;

  Object.keys(observers).forEach(function (path) {
    mpObservers.push({
      paths: parseMultiPaths(path),
      observer: observers[path] });

  });
}

function relative(from, to) {
  if (to.indexOf('/') === 0) {
    from = '';
  }
  var fromArr = from.split('/');
  var toArr = to.split('/');
  fromArr.pop();
  while (toArr.length) {
    var part = toArr.shift();
    if (part !== '' && part !== '.') {
      if (part !== '..') {
        fromArr.push(part);
      } else {
        fromArr.pop();
      }
    }
  }
  return fromArr.join('/');
}

function parseRelations(relations, vueComponentOptions) {
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    var relation = relations[name];
    relation.name = name;
    relation.target = relation.target ? String(relation.target) : relative(global.__wxRoute, name);
  });
  vueComponentOptions.mpOptions.relations = relations;
}

function parseExternalClasses(externalClasses, vueComponentOptions) {
  if (!externalClasses) {
    return;
  }
  if (!Array.isArray(externalClasses)) {
    externalClasses = [externalClasses];
  }
  vueComponentOptions.mpOptions.externalClasses = externalClasses;
  if (!vueComponentOptions.mpOptions.properties) {
    vueComponentOptions.mpOptions.properties = Object.create(null);
  }
  externalClasses.forEach(function (externalClass) {
    vueComponentOptions.mpOptions.properties[camelize(externalClass)] = {
      type: String,
      value: '' };

  });
}

function parseLifetimes(lifetimes, vueComponentOptions) {
  if (!lifetimes) {
    return;
  }
  parseLifecycle(lifetimes, vueComponentOptions);
}

function parsePageLifetimes(pageLifetimes, vueComponentOptions) {
  if (!pageLifetimes) {
    return;
  }
  PAGE_LIFETIMES_KEYS.forEach(function (key) {
    var lifetimeFn = pageLifetimes[key];
    isFn(lifetimeFn) && (vueComponentOptions[PAGE_LIFETIMES[key]] = lifetimeFn);
  });
}

function parseComponent(mpComponentOptions) {var

  data =









  mpComponentOptions.data,options = mpComponentOptions.options,methods = mpComponentOptions.methods,behaviors = mpComponentOptions.behaviors,lifetimes = mpComponentOptions.lifetimes,observers = mpComponentOptions.observers,relations = mpComponentOptions.relations,properties = mpComponentOptions.properties,pageLifetimes = mpComponentOptions.pageLifetimes,externalClasses = mpComponentOptions.externalClasses;

  var vueComponentOptions = {
    mixins: [],
    props: {},
    watch: {},
    mpOptions: {
      mpObservers: [] } };



  parseComponents(vueComponentOptions);

  parseData(data, vueComponentOptions);
  parseOptions(options, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseLifetimes(lifetimes, vueComponentOptions);
  parseObservers(observers, vueComponentOptions);
  parseRelations(relations, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);
  parsePageLifetimes(pageLifetimes, vueComponentOptions);
  parseExternalClasses(externalClasses, vueComponentOptions);

  parseLifecycle(mpComponentOptions, vueComponentOptions);
  parseDefinitionFilter(mpComponentOptions);

  return vueComponentOptions;
}

function initRelationHandlers(type, handler, target, ctx) {
  if (!handler) {
    return;
  }
  var name = "_$".concat(type, "Handlers");
  (ctx[name] || (ctx[name] = [])).push(function () {
    handler.call(ctx, target);
  });
}

function initLinkedHandlers(relation, target, ctx) {
  var type = 'linked';
  var name = relation.name;
  var relationNodes = ctx._$relationNodes || (ctx._$relationNodes = Object.create(null));
  (relationNodes[name] || (relationNodes[name] = [])).push(target);
  initRelationHandlers(type, relation[type], target, ctx);
}

function initUnlinkedHandlers(relation, target, ctx) {
  var type = 'unlinked';
  initRelationHandlers(type, relation[type], target, ctx);
}

function findParentRelation(parentVm, target, type) {
  var relations = parentVm &&
  parentVm.$options.mpOptions &&
  parentVm.$options.mpOptions.relations;

  if (!relations) {
    return [];
  }
  var name = Object.keys(relations).find(function (name) {
    var relation = relations[name];
    return relation.target === target && relation.type === type;
  });
  if (!name) {
    return [];
  }
  return [relations[name], parentVm];
}

function initParentRelation(vm, childRelation, match) {var _match =
  match(vm, vm.$options.mpOptions.path),_match2 = _slicedToArray(_match, 2),parentRelation = _match2[0],parentVm = _match2[1];
  if (!parentRelation) {
    return;
  }

  initLinkedHandlers(parentRelation, vm, parentVm);
  initLinkedHandlers(childRelation, parentVm, vm);

  initUnlinkedHandlers(parentRelation, vm, parentVm);
  initUnlinkedHandlers(childRelation, parentVm, vm);
}

function initRelation(relation, vm) {
  var type = relation.type;
  if (type === 'parent') {
    initParentRelation(vm, relation, function matchParent(vm, target) {
      return findParentRelation(vm.$parent, target, 'child');
    });
  } else if (type === 'ancestor') {
    initParentRelation(vm, relation, function matchAncestor(vm, target) {
      var $parent = vm.$parent;
      while ($parent) {
        var ret = findParentRelation($parent, target, 'descendant');
        if (ret.length) {
          return ret;
        }
        $parent = $parent.$parent;
      }
      return [];
    });
  }
}

function initRelations(vm) {var _ref =


  vm.$options.mpOptions || {},relations = _ref.relations;
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    initRelation(relations[name], vm);
  });
}

function handleRelations(vm, type) {
  // TODO 需要移除 relationNodes
  var handlers = vm["_$".concat(type, "Handlers")];
  if (!handlers) {
    return;
  }
  handlers.forEach(function (handler) {return handler();});
}

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop };


function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function setDataByExprPath(exprPath, value, data) {
  var keys = exprPath.replace(/\[(\d+?)\]/g, '.$1').split('.');
  keys.reduce(function (obj, key, idx) {
    if (idx === keys.length - 1) {
      obj[key] = value;
    } else {
      if (typeof obj[key] === 'undefined') {
        obj[key] = {};
      }
      return obj[key];
    }
  }, data);
  return keys.length === 1;
}

function setData(data, callback) {var _this = this;
  if (!isPlainObject(data)) {
    return;
  }
  Object.keys(data).forEach(function (key) {
    if (setDataByExprPath(key, data[key], _this.data)) {
      !hasOwn(_this, key) && proxy(_this, SOURCE_KEY, key);
    }
  });
  this.$forceUpdate();
  isFn(callback) && this.$nextTick(callback);
}

/**
   * https://github.com/swan-team/swan-js/blob/61e2a63f7aa576b5daafbe77fdfa7c65b977060c/src/utils/index.js
   */

var _toString$1 = Object.prototype.toString;
/**
                                              * 深度assign的函数
                                              * @param {Object} targetObject 要被拷贝的目标对象
                                              * @param {Object} originObject 拷贝的源对象
                                              * @return {Object} merge后的对象
                                              */
var deepAssign = function deepAssign() {var targetObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var originObject = arguments.length > 1 ? arguments[1] : undefined;
  var originType = _toString$1.call(originObject);
  if (originType === '[object Array]') {
    targetObject = originObject.slice(0);
    return targetObject;
  } else if (originType === '[object Object]') {
    for (var key in originObject) {
      targetObject[key] = deepAssign(targetObject[key], originObject[key]);
    }
    return targetObject;
  } else if (originType === '[object Date]') {
    return new Date(originObject.getTime());
  } else if (originType === '[object RegExp]') {
    var target = String(originObject);
    var lastIndex = target.lastIndexOf('/');
    return new RegExp(target.slice(1, lastIndex), target.slice(lastIndex + 1));
  }
  return originObject;
};

/**
    * 深度拷贝逻辑，不同于lodash等库，但是与微信一致
    * @param {*} [originObj] 原对象
    * @return {Object|Array} 拷贝结果
    */
var deepClone = function deepClone(originObj) {
  return deepAssign(_toString$1.call(originObj) === '[object Array]' ? [] : {}, originObj);
};

var PROP_DEFAULT_VALUES = (_PROP_DEFAULT_VALUES = {}, _defineProperty(_PROP_DEFAULT_VALUES,
String, ''), _defineProperty(_PROP_DEFAULT_VALUES,
Number, 0), _defineProperty(_PROP_DEFAULT_VALUES,
Boolean, false), _defineProperty(_PROP_DEFAULT_VALUES,
Object, null), _defineProperty(_PROP_DEFAULT_VALUES,
Array, []), _defineProperty(_PROP_DEFAULT_VALUES,
null, null), _PROP_DEFAULT_VALUES);


function getDefaultVal(propType) {
  return PROP_DEFAULT_VALUES[propType];
}

function getPropertyVal(options) {
  if (isPlainObject(options)) {
    if (hasOwn(options, 'value')) {
      return options.value;
    }
    return getDefaultVal(options.type);
  }
  return getDefaultVal(options);
}

function getType(propOptions) {
  return isPlainObject(propOptions) ? propOptions.type : propOptions;
}

function validateProp(key, propsOptions, propsData, vm) {
  var value = propsData[key];
  if (value !== undefined) {
    var propOptions = propsOptions[key];
    var type = getType(propOptions);
    value = formatVal(value, type);
    var observer = propOptions && propOptions.observer;
    if (observer) {
      // 初始化时,异步触发 observer,否则 observer 中无法访问 methods 或其他
      setTimeout(function () {
        observe(observer, vm, value);
      }, 4);
    }
    return value;
  }
  return getPropertyVal(propsOptions[key]);
}

function formatVal(val, type) {
  if (type === Boolean) {
    return !!val;
  } else if (type === String) {
    return String(val);
  }
  return val;
}

function observe(observer, vm, newVal, oldVal) {
  try {
    if (typeof observer === 'function') {
      observer.call(vm, newVal, oldVal);
    } else if (typeof observer === 'string' &&
    typeof vm[observer] === 'function')
    {
      vm[observer](newVal, oldVal);
    }
  } catch (err) {
    console.error("execute observer ".concat(observer, " callback fail! err: ").concat(err));
  }
}

function initProperties(vm, instanceData) {
  var properties = vm.$options.mpOptions.properties;
  if (!properties) {
    return;
  }

  var propsData = deepClone(vm.$options.propsData) || {};var _loop = function _loop(

  key) {
    var observer = isPlainObject(properties[key]) ? properties[key].observer : false;
    var value = validateProp(key, properties, propsData, vm);
    Object.defineProperty(instanceData, key, {
      enumerable: true,
      configurable: true,
      get: function get() {
        return value;
      },
      set: function set(newVal) {
        var oldVal = value;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        // TODO 临时方案,clone array
        value = Array.isArray(newVal) ? newVal.slice(0) : newVal;
        if (observer) {
          observe(observer, vm, newVal, oldVal);
        }
        // 触发渲染
        vm.$forceUpdate();
      } });};for (var key in properties) {_loop(key);

  }
}

function updateProperties(vm) {
  var properties = vm.$options.mpOptions && vm.$options.mpOptions.properties;
  var propsData = vm.$options.propsData;
  if (propsData && properties) {
    Object.keys(properties).forEach(function (key) {
      if (hasOwn(propsData, key)) {
        vm[key] = formatVal(propsData[key], getType(properties[key]));
      }
    });
  }
}

function initState(vm) {
  var instanceData = JSON.parse(JSON.stringify(vm.$options.mpOptions.data || {}));

  vm[SOURCE_KEY] = instanceData;

  var propertyDefinition = {
    get: function get() {
      return vm[SOURCE_KEY];
    },
    set: function set(value) {
      vm[SOURCE_KEY] = value;
    } };


  Object.defineProperties(vm, {
    data: propertyDefinition,
    properties: propertyDefinition });


  vm.setData = setData;

  initProperties(vm, instanceData);

  Object.keys(instanceData).forEach(function (key) {
    proxy(vm, SOURCE_KEY, key);
  });
}

function initMethods(vm) {
  var oldEmit = vm.$emit;
  vm.triggerEvent = function (eventName, detail, options) {
    var target = {
      dataset: vm.$el.dataset };


    var event = {
      target: target,
      currentTarget: target,
      detail: detail,
      preventDefault: noop,
      stopPropagation: noop };


    oldEmit.call(vm, eventName, event);
  };
  // 主要是Vant 自己封装了 $emit,放到 methods 中会触发 Vue 的警告,索性,框架直接重写该方法
  vm.$emit = function () {
    vm.triggerEvent.apply(vm, arguments);
  };
  vm.getRelationNodes = function (relationKey) {
    // 需要过滤已被销毁的vm
    /* eslint-disable  no-mixed-operators */
    return (vm._$relationNodes && vm._$relationNodes[relationKey] || []).filter(function (vm) {return !vm._isDestroyed;});
  };

  vm._$updateProperties = updateProperties;
}

function handleObservers(vm) {
  var watch = vm.$options.watch;
  if (!watch) {
    return;
  }
  Object.keys(watch).forEach(function (name) {
    var observer = watch[name];
    if (observer.mounted) {
      var val = vm[name];
      var handler = observer.handler;
      if (typeof handler === 'string') {
        handler = vm[handler];
      }
      handler && handler.call(vm, val, val);
    }
  });
}

var polyfill = {
  beforeCreate: function beforeCreate() {
    // 取消 development 时的 Proxy,避免小程序组件模板中使用尚未定义的属性告警
    this._renderProxy = this;

    this._$self = this;
    this._$noop = noop;
  },
  created: function created() {// properties 中可能会访问 methods,故需要在 created 中初始化
    initState(this);
    initMethods(this);
    initRelations(this);
  },
  mounted: function mounted() {
    handleObservers(this);
  },
  destroyed: function destroyed() {
    handleRelations(this, 'unlinked');
  } };


global.__wxRoute = '';
global.__wxComponents = Object.create(null);
global.__wxVueOptions = Object.create(null);

function Page(options) {
  var pageOptions = parsePage(options);
  pageOptions.mixins.unshift(polyfill);
  pageOptions.mpOptions.path = global.__wxRoute;
  global.__wxComponents[global.__wxRoute] = pageOptions;
}

function initRelationsHandler(vueComponentOptions) {
  // linked 需要在当前组件 attached 之后再执行
  if (!vueComponentOptions.onServiceAttached) {
    vueComponentOptions.onServiceAttached = [];
  }
  vueComponentOptions.onServiceAttached.push(function onServiceAttached() {
    handleRelations(this, 'linked');
  });
}

function Component(options) {
  var componentOptions = parseComponent(options);
  componentOptions.mixins.unshift(polyfill);
  componentOptions.mpOptions.path = global.__wxRoute;
  initRelationsHandler(componentOptions);
  global.__wxComponents[global.__wxRoute] = componentOptions;
}

function Behavior(options) {
  return options;
}

var nextTick = _vue.default.nextTick;exports.nextTick = nextTick;

var index = uni.__$wx__;var _default =

index;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 20)))

/***/ }),
/* 22 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 23 */
/*!*****************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/index.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var COS = __webpack_require__(/*! ./src/cos */ 24);\nmodule.exports = COS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29zLWpzLXNkay12NS9pbmRleC5qcyJdLCJuYW1lcyI6WyJDT1MiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsR0FBRyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQWpCO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsR0FBakIiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ09TID0gcmVxdWlyZSgnLi9zcmMvY29zJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gQ09TOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!*******************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/cos.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {\n\nvar util = __webpack_require__(/*! ./util */ 25);\nvar event = __webpack_require__(/*! ./event */ 33);\nvar task = __webpack_require__(/*! ./task */ 34);\nvar base = __webpack_require__(/*! ./base */ 36);\nvar advance = __webpack_require__(/*! ./advance */ 38);\n\nvar defaultOptions = {\n  AppId: '', // AppId 已废弃，请拼接到 Bucket 后传入，例如：test-1250000000\n  SecretId: '',\n  SecretKey: '',\n  XCosSecurityToken: '', // 使用临时密钥需要注意自行刷新 Token\n  ChunkRetryTimes: 2,\n  FileParallelLimit: 3,\n  ChunkParallelLimit: 3,\n  ChunkSize: 1024 * 1024,\n  SliceSize: 1024 * 1024,\n  CopyChunkParallelLimit: 20,\n  CopyChunkSize: 1024 * 1024 * 10,\n  CopySliceSize: 1024 * 1024 * 10,\n  MaxPartNumber: 10000,\n  ProgressInterval: 1000,\n  UploadQueueSize: 10000,\n  Domain: '',\n  ServiceDomain: '',\n  Protocol: '',\n  CompatibilityMode: false,\n  ForcePathStyle: false,\n  UseRawKey: false,\n  Timeout: 0, // 单位毫秒，0 代表不设置超时时间\n  CorrectClockSkew: true,\n  SystemClockOffset: 0, // 单位毫秒，ms\n  UploadCheckContentMd5: false,\n  UploadAddMetaMd5: false,\n  UploadIdCacheLimit: 50 };\n\n\n// 对外暴露的类\nvar COS = function COS(options) {\n  this.options = util.extend(util.clone(defaultOptions), options || {});\n  this.options.FileParallelLimit = Math.max(1, this.options.FileParallelLimit);\n  this.options.ChunkParallelLimit = Math.max(1, this.options.ChunkParallelLimit);\n  this.options.ChunkRetryTimes = Math.max(0, this.options.ChunkRetryTimes);\n  this.options.ChunkSize = Math.max(1024 * 1024, this.options.ChunkSize);\n  this.options.CopyChunkParallelLimit = Math.max(1, this.options.CopyChunkParallelLimit);\n  this.options.CopyChunkSize = Math.max(1024 * 1024, this.options.CopyChunkSize);\n  this.options.CopySliceSize = Math.max(0, this.options.CopySliceSize);\n  this.options.MaxPartNumber = Math.max(1024, Math.min(10000, this.options.MaxPartNumber));\n  this.options.Timeout = Math.max(0, this.options.Timeout);\n  if (this.options.AppId) {\n    __f__(\"warn\", 'warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: \"test-1250000000\").', \" at cos-js-sdk-v5/src/cos.js:52\");\n  }\n  event.init(this);\n  task.init(this);\n};\n\nbase.init(COS, task);\nadvance.init(COS, task);\n\nCOS.getAuthorization = util.getAuth;\nCOS.version = '0.5.26';\n\nmodule.exports = COS;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29zLWpzLXNkay12NS9zcmMvY29zLmpzIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiZXZlbnQiLCJ0YXNrIiwiYmFzZSIsImFkdmFuY2UiLCJkZWZhdWx0T3B0aW9ucyIsIkFwcElkIiwiU2VjcmV0SWQiLCJTZWNyZXRLZXkiLCJYQ29zU2VjdXJpdHlUb2tlbiIsIkNodW5rUmV0cnlUaW1lcyIsIkZpbGVQYXJhbGxlbExpbWl0IiwiQ2h1bmtQYXJhbGxlbExpbWl0IiwiQ2h1bmtTaXplIiwiU2xpY2VTaXplIiwiQ29weUNodW5rUGFyYWxsZWxMaW1pdCIsIkNvcHlDaHVua1NpemUiLCJDb3B5U2xpY2VTaXplIiwiTWF4UGFydE51bWJlciIsIlByb2dyZXNzSW50ZXJ2YWwiLCJVcGxvYWRRdWV1ZVNpemUiLCJEb21haW4iLCJTZXJ2aWNlRG9tYWluIiwiUHJvdG9jb2wiLCJDb21wYXRpYmlsaXR5TW9kZSIsIkZvcmNlUGF0aFN0eWxlIiwiVXNlUmF3S2V5IiwiVGltZW91dCIsIkNvcnJlY3RDbG9ja1NrZXciLCJTeXN0ZW1DbG9ja09mZnNldCIsIlVwbG9hZENoZWNrQ29udGVudE1kNSIsIlVwbG9hZEFkZE1ldGFNZDUiLCJVcGxvYWRJZENhY2hlTGltaXQiLCJDT1MiLCJvcHRpb25zIiwiZXh0ZW5kIiwiY2xvbmUiLCJNYXRoIiwibWF4IiwibWluIiwiaW5pdCIsImdldEF1dGhvcml6YXRpb24iLCJnZXRBdXRoIiwidmVyc2lvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLDZDQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxnQkFBRCxDQUFsQjtBQUNBLElBQUlDLEtBQUssR0FBR0QsbUJBQU8sQ0FBQyxpQkFBRCxDQUFuQjtBQUNBLElBQUlFLElBQUksR0FBR0YsbUJBQU8sQ0FBQyxnQkFBRCxDQUFsQjtBQUNBLElBQUlHLElBQUksR0FBR0gsbUJBQU8sQ0FBQyxnQkFBRCxDQUFs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TCxDQUFhUCxPQUFiLEdBQXVCVSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksS0FBS0osT0FBTCxDQUFhUCxPQUF6QixDQUF2QjtBQUNBLE1BQUksS0FBS08sT0FBTCxDQUFhNUIsS0FBakIsRUFBd0I7QUFDcEIsa0JBQWEsMkdBQWI7QUFDSDtBQUNETCxPQUFLLENBQUN1QyxJQUFOLENBQVcsSUFBWDtBQUNBdEMsTUFBSSxDQUFDc0MsSUFBTCxDQUFVLElBQVY7QUFDSCxDQWhCRDs7QUFrQkFyQyxJQUFJLENBQUNxQyxJQUFMLENBQVVQLEdBQVYsRUFBZS9CLElBQWY7QUFDQUUsT0FBTyxDQUFDb0MsSUFBUixDQUFhUCxHQUFiLEVBQWtCL0IsSUFBbEI7O0FBRUErQixHQUFHLENBQUNRLGdCQUFKLEdBQXVCMUMsSUFBSSxDQUFDMkMsT0FBNUI7QUFDQVQsR0FBRyxDQUFDVSxPQUFKLEdBQWMsUUFBZDs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCWixHQUFqQixDIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcclxudmFyIGV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudCcpO1xyXG52YXIgdGFzayA9IHJlcXVpcmUoJy4vdGFzaycpO1xyXG52YXIgYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xyXG52YXIgYWR2YW5jZSA9IHJlcXVpcmUoJy4vYWR2YW5jZScpO1xyXG5cclxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgQXBwSWQ6ICcnLCAvLyBBcHBJZCDlt7Llup/lvIPvvIzor7fmi7zmjqXliLAgQnVja2V0IOWQjuS8oOWFpe+8jOS+i+Wmgu+8mnRlc3QtMTI1MDAwMDAwMFxyXG4gICAgU2VjcmV0SWQ6ICcnLFxyXG4gICAgU2VjcmV0S2V5OiAnJyxcclxuICAgIFhDb3NTZWN1cml0eVRva2VuOiAnJywgLy8g5L2/55So5Li05pe25a+G6ZKl6ZyA6KaB5rOo5oSP6Ieq6KGM5Yi35pawIFRva2VuXHJcbiAgICBDaHVua1JldHJ5VGltZXM6IDIsXHJcbiAgICBGaWxlUGFyYWxsZWxMaW1pdDogMyxcclxuICAgIENodW5rUGFyYWxsZWxMaW1pdDogMyxcclxuICAgIENodW5rU2l6ZTogMTAyNCAqIDEwMjQsXHJcbiAgICBTbGljZVNpemU6IDEwMjQgKiAxMDI0LFxyXG4gICAgQ29weUNodW5rUGFyYWxsZWxMaW1pdDogMjAsXHJcbiAgICBDb3B5Q2h1bmtTaXplOiAxMDI0ICogMTAyNCAqIDEwLFxyXG4gICAgQ29weVNsaWNlU2l6ZTogMTAyNCAqIDEwMjQgKiAxMCxcclxuICAgIE1heFBhcnROdW1iZXI6IDEwMDAwLFxyXG4gICAgUHJvZ3Jlc3NJbnRlcnZhbDogMTAwMCxcclxuICAgIFVwbG9hZFF1ZXVlU2l6ZTogMTAwMDAsXHJcbiAgICBEb21haW46ICcnLFxyXG4gICAgU2VydmljZURvbWFpbjogJycsXHJcbiAgICBQcm90b2NvbDogJycsXHJcbiAgICBDb21wYXRpYmlsaXR5TW9kZTogZmFsc2UsXHJcbiAgICBGb3JjZVBhdGhTdHlsZTogZmFsc2UsXHJcbiAgICBVc2VSYXdLZXk6IGZhbHNlLFxyXG4gICAgVGltZW91dDogMCwgLy8g5Y2V5L2N5q+r56eS77yMMCDku6PooajkuI3orr7nva7otoXml7bml7bpl7RcclxuICAgIENvcnJlY3RDbG9ja1NrZXc6IHRydWUsXHJcbiAgICBTeXN0ZW1DbG9ja09mZnNldDogMCwgLy8g5Y2V5L2N5q+r56eS77yMbXNcclxuICAgIFVwbG9hZENoZWNrQ29udGVudE1kNTogZmFsc2UsXHJcbiAgICBVcGxvYWRBZGRNZXRhTWQ1OiBmYWxzZSxcclxuICAgIFVwbG9hZElkQ2FjaGVMaW1pdDogNTAsXHJcbn07XHJcblxyXG4vLyDlr7nlpJbmmrTpnLLnmoTnsbtcclxudmFyIENPUyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB1dGlsLmV4dGVuZCh1dGlsLmNsb25lKGRlZmF1bHRPcHRpb25zKSwgb3B0aW9ucyB8fCB7fSk7XHJcbiAgICB0aGlzLm9wdGlvbnMuRmlsZVBhcmFsbGVsTGltaXQgPSBNYXRoLm1heCgxLCB0aGlzLm9wdGlvbnMuRmlsZVBhcmFsbGVsTGltaXQpO1xyXG4gICAgdGhpcy5vcHRpb25zLkNodW5rUGFyYWxsZWxMaW1pdCA9IE1hdGgubWF4KDEsIHRoaXMub3B0aW9ucy5DaHVua1BhcmFsbGVsTGltaXQpO1xyXG4gICAgdGhpcy5vcHRpb25zLkNodW5rUmV0cnlUaW1lcyA9IE1hdGgubWF4KDAsIHRoaXMub3B0aW9ucy5DaHVua1JldHJ5VGltZXMpO1xyXG4gICAgdGhpcy5vcHRpb25zLkNodW5rU2l6ZSA9IE1hdGgubWF4KDEwMjQgKiAxMDI0LCB0aGlzLm9wdGlvbnMuQ2h1bmtTaXplKTtcclxuICAgIHRoaXMub3B0aW9ucy5Db3B5Q2h1bmtQYXJhbGxlbExpbWl0ID0gTWF0aC5tYXgoMSwgdGhpcy5vcHRpb25zLkNvcHlDaHVua1BhcmFsbGVsTGltaXQpO1xyXG4gICAgdGhpcy5vcHRpb25zLkNvcHlDaHVua1NpemUgPSBNYXRoLm1heCgxMDI0ICogMTAyNCwgdGhpcy5vcHRpb25zLkNvcHlDaHVua1NpemUpO1xyXG4gICAgdGhpcy5vcHRpb25zLkNvcHlTbGljZVNpemUgPSBNYXRoLm1heCgwLCB0aGlzLm9wdGlvbnMuQ29weVNsaWNlU2l6ZSk7XHJcbiAgICB0aGlzLm9wdGlvbnMuTWF4UGFydE51bWJlciA9IE1hdGgubWF4KDEwMjQsIE1hdGgubWluKDEwMDAwLCB0aGlzLm9wdGlvbnMuTWF4UGFydE51bWJlcikpO1xyXG4gICAgdGhpcy5vcHRpb25zLlRpbWVvdXQgPSBNYXRoLm1heCgwLCB0aGlzLm9wdGlvbnMuVGltZW91dCk7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLkFwcElkKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCd3YXJuaW5nOiBBcHBJZCBoYXMgYmVlbiBkZXByZWNhdGVkLCBQbGVhc2UgcHV0IGl0IGF0IHRoZSBlbmQgb2YgcGFyYW1ldGVyIEJ1Y2tldChFLmc6IFwidGVzdC0xMjUwMDAwMDAwXCIpLicpO1xyXG4gICAgfVxyXG4gICAgZXZlbnQuaW5pdCh0aGlzKTtcclxuICAgIHRhc2suaW5pdCh0aGlzKTtcclxufTtcclxuXHJcbmJhc2UuaW5pdChDT1MsIHRhc2spO1xyXG5hZHZhbmNlLmluaXQoQ09TLCB0YXNrKTtcclxuXHJcbkNPUy5nZXRBdXRob3JpemF0aW9uID0gdXRpbC5nZXRBdXRoO1xyXG5DT1MudmVyc2lvbiA9ICcwLjUuMjYnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBDT1M7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/*!********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/util.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {\n\nvar md5 = __webpack_require__(/*! ../lib/md5 */ 26);\nvar CryptoJS = __webpack_require__(/*! ../lib/crypto */ 27);\nvar xml2json = __webpack_require__(/*! ../lib/xml2json */ 28);\nvar json2xml = __webpack_require__(/*! ../lib/json2xml */ 32);\n\nfunction camSafeUrlEncode(str) {\n  return encodeURIComponent(str).\n  replace(/!/g, '%21').\n  replace(/'/g, '%27').\n  replace(/\\(/g, '%28').\n  replace(/\\)/g, '%29').\n  replace(/\\*/g, '%2A');\n}\n\n//测试用的key后面可以去掉\nvar getAuth = function getAuth(opt) {\n  opt = opt || {};\n\n  var SecretId = opt.SecretId;\n  var SecretKey = opt.SecretKey;\n  var KeyTime = opt.KeyTime;\n  var method = (opt.method || opt.Method || 'get').toLowerCase();\n  var queryParams = clone(opt.Query || opt.params || {});\n  var headers = clone(opt.Headers || opt.headers || {});\n\n  var Key = opt.Key || '';\n  var pathname;\n  if (opt.UseRawKey) {\n    pathname = opt.Pathname || opt.pathname || '/' + Key;\n  } else {\n    pathname = opt.Pathname || opt.pathname || Key;\n    pathname.indexOf('/') !== 0 && (pathname = '/' + pathname);\n  }\n\n  if (!SecretId) return __f__(\"error\", 'missing param SecretId', \" at cos-js-sdk-v5/src/util.js:37\");\n  if (!SecretKey) return __f__(\"error\", 'missing param SecretKey', \" at cos-js-sdk-v5/src/util.js:38\");\n\n  var getObjectKeys = function getObjectKeys(obj) {\n    var list = [];\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        list.push(key);\n      }\n    }\n    return list.sort(function (a, b) {\n      a = a.toLowerCase();\n      b = b.toLowerCase();\n      return a === b ? 0 : a > b ? 1 : -1;\n    });\n  };\n\n  var obj2str = function obj2str(obj) {\n    var i, key, val;\n    var list = [];\n    var keyList = getObjectKeys(obj);\n    for (i = 0; i < keyList.length; i++) {\n      key = keyList[i];\n      val = obj[key] === undefined || obj[key] === null ? '' : '' + obj[key];\n      key = key.toLowerCase();\n      key = camSafeUrlEncode(key);\n      val = camSafeUrlEncode(val) || '';\n      list.push(key + '=' + val);\n    }\n    return list.join('&');\n  };\n\n  // 签名有效起止时间\n  var now = Math.round(getSkewTime(opt.SystemClockOffset) / 1000) - 1;\n  var exp = now;\n\n  var Expires = opt.Expires || opt.expires;\n  if (Expires === undefined) {\n    exp += 900; // 签名过期时间为当前 + 900s\n  } else {\n    exp += Expires * 1 || 0;\n  }\n\n  // 要用到的 Authorization 参数列表\n  var qSignAlgorithm = 'sha1';\n  var qAk = SecretId;\n  var qSignTime = KeyTime || now + ';' + exp;\n  var qKeyTime = KeyTime || now + ';' + exp;\n  var qHeaderList = getObjectKeys(headers).join(';').toLowerCase();\n  var qUrlParamList = getObjectKeys(queryParams).join(';').toLowerCase();\n\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\n  // 步骤一：计算 SignKey\n  var signKey = CryptoJS.HmacSHA1(qKeyTime, SecretKey).toString();\n\n  // 步骤二：构成 FormatString\n  var formatString = [method, pathname, obj2str(queryParams), obj2str(headers), ''].join('\\n');\n\n  // 步骤三：计算 StringToSign\n  var stringToSign = ['sha1', qSignTime, CryptoJS.SHA1(formatString).toString(), ''].join('\\n');\n\n  // 步骤四：计算 Signature\n  var qSignature = CryptoJS.HmacSHA1(stringToSign, signKey).toString();\n\n  // 步骤五：构造 Authorization\n  var authorization = [\n  'q-sign-algorithm=' + qSignAlgorithm,\n  'q-ak=' + qAk,\n  'q-sign-time=' + qSignTime,\n  'q-key-time=' + qKeyTime,\n  'q-header-list=' + qHeaderList,\n  'q-url-param-list=' + qUrlParamList,\n  'q-signature=' + qSignature].\n  join('&');\n\n  return authorization;\n\n};\n\nvar noop = function noop() {\n\n};\n\n// 清除对象里值为的 undefined 或 null 的属性\nvar clearKey = function clearKey(obj) {\n  var retObj = {};\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {\n      retObj[key] = obj[key];\n    }\n  }\n  return retObj;\n};\n\nvar readAsBinaryString = function readAsBinaryString(blob, callback) {\n  var readFun;\n  var fr = new FileReader();\n  if (FileReader.prototype.readAsBinaryString) {\n    readFun = FileReader.prototype.readAsBinaryString;\n    fr.onload = function () {\n      callback(this.result);\n    };\n  } else if (FileReader.prototype.readAsArrayBuffer) {// 在 ie11 添加 readAsBinaryString 兼容\n    readFun = function readFun(fileData) {\n      var binary = \"\";\n      var pt = this;\n      var reader = new FileReader();\n      reader.onload = function (e) {\n        var bytes = new Uint8Array(reader.result);\n        var length = bytes.byteLength;\n        for (var i = 0; i < length; i++) {\n          binary += String.fromCharCode(bytes[i]);\n        }\n        callback(binary);\n      };\n      reader.readAsArrayBuffer(fileData);\n    };\n  } else {\n    __f__(\"error\", 'FileReader not support readAsBinaryString', \" at cos-js-sdk-v5/src/util.js:155\");\n  }\n  readFun.call(fr, blob);\n};\n\nvar fileSliceNeedCopy = function () {\n  var compareVersion = function compareVersion(a, b) {\n    a = a.split('.');\n    b = b.split('.');\n    for (var i = 0; i < b.length; i++) {\n      if (a[i] !== b[i]) {\n        return parseInt(a[i]) > parseInt(b[i]) ? 1 : -1;\n      }\n    }\n    return 0;\n  };\n  var check = function check(ua) {\n    var ChromeVersion = (ua.match(/Chrome\\/([.\\d]+)/) || [])[1];\n    var QBCoreVersion = (ua.match(/QBCore\\/([.\\d]+)/) || [])[1];\n    var QQBrowserVersion = (ua.match(/QQBrowser\\/([.\\d]+)/) || [])[1];\n    var need = ChromeVersion && compareVersion(ChromeVersion, '53.0.2785.116') < 0 &&\n    QBCoreVersion && compareVersion(QBCoreVersion, '3.53.991.400') < 0 &&\n    QQBrowserVersion && compareVersion(QQBrowserVersion, '9.0.2524.400') <= 0 || false;\n    return need;\n  };\n  return check(navigator && navigator.userAgent);\n}();\n\n// 获取文件分片\nvar fileSlice = function fileSlice(file, start, end, isUseToUpload, callback) {\n  var blob;\n  if (file.slice) {\n    blob = file.slice(start, end);\n  } else if (file.mozSlice) {\n    blob = file.mozSlice(start, end);\n  } else if (file.webkitSlice) {\n    blob = file.webkitSlice(start, end);\n  }\n  if (isUseToUpload && fileSliceNeedCopy) {\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      blob = null;\n      callback(new Blob([reader.result]));\n    };\n    reader.readAsArrayBuffer(blob);\n  } else {\n    callback(blob);\n  }\n};\n\n// 获取文件内容的 MD5\nvar getBodyMd5 = function getBodyMd5(UploadCheckContentMd5, Body, callback, onProgress) {\n  callback = callback || noop;\n  if (UploadCheckContentMd5) {\n    if (typeof Body === 'string') {\n      callback(util.md5(Body, true));\n    } else if (Blob && Body instanceof Blob) {\n      util.getFileMd5(Body, function (err, md5) {\n        callback(md5);\n      }, onProgress);\n    } else {\n      callback();\n    }\n  } else {\n    callback();\n  }\n};\n\n// 获取文件 md5 值\nvar md5ChunkSize = 1024 * 1024;\nvar getFileMd5 = function getFileMd5(blob, callback, onProgress) {\n  var size = blob.size;\n  var loaded = 0;\n  var md5ctx = md5.getCtx();\n  var next = function next(start) {\n    if (start >= size) {\n      var hash = md5ctx.digest('hex');\n      callback(null, hash);\n      return;\n    }\n    var end = Math.min(size, start + md5ChunkSize);\n    util.fileSlice(blob, start, end, false, function (chunk) {\n      readAsBinaryString(chunk, function (content) {\n        chunk = null;\n        md5ctx = md5ctx.update(content, true);\n        loaded += content.length;\n        content = null;\n        if (onProgress) onProgress({ loaded: loaded, total: size, percent: Math.round(loaded / size * 10000) / 10000 });\n        next(start + md5ChunkSize);\n      });\n    });\n  };\n  next(0);\n};\n\nfunction clone(obj) {\n  return map(obj, function (v) {\n    return typeof v === 'object' ? clone(v) : v;\n  });\n}\n\nfunction extend(target, source) {\n  each(source, function (val, key) {\n    target[key] = source[key];\n  });\n  return target;\n}\n\nfunction isArray(arr) {\n  return arr instanceof Array;\n}\n\nfunction isInArray(arr, item) {\n  var flag = false;\n  for (var i = 0; i < arr.length; i++) {\n    if (item === arr[i]) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n}\n\nfunction makeArray(arr) {\n  return isArray(arr) ? arr : [arr];\n}\n\nfunction each(obj, fn) {\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      fn(obj[i], i);\n    }\n  }\n}\n\nfunction map(obj, fn) {\n  var o = isArray(obj) ? [] : {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = fn(obj[i], i);\n    }\n  }\n  return o;\n}\n\nfunction filter(obj, fn) {\n  var iaArr = isArray(obj);\n  var o = iaArr ? [] : {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (fn(obj[i], i)) {\n        if (iaArr) {\n          o.push(obj[i]);\n        } else {\n          o[i] = obj[i];\n        }\n      }\n    }\n  }\n  return o;\n}\n\nvar binaryBase64 = function binaryBase64(str) {\n  var i,len,_char,res = '';\n  for (i = 0, len = str.length / 2; i < len; i++) {\n    _char = parseInt(str[i * 2] + str[i * 2 + 1], 16);\n    res += String.fromCharCode(_char);\n  }\n  return btoa(res);\n};\nvar uuid = function uuid() {\n  var S4 = function S4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  };\n  return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n};\n\nvar hasMissingParams = function hasMissingParams(apiName, params) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  if (apiName.indexOf('Bucket') > -1 || apiName === 'deleteMultipleObject' || apiName === 'multipartList' || apiName === 'listObjectVersions') {\n    if (!Bucket) return 'Bucket';\n    if (!Region) return 'Region';\n  } else if (apiName.indexOf('Object') > -1 || apiName.indexOf('multipart') > -1 || apiName === 'sliceUploadFile' || apiName === 'abortUploadTask') {\n    if (!Bucket) return 'Bucket';\n    if (!Region) return 'Region';\n    if (!Key) return 'Key';\n  }\n  return false;\n};\n\nvar formatParams = function formatParams(apiName, params) {\n\n  // 复制参数对象\n  params = extend({}, params);\n\n  // 统一处理 Headers\n  if (apiName !== 'getAuth' && apiName !== 'getV4Auth' && apiName !== 'getObjectUrl') {\n    var Headers = params.Headers || {};\n    if (params && typeof params === 'object') {\n      (function () {\n        for (var key in params) {\n          if (params.hasOwnProperty(key) && key.indexOf('x-cos-') > -1) {\n            Headers[key] = params[key];\n          }\n        }\n      })();\n\n      var headerMap = {\n        // params headers\n        'x-cos-mfa': 'MFA',\n        'Content-MD5': 'ContentMD5',\n        'Content-Length': 'ContentLength',\n        'Content-Type': 'ContentType',\n        'Expect': 'Expect',\n        'Expires': 'Expires',\n        'Cache-Control': 'CacheControl',\n        'Content-Disposition': 'ContentDisposition',\n        'Content-Encoding': 'ContentEncoding',\n        'Range': 'Range',\n        'If-Modified-Since': 'IfModifiedSince',\n        'If-Unmodified-Since': 'IfUnmodifiedSince',\n        'If-Match': 'IfMatch',\n        'If-None-Match': 'IfNoneMatch',\n        'x-cos-copy-source': 'CopySource',\n        'x-cos-copy-source-Range': 'CopySourceRange',\n        'x-cos-metadata-directive': 'MetadataDirective',\n        'x-cos-copy-source-If-Modified-Since': 'CopySourceIfModifiedSince',\n        'x-cos-copy-source-If-Unmodified-Since': 'CopySourceIfUnmodifiedSince',\n        'x-cos-copy-source-If-Match': 'CopySourceIfMatch',\n        'x-cos-copy-source-If-None-Match': 'CopySourceIfNoneMatch',\n        'x-cos-acl': 'ACL',\n        'x-cos-grant-read': 'GrantRead',\n        'x-cos-grant-write': 'GrantWrite',\n        'x-cos-grant-full-control': 'GrantFullControl',\n        'x-cos-grant-read-acp': 'GrantReadAcp',\n        'x-cos-grant-write-acp': 'GrantWriteAcp',\n        'x-cos-storage-class': 'StorageClass',\n        // SSE-C\n        'x-cos-server-side-encryption-customer-algorithm': 'SSECustomerAlgorithm',\n        'x-cos-server-side-encryption-customer-key': 'SSECustomerKey',\n        'x-cos-server-side-encryption-customer-key-MD5': 'SSECustomerKeyMD5',\n        // SSE-COS、SSE-KMS\n        'x-cos-server-side-encryption': 'ServerSideEncryption',\n        'x-cos-server-side-encryption-cos-kms-key-id': 'SSEKMSKeyId',\n        'x-cos-server-side-encryption-context': 'SSEContext' };\n\n      util.each(headerMap, function (paramKey, headerKey) {\n        if (params[paramKey] !== undefined) {\n          Headers[headerKey] = params[paramKey];\n        }\n      });\n\n      params.Headers = clearKey(Headers);\n    }\n  }\n\n  return params;\n};\n\nvar apiWrapper = function apiWrapper(apiName, apiFn) {\n  return function (params, callback) {\n\n    // 处理参数\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    // 整理参数格式\n    params = formatParams(apiName, params);\n\n    // 代理回调函数\n    var formatResult = function formatResult(result) {\n      if (result && result.headers) {\n        result.headers['x-cos-version-id'] && (result.VersionId = result.headers['x-cos-version-id']);\n        result.headers['x-cos-delete-marker'] && (result.DeleteMarker = result.headers['x-cos-delete-marker']);\n      }\n      return result;\n    };\n    var _callback = function _callback(err, data) {\n      callback && callback(formatResult(err), formatResult(data));\n    };\n\n    if (apiName !== 'getService' && apiName !== 'abortUploadTask') {\n      // 判断参数是否完整\n      var missingResult;\n      if (missingResult = hasMissingParams(apiName, params)) {\n        _callback({ error: 'missing param ' + missingResult });\n        return;\n      }\n      // 判断 region 格式\n      if (params.Region) {\n        if (params.Region.indexOf('cos.') > -1) {\n          _callback({ error: 'param Region should not be start with \"cos.\"' });\n          return;\n        } else if (!/^([a-z\\d-]+)$/.test(params.Region)) {\n          _callback({ error: 'Region format error.' });\n          return;\n        }\n        // 判断 region 格式\n        if (!this.options.CompatibilityMode && params.Region.indexOf('-') === -1 && params.Region !== 'yfb' && params.Region !== 'default') {\n          __f__(\"warn\", 'warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224', \" at cos-js-sdk-v5/src/util.js:458\");\n        }\n      }\n      // 兼容不带 AppId 的 Bucket\n      if (params.Bucket) {\n        if (!/^([a-z\\d-]+)-(\\d+)$/.test(params.Bucket)) {\n          if (params.AppId) {\n            params.Bucket = params.Bucket + '-' + params.AppId;\n          } else if (this.options.AppId) {\n            params.Bucket = params.Bucket + '-' + this.options.AppId;\n          } else {\n            _callback({ error: 'Bucket should format as \"test-1250000000\".' });\n            return;\n          }\n        }\n        if (params.AppId) {\n          __f__(\"warn\", 'warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:\"test-1250000000\" ).', \" at cos-js-sdk-v5/src/util.js:474\");\n          delete params.AppId;\n        }\n      }\n      // 如果 Key 是 / 开头，强制去掉第一个 /\n      if (!this.options.UseRawKey && params.Key && params.Key.substr(0, 1) === '/') {\n        params.Key = params.Key.substr(1);\n      }\n    }\n    var res = apiFn.call(this, params, _callback);\n    if (apiName === 'getAuth' || apiName === 'getObjectUrl') {\n      return res;\n    }\n  };\n};\n\nvar throttleOnProgress = function throttleOnProgress(total, onProgress) {\n  var self = this;\n  var size0 = 0;\n  var size1 = 0;\n  var time0 = Date.now();\n  var time1;\n  var timer;\n\n  function update() {\n    timer = 0;\n    if (onProgress && typeof onProgress === 'function') {\n      time1 = Date.now();\n      var speed = Math.max(0, Math.round((size1 - size0) / ((time1 - time0) / 1000) * 100) / 100);\n      var percent;\n      if (size1 === 0 && total === 0) {\n        percent = 1;\n      } else {\n        percent = Math.round(size1 / total * 100) / 100 || 0;\n      }\n      time0 = time1;\n      size0 = size1;\n      try {\n        onProgress({ loaded: size1, total: total, speed: speed, percent: percent });\n      } catch (e) {\n      }\n    }\n  }\n\n  return function (info, immediately) {\n    if (info) {\n      size1 = info.loaded;\n      total = info.total;\n    }\n    if (immediately) {\n      clearTimeout(timer);\n      update();\n    } else {\n      if (timer) return;\n      timer = setTimeout(update, self.options.ProgressInterval);\n    }\n  };\n};\n\nvar getFileSize = function getFileSize(api, params, callback) {\n  var size;\n  if (typeof params.Body === 'string') {\n    params.Body = new Blob([params.Body], { type: 'text/plain' });\n  }\n  if (params.Body && (params.Body instanceof Blob || params.Body.toString() === '[object File]' || params.Body.toString() === '[object Blob]')) {\n    size = params.Body.size;\n  } else {\n    callback({ error: 'params body format error, Only allow File|Blob|String.' });\n    return;\n  }\n  params.ContentLength = size;\n  callback(null, size);\n};\n\n// 获取调正的时间戳\nvar getSkewTime = function getSkewTime(offset) {\n  return Date.now() + (offset || 0);\n};\n\nvar util = {\n  noop: noop,\n  formatParams: formatParams,\n  apiWrapper: apiWrapper,\n  xml2json: xml2json,\n  json2xml: json2xml,\n  md5: md5,\n  clearKey: clearKey,\n  fileSlice: fileSlice,\n  getBodyMd5: getBodyMd5,\n  getFileMd5: getFileMd5,\n  binaryBase64: binaryBase64,\n  extend: extend,\n  isArray: isArray,\n  isInArray: isInArray,\n  makeArray: makeArray,\n  each: each,\n  map: map,\n  filter: filter,\n  clone: clone,\n  uuid: uuid,\n  camSafeUrlEncode: camSafeUrlEncode,\n  throttleOnProgress: throttleOnProgress,\n  getFileSize: getFileSize,\n  getSkewTime: getSkewTime,\n  getAuth: getAuth,\n  isBrowser: true };\n\n\nmodule.exports = util;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!*******************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/lib/md5.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function md5cycle(x, k) {\n  var a = x[0],b = x[1],c = x[2],d = x[3];\n\n  a = ff(a, b, c, d, k[0], 7, -680876936);\n  d = ff(d, a, b, c, k[1], 12, -389564586);\n  c = ff(c, d, a, b, k[2], 17, 606105819);\n  b = ff(b, c, d, a, k[3], 22, -1044525330);\n  a = ff(a, b, c, d, k[4], 7, -176418897);\n  d = ff(d, a, b, c, k[5], 12, 1200080426);\n  c = ff(c, d, a, b, k[6], 17, -1473231341);\n  b = ff(b, c, d, a, k[7], 22, -45705983);\n  a = ff(a, b, c, d, k[8], 7, 1770035416);\n  d = ff(d, a, b, c, k[9], 12, -1958414417);\n  c = ff(c, d, a, b, k[10], 17, -42063);\n  b = ff(b, c, d, a, k[11], 22, -1990404162);\n  a = ff(a, b, c, d, k[12], 7, 1804603682);\n  d = ff(d, a, b, c, k[13], 12, -40341101);\n  c = ff(c, d, a, b, k[14], 17, -1502002290);\n  b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n  a = gg(a, b, c, d, k[1], 5, -165796510);\n  d = gg(d, a, b, c, k[6], 9, -1069501632);\n  c = gg(c, d, a, b, k[11], 14, 643717713);\n  b = gg(b, c, d, a, k[0], 20, -373897302);\n  a = gg(a, b, c, d, k[5], 5, -701558691);\n  d = gg(d, a, b, c, k[10], 9, 38016083);\n  c = gg(c, d, a, b, k[15], 14, -660478335);\n  b = gg(b, c, d, a, k[4], 20, -405537848);\n  a = gg(a, b, c, d, k[9], 5, 568446438);\n  d = gg(d, a, b, c, k[14], 9, -1019803690);\n  c = gg(c, d, a, b, k[3], 14, -187363961);\n  b = gg(b, c, d, a, k[8], 20, 1163531501);\n  a = gg(a, b, c, d, k[13], 5, -1444681467);\n  d = gg(d, a, b, c, k[2], 9, -51403784);\n  c = gg(c, d, a, b, k[7], 14, 1735328473);\n  b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n  a = hh(a, b, c, d, k[5], 4, -378558);\n  d = hh(d, a, b, c, k[8], 11, -2022574463);\n  c = hh(c, d, a, b, k[11], 16, 1839030562);\n  b = hh(b, c, d, a, k[14], 23, -35309556);\n  a = hh(a, b, c, d, k[1], 4, -1530992060);\n  d = hh(d, a, b, c, k[4], 11, 1272893353);\n  c = hh(c, d, a, b, k[7], 16, -155497632);\n  b = hh(b, c, d, a, k[10], 23, -1094730640);\n  a = hh(a, b, c, d, k[13], 4, 681279174);\n  d = hh(d, a, b, c, k[0], 11, -358537222);\n  c = hh(c, d, a, b, k[3], 16, -722521979);\n  b = hh(b, c, d, a, k[6], 23, 76029189);\n  a = hh(a, b, c, d, k[9], 4, -640364487);\n  d = hh(d, a, b, c, k[12], 11, -421815835);\n  c = hh(c, d, a, b, k[15], 16, 530742520);\n  b = hh(b, c, d, a, k[2], 23, -995338651);\n\n  a = ii(a, b, c, d, k[0], 6, -198630844);\n  d = ii(d, a, b, c, k[7], 10, 1126891415);\n  c = ii(c, d, a, b, k[14], 15, -1416354905);\n  b = ii(b, c, d, a, k[5], 21, -57434055);\n  a = ii(a, b, c, d, k[12], 6, 1700485571);\n  d = ii(d, a, b, c, k[3], 10, -1894986606);\n  c = ii(c, d, a, b, k[10], 15, -1051523);\n  b = ii(b, c, d, a, k[1], 21, -2054922799);\n  a = ii(a, b, c, d, k[8], 6, 1873313359);\n  d = ii(d, a, b, c, k[15], 10, -30611744);\n  c = ii(c, d, a, b, k[6], 15, -1560198380);\n  b = ii(b, c, d, a, k[13], 21, 1309151649);\n  a = ii(a, b, c, d, k[4], 6, -145523070);\n  d = ii(d, a, b, c, k[11], 10, -1120210379);\n  c = ii(c, d, a, b, k[2], 15, 718787259);\n  b = ii(b, c, d, a, k[9], 21, -343485551);\n\n  x[0] = add32(a, x[0]);\n  x[1] = add32(b, x[1]);\n  x[2] = add32(c, x[2]);\n  x[3] = add32(d, x[3]);\n\n}\n\nfunction cmn(q, a, b, x, s, t) {\n  a = add32(add32(a, q), add32(x, t));\n  return add32(a << s | a >>> 32 - s, b);\n}\n\nfunction ff(a, b, c, d, x, s, t) {\n  return cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction gg(a, b, c, d, x, s, t) {\n  return cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction hh(a, b, c, d, x, s, t) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction ii(a, b, c, d, x, s, t) {\n  return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nfunction md51(s) {\n  var n = s.length,\n  state = [1732584193, -271733879, -1732584194, 271733878],i;\n  for (i = 64; i <= s.length; i += 64) {\n    md5cycle(state, md5blk(s.substring(i - 64, i)));\n  }\n  s = s.substring(i - 64);\n  var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (i = 0; i < s.length; i++) {\n    tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);}\n  tail[i >> 2] |= 0x80 << (i % 4 << 3);\n  if (i > 55) {\n    md5cycle(state, tail);\n    for (i = 0; i < 16; i++) {tail[i] = 0;}\n  }\n  tail[14] = n * 8;\n  md5cycle(state, tail);\n  return state;\n}\n\n\nvar binaryBase64 = function binaryBase64(str) {\n  var i,len,_char,res = '';\n  for (i = 0, len = str.length / 2; i < len; i++) {\n    _char = parseInt(str[i * 2] + str[i * 2 + 1], 16);\n    res += String.fromCharCode(_char);\n  }\n  return btoa(res);\n};\nfunction getCtx() {\n  var ctx = {};\n  ctx.state = [1732584193, -271733879, -1732584194, 271733878];\n  ctx.tail = '';\n  ctx.size = 0;\n  ctx.update = function (s, isBinaryString) {\n    if (!isBinaryString) s = Utf8Encode(s);\n    ctx.size += s.length;\n    s = ctx.tail + s;\n    var i,state = ctx.state;\n    for (i = 64; i <= s.length; i += 64) {\n      md5cycle(state, md5blk(s.substring(i - 64, i)));\n    }\n    ctx.tail = s.substring(i - 64);\n    return ctx;\n  };\n  ctx.digest = function (encode) {\n    var i,\n    n = ctx.size,\n    state = ctx.state,\n    s = ctx.tail,\n    tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (i = 0; i < s.length; i++) {\n      tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);}\n    tail[i >> 2] |= 0x80 << (i % 4 << 3);\n    if (i > 55) {\n      md5cycle(state, tail);\n      for (i = 0; i < 16; i++) {tail[i] = 0;}\n    }\n    tail[14] = n * 8;\n    md5cycle(state, tail);\n    return encode === 'hex' ? hex(state) : encode === 'base64' ? binaryBase64(hex(state)) : state;\n  };\n  return ctx;\n}\n\n/* there needs to be support for Unicode here,\r\n   * unless we pretend that we can redefine the MD-5\r\n   * algorithm for multi-byte characters (perhaps\r\n   * by adding every four 16-bit characters and\r\n   * shortening the sum to 32 bits). Otherwise\r\n   * I suggest performing MD-5 as if every character\r\n   * was two bytes--e.g., 0040 0025 = @%--but then\r\n   * how will an ordinary MD-5 sum be matched?\r\n   * There is no way to standardize text to something\r\n   * like UTF-8 before transformation; speed cost is\r\n   * utterly prohibitive. The JavaScript standard\r\n   * itself needs to look at this: it should start\r\n   * providing access to strings as preformed UTF-8\r\n   * 8-bit unsigned value arrays.\r\n   */\nfunction md5blk(s) {/* I figured global was faster.   */\n  var md5blks = [],i; /* Andy King said do it this way. */\n  for (i = 0; i < 64; i += 4) {\n    md5blks[i >> 2] = s.charCodeAt(i) + (\n    s.charCodeAt(i + 1) << 8) + (\n    s.charCodeAt(i + 2) << 16) + (\n    s.charCodeAt(i + 3) << 24);\n  }\n  return md5blks;\n}\n\nvar hex_chr = '0123456789abcdef'.split('');\n\nfunction rhex(n)\n{\n  var s = '',j = 0;\n  for (; j < 4; j++) {\n    s += hex_chr[n >> j * 8 + 4 & 0x0F] +\n    hex_chr[n >> j * 8 & 0x0F];}\n  return s;\n}\n\nfunction hex(x) {\n  for (var i = 0; i < x.length; i++) {\n    x[i] = rhex(x[i]);}\n  return x.join('');\n}\n\nfunction Utf8Encode(string) {\n  string = string.replace(/\\r\\n/g, \"\\n\");\n  var utftext = \"\";\n  for (var n = 0; n < string.length; n++) {\n    var c = string.charCodeAt(n);\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode(c >> 6 | 192);\n      utftext += String.fromCharCode(c & 63 | 128);\n    } else {\n      utftext += String.fromCharCode(c >> 12 | 224);\n      utftext += String.fromCharCode(c >> 6 & 63 | 128);\n      utftext += String.fromCharCode(c & 63 | 128);\n    }\n  }\n  return utftext;\n}\n\nfunction md5(s, isBinaryString) {\n  if (!isBinaryString) {\n    s = Utf8Encode(s);\n  }\n  return hex(md51(s));\n}\n\n/* this function is much faster,\r\n  so if possible we use it. Some IEs\r\n  are the only ones I know of that\r\n  need the idiotic second function,\r\n  generated by an if clause.  */\n\nvar add32 = function add32(a, b) {\n  return a + b & 0xFFFFFFFF;\n};\nif (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {\n  add32 = function add32(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n    msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return msw << 16 | lsw & 0xFFFF;\n  };\n}\n\nmd5.getCtx = getCtx;\n\nmodule.exports = md5;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/*!**********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/lib/crypto.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n CryptoJS v3.1.2\r\n code.google.com/p/crypto-js\r\n (c) 2009-2013 by Jeff Mott. All rights reserved.\r\n code.google.com/p/crypto-js/wiki/License\r\n */\nvar CryptoJS = CryptoJS || function (g, l) {var e = {},d = e.lib = {},m = function m() {},k = d.Base = { extend: function extend(a) {m.prototype = this;var c = new m();a && c.mixIn(a);c.hasOwnProperty(\"init\") || (c.init = function () {c.$super.init.apply(this, arguments);});c.init.prototype = c;c.$super = this;return c;}, create: function create() {var a = this.extend();a.init.apply(a, arguments);return a;}, init: function init() {}, mixIn: function mixIn(a) {for (var c in a) {a.hasOwnProperty(c) && (this[c] = a[c]);}a.hasOwnProperty(\"toString\") && (this.toString = a.toString);}, clone: function clone() {return this.init.prototype.extend(this);} },\n  p = d.WordArray = k.extend({ init: function init(a, c) {a = this.words = a || [];this.sigBytes = c != l ? c : 4 * a.length;}, toString: function toString(a) {return (a || n).stringify(this);}, concat: function concat(a) {var c = this.words,q = a.words,f = this.sigBytes;a = a.sigBytes;this.clamp();if (f % 4) for (var b = 0; b < a; b++) {c[f + b >>> 2] |= (q[b >>> 2] >>> 24 - 8 * (b % 4) & 255) << 24 - 8 * ((f + b) % 4);} else if (65535 < q.length) for (b = 0; b < a; b += 4) {c[f + b >>> 2] = q[b >>> 2];} else c.push.apply(c, q);this.sigBytes += a;return this;}, clamp: function clamp() {var a = this.words,c = this.sigBytes;a[c >>> 2] &= 4294967295 <<\n      32 - 8 * (c % 4);a.length = g.ceil(c / 4);}, clone: function clone() {var a = k.clone.call(this);a.words = this.words.slice(0);return a;}, random: function random(a) {for (var c = [], b = 0; b < a; b += 4) {c.push(4294967296 * g.random() | 0);}return new p.init(c, a);} }),b = e.enc = {},n = b.Hex = { stringify: function stringify(a) {var c = a.words;a = a.sigBytes;for (var b = [], f = 0; f < a; f++) {var d = c[f >>> 2] >>> 24 - 8 * (f % 4) & 255;b.push((d >>> 4).toString(16));b.push((d & 15).toString(16));}return b.join(\"\");}, parse: function parse(a) {for (var c = a.length, b = [], f = 0; f < c; f += 2) {b[f >>> 3] |= parseInt(a.substr(f,\n        2), 16) << 24 - 4 * (f % 8);}return new p.init(b, c / 2);} },j = b.Latin1 = { stringify: function stringify(a) {var c = a.words;a = a.sigBytes;for (var b = [], f = 0; f < a; f++) {b.push(String.fromCharCode(c[f >>> 2] >>> 24 - 8 * (f % 4) & 255));}return b.join(\"\");}, parse: function parse(a) {for (var c = a.length, b = [], f = 0; f < c; f++) {b[f >>> 2] |= (a.charCodeAt(f) & 255) << 24 - 8 * (f % 4);}return new p.init(b, c);} },h = b.Utf8 = { stringify: function stringify(a) {try {return decodeURIComponent(escape(j.stringify(a)));} catch (c) {throw Error(\"Malformed UTF-8 data\");}}, parse: function parse(a) {return j.parse(unescape(encodeURIComponent(a)));} },\n  r = d.BufferedBlockAlgorithm = k.extend({ reset: function reset() {this._data = new p.init();this._nDataBytes = 0;}, _append: function _append(a) {\"string\" == typeof a && (a = h.parse(a));this._data.concat(a);this._nDataBytes += a.sigBytes;}, _process: function _process(a) {var c = this._data,b = c.words,f = c.sigBytes,d = this.blockSize,e = f / (4 * d),e = a ? g.ceil(e) : g.max((e | 0) - this._minBufferSize, 0);a = e * d;f = g.min(4 * a, f);if (a) {for (var k = 0; k < a; k += d) {this._doProcessBlock(b, k);}k = b.splice(0, a);c.sigBytes -= f;}return new p.init(k, f);}, clone: function clone() {var a = k.clone.call(this);\n      a._data = this._data.clone();return a;}, _minBufferSize: 0 });d.Hasher = r.extend({ cfg: k.extend(), init: function init(a) {this.cfg = this.cfg.extend(a);this.reset();}, reset: function reset() {r.reset.call(this);this._doReset();}, update: function update(a) {this._append(a);this._process();return this;}, finalize: function finalize(a) {a && this._append(a);return this._doFinalize();}, blockSize: 16, _createHelper: function _createHelper(a) {return function (b, d) {return new a.init(d).finalize(b);};}, _createHmacHelper: function _createHmacHelper(a) {return function (b, d) {return new s.HMAC.init(a,\n        d).finalize(b);};} });var s = e.algo = {};return e;}(Math);\n(function () {var g = CryptoJS,l = g.lib,e = l.WordArray,d = l.Hasher,m = [],l = g.algo.SHA1 = d.extend({ _doReset: function _doReset() {this._hash = new e.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);}, _doProcessBlock: function _doProcessBlock(d, e) {for (var b = this._hash.words, n = b[0], j = b[1], h = b[2], g = b[3], l = b[4], a = 0; 80 > a; a++) {if (16 > a) m[a] = d[e + a] | 0;else {var c = m[a - 3] ^ m[a - 8] ^ m[a - 14] ^ m[a - 16];m[a] = c << 1 | c >>> 31;}c = (n << 5 | n >>> 27) + l + m[a];c = 20 > a ? c + ((j & h | ~j & g) + 1518500249) : 40 > a ? c + ((j ^ h ^ g) + 1859775393) : 60 > a ? c + ((j & h | j & g | h & g) - 1894007588) : c + ((j ^ h ^\n        g) - 899497514);l = g;g = h;h = j << 30 | j >>> 2;j = n;n = c;}b[0] = b[0] + n | 0;b[1] = b[1] + j | 0;b[2] = b[2] + h | 0;b[3] = b[3] + g | 0;b[4] = b[4] + l | 0;}, _doFinalize: function _doFinalize() {var d = this._data,e = d.words,b = 8 * this._nDataBytes,g = 8 * d.sigBytes;e[g >>> 5] |= 128 << 24 - g % 32;e[(g + 64 >>> 9 << 4) + 14] = Math.floor(b / 4294967296);e[(g + 64 >>> 9 << 4) + 15] = b;d.sigBytes = 4 * e.length;this._process();return this._hash;}, clone: function clone() {var e = d.clone.call(this);e._hash = this._hash.clone();return e;} });g.SHA1 = d._createHelper(l);g.HmacSHA1 = d._createHmacHelper(l);})();\n(function () {var g = CryptoJS,l = g.enc.Utf8;g.algo.HMAC = g.lib.Base.extend({ init: function init(e, d) {e = this._hasher = new e.init();\"string\" == typeof d && (d = l.parse(d));var g = e.blockSize,k = 4 * g;d.sigBytes > k && (d = e.finalize(d));d.clamp();for (var p = this._oKey = d.clone(), b = this._iKey = d.clone(), n = p.words, j = b.words, h = 0; h < g; h++) {n[h] ^= 1549556828, j[h] ^= 909522486;}p.sigBytes = b.sigBytes = k;this.reset();}, reset: function reset() {var e = this._hasher;e.reset();e.update(this._iKey);}, update: function update(e) {this._hasher.update(e);return this;}, finalize: function finalize(e) {var d =\n      this._hasher;e = d.finalize(e);d.reset();return d.finalize(this._oKey.clone().concat(e));} });})();\n\n\n(function () {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var WordArray = C_lib.WordArray;\n  var C_enc = C.enc;\n\n  /**\r\n                      * Base64 encoding strategy.\r\n                      */\n  var Base64 = C_enc.Base64 = {\n    /**\r\n                                 * Converts a word array to a Base64 string.\r\n                                 *\r\n                                 * @param {WordArray} wordArray The word array.\r\n                                 *\r\n                                 * @return {string} The Base64 string.\r\n                                 *\r\n                                 * @static\r\n                                 *\r\n                                 * @example\r\n                                 *\r\n                                 *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\r\n                                 */\n    stringify: function stringify(wordArray) {\n      // Shortcuts\n      var words = wordArray.words;\n      var sigBytes = wordArray.sigBytes;\n      var map = this._map;\n\n      // Clamp excess bits\n      wordArray.clamp();\n\n      // Convert\n      var base64Chars = [];\n      for (var i = 0; i < sigBytes; i += 3) {\n        var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n        var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n        var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n        for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n          base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n        }\n      }\n\n      // Add padding\n      var paddingChar = map.charAt(64);\n      if (paddingChar) {\n        while (base64Chars.length % 4) {\n          base64Chars.push(paddingChar);\n        }\n      }\n\n      return base64Chars.join('');\n    },\n\n    /**\r\n        * Converts a Base64 string to a word array.\r\n        *\r\n        * @param {string} base64Str The Base64 string.\r\n        *\r\n        * @return {WordArray} The word array.\r\n        *\r\n        * @static\r\n        *\r\n        * @example\r\n        *\r\n        *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\r\n        */\n    parse: function parse(base64Str) {\n      // Shortcuts\n      var base64StrLength = base64Str.length;\n      var map = this._map;\n\n      // Ignore padding\n      var paddingChar = map.charAt(64);\n      if (paddingChar) {\n        var paddingIndex = base64Str.indexOf(paddingChar);\n        if (paddingIndex != -1) {\n          base64StrLength = paddingIndex;\n        }\n      }\n\n      // Convert\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;\n          var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n\n      return WordArray.create(words, nBytes);\n    },\n\n    _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n})();\n\nif (true) {\n  module.exports = CryptoJS;\n} else {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/*!************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/lib/xml2json.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright 2015 William Summers, MetaTribal LLC\r\n * adapted from https://developer.mozilla.org/en-US/docs/JXON\r\n *\r\n * Licensed under the MIT License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     https://opensource.org/licenses/MIT\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n     * @author William Summers\r\n     * https://github.com/metatribal/xmlToJSON\r\n     */\nvar DOMParser = __webpack_require__(/*! xmldom */ 29).DOMParser;\n\nvar xmlToJSON = function () {\n\n  this.version = \"1.3.5\";\n\n  var options = { // set up the default options\n    mergeCDATA: true, // extract cdata and merge with text\n    normalize: true, // collapse multiple spaces to single space\n    stripElemPrefix: true // for elements of same name in diff namespaces, you can enable namespaces and access the nskey property\n  };\n\n  var prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n  var trimMatch = new RegExp(/^\\s+|\\s+$/g);\n\n  this.grokType = function (sValue) {\n    if (/^\\s*$/.test(sValue)) {\n      return null;\n    }\n    if (/^(?:true|false)$/i.test(sValue)) {\n      return sValue.toLowerCase() === \"true\";\n    }\n    if (isFinite(sValue)) {\n      return parseFloat(sValue);\n    }\n    return sValue;\n  };\n\n  this.parseString = function (xmlString, opt) {\n    if (xmlString) {\n      var xml = this.stringToXML(xmlString);\n      if (xml.getElementsByTagName('parsererror').length) {\n        return null;\n      } else {\n        return this.parseXML(xml, opt);\n      }\n    } else {\n      return null;\n    }\n  };\n\n  this.parseXML = function (oXMLParent, opt) {\n\n    // initialize options\n    for (var key in opt) {\n      options[key] = opt[key];\n    }\n\n    var vResult = {},\n    nLength = 0,\n    sCollectedTxt = \"\";\n\n    // iterate over the children\n    var childNum = oXMLParent.childNodes.length;\n    if (childNum) {\n      for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {\n        oNode = oXMLParent.childNodes.item(nItem);\n\n        if (oNode.nodeType === 4) {\n          if (options.mergeCDATA) {\n            sCollectedTxt += oNode.nodeValue;\n          }\n        } /* nodeType is \"CDATASection\" (4) */else\n          if (oNode.nodeType === 3) {\n            sCollectedTxt += oNode.nodeValue;\n          } /* nodeType is \"Text\" (3) */else\n            if (oNode.nodeType === 1) {/* nodeType is \"Element\" (1) */\n\n              if (nLength === 0) {\n                vResult = {};\n              }\n\n              // using nodeName to support browser (IE) implementation with no 'localName' property\n              if (options.stripElemPrefix) {\n                sProp = oNode.nodeName.replace(prefixMatch, '');\n              } else {\n                sProp = oNode.nodeName;\n              }\n\n              vContent = xmlToJSON.parseXML(oNode);\n\n              if (vResult.hasOwnProperty(sProp)) {\n                if (vResult[sProp].constructor !== Array) {\n                  vResult[sProp] = [vResult[sProp]];\n                }\n                vResult[sProp].push(vContent);\n\n              } else {\n                vResult[sProp] = vContent;\n                nLength++;\n              }\n            }\n      }\n    }\n\n    if (!Object.keys(vResult).length) {\n      // vResult = sCollectedTxt.replace(trimMatch, '') || ''; // by carsonxu 修复 getBucket返回的 Key 是 \" /\" 这种场景\n      vResult = sCollectedTxt || '';\n    }\n\n    return vResult;\n  };\n\n  // Convert xmlDocument to a string\n  // Returns null on failure\n  this.xmlToString = function (xmlDoc) {\n    try {\n      var xmlString = xmlDoc.xml ? xmlDoc.xml : new XMLSerializer().serializeToString(xmlDoc);\n      return xmlString;\n    } catch (err) {\n      return null;\n    }\n  };\n\n  // Convert a string to XML Node Structure\n  // Returns null on failure\n  this.stringToXML = function (xmlString) {\n    try {\n      var xmlDoc = null;\n\n      if (window.DOMParser) {\n\n        var parser = new DOMParser();\n        xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n\n        return xmlDoc;\n      } else {\n        xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = false;\n        xmlDoc.loadXML(xmlString);\n\n        return xmlDoc;\n      }\n    } catch (e) {\n      return null;\n    }\n  };\n\n  return this;\n\n}.call({});\n\nvar xml2json = function xml2json(xmlString) {\n  return xmlToJSON.parseString(xmlString);\n};\n\nmodule.exports = xml2json;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/*!***************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/xmldom/dom-parser.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__f__) {function DOMParser(options) {\n  this.options = options || { locator: {} };\n\n}\nDOMParser.prototype.parseFromString = function (source, mimeType) {\n  var options = this.options;\n  var sax = new XMLReader();\n  var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n  var errorHandler = options.errorHandler;\n  var locator = options.locator;\n  var defaultNSMap = options.xmlns || {};\n  var entityMap = { 'lt': '<', 'gt': '>', 'amp': '&', 'quot': '\"', 'apos': \"'\" };\n  if (locator) {\n    domBuilder.setDocumentLocator(locator);\n  }\n\n  sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n  sax.domBuilder = options.domBuilder || domBuilder;\n  if (/\\/x?html?$/.test(mimeType)) {\n    entityMap.nbsp = '\\xa0';\n    entityMap.copy = '\\xa9';\n    defaultNSMap[''] = 'http://www.w3.org/1999/xhtml';\n  }\n  defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\n  if (source) {\n    sax.parse(source, defaultNSMap, entityMap);\n  } else {\n    sax.errorHandler.error(\"invalid doc source\");\n  }\n  return domBuilder.doc;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n  if (!errorImpl) {\n    if (domBuilder instanceof DOMHandler) {\n      return domBuilder;\n    }\n    errorImpl = domBuilder;\n  }\n  var errorHandler = {};\n  var isCallback = errorImpl instanceof Function;\n  locator = locator || {};\n  function build(key) {\n    var fn = errorImpl[key];\n    if (!fn && isCallback) {\n      fn = errorImpl.length == 2 ? function (msg) {errorImpl(key, msg);} : errorImpl;\n    }\n    errorHandler[key] = fn && function (msg) {\n      fn('[xmldom ' + key + ']\\t' + msg + _locator(locator));\n    } || function () {};\n  }\n  build('warning');\n  build('error');\n  build('fatalError');\n  return errorHandler;\n}\n\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler \r\n * \r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\nfunction DOMHandler() {\n  this.cdata = false;\n}\nfunction position(locator, node) {\n  node.lineNumber = locator.lineNumber;\n  node.columnNumber = locator.columnNumber;\n}\n/**\r\n   * @see org.xml.sax.ContentHandler#startDocument\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n   */\nDOMHandler.prototype = {\n  startDocument: function startDocument() {\n    this.doc = new DOMImplementation().createDocument(null, null, null);\n    if (this.locator) {\n      this.doc.documentURI = this.locator.systemId;\n    }\n  },\n  startElement: function startElement(namespaceURI, localName, qName, attrs) {\n    var doc = this.doc;\n    var el = doc.createElementNS(namespaceURI, qName || localName);\n    var len = attrs.length;\n    appendElement(this, el);\n    this.currentElement = el;\n\n    this.locator && position(this.locator, el);\n    for (var i = 0; i < len; i++) {\n      var namespaceURI = attrs.getURI(i);\n      var value = attrs.getValue(i);\n      var qName = attrs.getQName(i);\n      var attr = doc.createAttributeNS(namespaceURI, qName);\n      this.locator && position(attrs.getLocator(i), attr);\n      attr.value = attr.nodeValue = value;\n      el.setAttributeNode(attr);\n    }\n  },\n  endElement: function endElement(namespaceURI, localName, qName) {\n    var current = this.currentElement;\n    var tagName = current.tagName;\n    this.currentElement = current.parentNode;\n  },\n  startPrefixMapping: function startPrefixMapping(prefix, uri) {\n  },\n  endPrefixMapping: function endPrefixMapping(prefix) {\n  },\n  processingInstruction: function processingInstruction(target, data) {\n    var ins = this.doc.createProcessingInstruction(target, data);\n    this.locator && position(this.locator, ins);\n    appendElement(this, ins);\n  },\n  ignorableWhitespace: function ignorableWhitespace(ch, start, length) {\n  },\n  characters: function characters(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    //console.log(chars)\n    if (chars) {\n      if (this.cdata) {\n        var charNode = this.doc.createCDATASection(chars);\n      } else {\n        var charNode = this.doc.createTextNode(chars);\n      }\n      if (this.currentElement) {\n        this.currentElement.appendChild(charNode);\n      } else if (/^\\s*$/.test(chars)) {\n        this.doc.appendChild(charNode);\n        //process xml\n      }\n      this.locator && position(this.locator, charNode);\n    }\n  },\n  skippedEntity: function skippedEntity(name) {\n  },\n  endDocument: function endDocument() {\n    this.doc.normalize();\n  },\n  setDocumentLocator: function setDocumentLocator(locator) {\n    if (this.locator = locator) {// && !('lineNumber' in locator)){\n      locator.lineNumber = 0;\n    }\n  },\n  //LexicalHandler\n  comment: function comment(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    var comm = this.doc.createComment(chars);\n    this.locator && position(this.locator, comm);\n    appendElement(this, comm);\n  },\n\n  startCDATA: function startCDATA() {\n    //used in characters() methods\n    this.cdata = true;\n  },\n  endCDATA: function endCDATA() {\n    this.cdata = false;\n  },\n\n  startDTD: function startDTD(name, publicId, systemId) {\n    var impl = this.doc.implementation;\n    if (impl && impl.createDocumentType) {\n      var dt = impl.createDocumentType(name, publicId, systemId);\n      this.locator && position(this.locator, dt);\n      appendElement(this, dt);\n    }\n  },\n  /**\r\n      * @see org.xml.sax.ErrorHandler\r\n      * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n      */\n  warning: function warning(error) {\n    __f__(\"warn\", '[xmldom warning]\\t' + error, _locator(this.locator), \" at xmldom/dom-parser.js:176\");\n  },\n  error: function error(_error) {\n    __f__(\"error\", '[xmldom error]\\t' + _error, _locator(this.locator), \" at xmldom/dom-parser.js:179\");\n  },\n  fatalError: function fatalError(error) {\n    __f__(\"error\", '[xmldom fatalError]\\t' + error, _locator(this.locator), \" at xmldom/dom-parser.js:182\");\n    throw error;\n  } };\n\nfunction _locator(l) {\n  if (l) {\n    return '\\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';\n  }\n}\nfunction _toString(chars, start, length) {\n  if (typeof chars == 'string') {\n    return chars.substr(start, length);\n  } else {//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\n    if (chars.length >= start + length || start) {\n      return new java.lang.String(chars, start, length) + '';\n    }\n    return chars;\n  }\n}\n\n/*\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n   * used method of org.xml.sax.ext.LexicalHandler:\r\n   *  #comment(chars, start, length)\r\n   *  #startCDATA()\r\n   *  #endCDATA()\r\n   *  #startDTD(name, publicId, systemId)\r\n   *\r\n   *\r\n   * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n   *  #endDTD()\r\n   *  #startEntity(name)\r\n   *  #endEntity(name)\r\n   *\r\n   *\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n   * IGNORED method of org.xml.sax.ext.DeclHandler\r\n   * \t#attributeDecl(eName, aName, type, mode, value)\r\n   *  #elementDecl(name, model)\r\n   *  #externalEntityDecl(name, publicId, systemId)\r\n   *  #internalEntityDecl(name, value)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n   * IGNORED method of org.xml.sax.EntityResolver2\r\n   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n   *  #resolveEntity(publicId, systemId)\r\n   *  #getExternalSubset(name, baseURI)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n   * IGNORED method of org.xml.sax.DTDHandler\r\n   *  #notationDecl(name, publicId, systemId) {};\r\n   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n   */\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function (key) {\n  DOMHandler.prototype[key] = function () {return null;};\n});\n\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\nfunction appendElement(hander, node) {\n  if (!hander.currentElement) {\n    hander.doc.appendChild(node);\n  } else {\n    hander.currentElement.appendChild(node);\n  }\n} //appendChild and setAttributeNS are preformance key\n\n//if(typeof require == 'function'){\nvar XMLReader = __webpack_require__(/*! ./sax */ 30).XMLReader;\nvar DOMImplementation = exports.DOMImplementation = __webpack_require__(/*! ./dom */ 31).DOMImplementation;\nexports.XMLSerializer = __webpack_require__(/*! ./dom */ 31).XMLSerializer;\nexports.DOMParser = DOMParser;\n//}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/*!********************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/xmldom/sax.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/; //\\u10000-\\uEFFFF\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\nvar tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\\:' + nameStartChar.source + nameChar.source + '*)?$');\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring \nvar S_ATTR_SPACE = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\nvar S_ATTR_END = 5; //attr value end and no space(quot end)\nvar S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7; //closed el<el />\n\nfunction XMLReader() {\n\n}\n\nXMLReader.prototype = {\n  parse: function parse(source, defaultNSMap, entityMap) {\n    var domBuilder = this.domBuilder;\n    domBuilder.startDocument();\n    _copy(defaultNSMap, defaultNSMap = {});\n    _parse(source, defaultNSMap, entityMap,\n    domBuilder, this.errorHandler);\n    domBuilder.endDocument();\n  } };\n\nfunction _parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n  function fixedFromCharCode(code) {\n    // String.prototype.fromCharCode does not supports\n    // > 2 bytes unicode chars directly\n    if (code > 0xffff) {\n      code -= 0x10000;\n      var surrogate1 = 0xd800 + (code >> 10),\n      surrogate2 = 0xdc00 + (code & 0x3ff);\n\n      return String.fromCharCode(surrogate1, surrogate2);\n    } else {\n      return String.fromCharCode(code);\n    }\n  }\n  function entityReplacer(a) {\n    var k = a.slice(1, -1);\n    if (k in entityMap) {\n      return entityMap[k];\n    } else if (k.charAt(0) === '#') {\n      return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));\n    } else {\n      errorHandler.error('entity not found:' + a);\n      return a;\n    }\n  }\n  function appendText(end) {//has some bugs\n    if (end > start) {\n      var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n      locator && position(start);\n      domBuilder.characters(xt, 0, end - start);\n      start = end;\n    }\n  }\n  function position(p, m) {\n    while (p >= lineEnd && (m = linePattern.exec(source))) {\n      lineStart = m.index;\n      lineEnd = lineStart + m[0].length;\n      locator.lineNumber++;\n      //console.log('line++:',locator,startPos,endPos)\n    }\n    locator.columnNumber = p - lineStart + 1;\n  }\n  var lineStart = 0;\n  var lineEnd = 0;\n  var linePattern = /.*(?:\\r\\n?|\\n)|.*$/g;\n  var locator = domBuilder.locator;\n\n  var parseStack = [{ currentNSMap: defaultNSMapCopy }];\n  var closeMap = {};\n  var start = 0;\n  while (true) {\n    try {\n      var tagStart = source.indexOf('<', start);\n      if (tagStart < 0) {\n        if (!source.substr(start).match(/^\\s*$/)) {\n          var doc = domBuilder.doc;\n          var text = doc.createTextNode(source.substr(start));\n          doc.appendChild(text);\n          domBuilder.currentElement = text;\n        }\n        return;\n      }\n      if (tagStart > start) {\n        appendText(tagStart);\n      }\n      switch (source.charAt(tagStart + 1)) {\n        case '/':\n          var end = source.indexOf('>', tagStart + 3);\n          var tagName = source.substring(tagStart + 2, end);\n          var config = parseStack.pop();\n          if (end < 0) {\n\n            tagName = source.substring(tagStart + 2).replace(/[\\s<].*/, '');\n            //console.error('#@@@@@@'+tagName)\n            errorHandler.error(\"end tag name: \" + tagName + ' is not complete:' + config.tagName);\n            end = tagStart + 1 + tagName.length;\n          } else if (tagName.match(/\\s</)) {\n            tagName = tagName.replace(/[\\s<].*/, '');\n            errorHandler.error(\"end tag name: \" + tagName + ' maybe not complete');\n            end = tagStart + 1 + tagName.length;\n          }\n          //console.error(parseStack.length,parseStack)\n          //console.error(config);\n          var localNSMap = config.localNSMap;\n          var endMatch = config.tagName == tagName;\n          var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();\n          if (endIgnoreCaseMach) {\n            domBuilder.endElement(config.uri, config.localName, tagName);\n            if (localNSMap) {\n              for (var prefix in localNSMap) {\n                domBuilder.endPrefixMapping(prefix);\n              }\n            }\n            if (!endMatch) {\n              errorHandler.fatalError(\"end tag name: \" + tagName + ' is not match the current start tagName:' + config.tagName);\n            }\n          } else {\n            parseStack.push(config);\n          }\n\n          end++;\n          break;\n        // end elment\n        case '?': // <?...?>\n          locator && position(tagStart);\n          end = parseInstruction(source, tagStart, domBuilder);\n          break;\n        case '!': // <!doctype,<![CDATA,<!--\n          locator && position(tagStart);\n          end = parseDCC(source, tagStart, domBuilder, errorHandler);\n          break;\n        default:\n          locator && position(tagStart);\n          var el = new ElementAttributes();\n          var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n          //elStartEnd\n          var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);\n          var len = el.length;\n\n\n          if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n            el.closed = true;\n            if (!entityMap.nbsp) {\n              errorHandler.warning('unclosed xml attribute');\n            }\n          }\n          if (locator && len) {\n            var locator2 = copyLocator(locator, {});\n            //try{//attribute position fixed\n            for (var i = 0; i < len; i++) {\n              var a = el[i];\n              position(a.offset);\n              a.locator = copyLocator(locator, {});\n            }\n            //}catch(e){console.error('@@@@@'+e)}\n            domBuilder.locator = locator2;\n            if (appendElement(el, domBuilder, currentNSMap)) {\n              parseStack.push(el);\n            }\n            domBuilder.locator = locator;\n          } else {\n            if (appendElement(el, domBuilder, currentNSMap)) {\n              parseStack.push(el);\n            }\n          }\n\n\n\n          if (el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed) {\n            end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n          } else {\n            end++;\n          }}\n\n    } catch (e) {\n      errorHandler.error('element parse error: ' + e);\n      //errorHandler.error('element parse error: '+e);\n      end = -1;\n      //throw e;\n    }\n    if (end > start) {\n      start = end;\n    } else {\n      //TODO: 这里有可能sax回退，有位置错误风险\n      appendText(Math.max(tagStart, start) + 1);\n    }\n  }\n}\nfunction copyLocator(f, t) {\n  t.lineNumber = f.lineNumber;\n  t.columnNumber = f.columnNumber;\n  return t;\n}\n\n/**\r\n   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\nfunction parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {\n  var attrName;\n  var value;\n  var p = ++start;\n  var s = S_TAG; //status\n  while (true) {\n    var c = source.charAt(p);\n    switch (c) {\n      case '=':\n        if (s === S_ATTR) {//attrName\n          attrName = source.slice(start, p);\n          s = S_EQ;\n        } else if (s === S_ATTR_SPACE) {\n          s = S_EQ;\n        } else {\n          //fatalError: equal must after attrName or space after attrName\n          throw new Error('attribute equal must after attrName');\n        }\n        break;\n      case '\\'':\n      case '\"':\n        if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n        ) {//equal\n            if (s === S_ATTR) {\n              errorHandler.warning('attribute value must after \"=\"');\n              attrName = source.slice(start, p);\n            }\n            start = p + 1;\n            p = source.indexOf(c, start);\n            if (p > 0) {\n              value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n              el.add(attrName, value, start - 1);\n              s = S_ATTR_END;\n            } else {\n              //fatalError: no end quot match\n              throw new Error('attribute value no end \\'' + c + '\\' match');\n            }\n          } else if (s == S_ATTR_NOQUOT_VALUE) {\n          value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n          //console.log(attrName,value,start,p)\n          el.add(attrName, value, start);\n          //console.dir(el)\n          errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + ')!!');\n          start = p + 1;\n          s = S_ATTR_END;\n        } else {\n          //fatalError: no equal before\n          throw new Error('attribute value must after \"=\"');\n        }\n        break;\n      case '/':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_ATTR_END:\n          case S_TAG_SPACE:\n          case S_TAG_CLOSE:\n            s = S_TAG_CLOSE;\n            el.closed = true;\n          case S_ATTR_NOQUOT_VALUE:\n          case S_ATTR:\n          case S_ATTR_SPACE:\n            break;\n          //case S_EQ:\n          default:\n            throw new Error(\"attribute invalid close char('/')\");}\n\n        break;\n      case '': //end document\n        //throw new Error('unexpected end of input')\n        errorHandler.error('unexpected end of input');\n        if (s == S_TAG) {\n          el.setTagName(source.slice(start, p));\n        }\n        return p;\n      case '>':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_ATTR_END:\n          case S_TAG_SPACE:\n          case S_TAG_CLOSE:\n            break; //normal\n          case S_ATTR_NOQUOT_VALUE: //Compatible state\n          case S_ATTR:\n            value = source.slice(start, p);\n            if (value.slice(-1) === '/') {\n              el.closed = true;\n              value = value.slice(0, -1);\n            }\n          case S_ATTR_SPACE:\n            if (s === S_ATTR_SPACE) {\n              value = attrName;\n            }\n            if (s == S_ATTR_NOQUOT_VALUE) {\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value.replace(/&#?\\w+;/g, entityReplacer), start);\n            } else {\n              if (currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)) {\n                errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n              }\n              el.add(value, value, start);\n            }\n            break;\n          case S_EQ:\n            throw new Error('attribute value missed!!');}\n\n        //\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n        return p;\n      /*xml space '\\x20' | #x9 | #xD | #xA; */\n      case \"\\x80\":\n        c = ' ';\n      default:\n        if (c <= ' ') {//space\n          switch (s) {\n            case S_TAG:\n              el.setTagName(source.slice(start, p)); //tagName\n              s = S_TAG_SPACE;\n              break;\n            case S_ATTR:\n              attrName = source.slice(start, p);\n              s = S_ATTR_SPACE;\n              break;\n            case S_ATTR_NOQUOT_VALUE:\n              var value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value, start);\n            case S_ATTR_END:\n              s = S_TAG_SPACE;\n              break;\n            //case S_TAG_SPACE:\n            //case S_EQ:\n            //case S_ATTR_SPACE:\n            //\tvoid();break;\n            //case S_TAG_CLOSE:\n            //ignore warning\n          }\n        } else {//not space\n          //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n          //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n          switch (s) {\n            //case S_TAG:void();break;\n            //case S_ATTR:void();break;\n            //case S_ATTR_NOQUOT_VALUE:void();break;\n            case S_ATTR_SPACE:\n              var tagName = el.tagName;\n              if (currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\n                errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\n              }\n              el.add(attrName, attrName, start);\n              start = p;\n              s = S_ATTR;\n              break;\n            case S_ATTR_END:\n              errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n            case S_TAG_SPACE:\n              s = S_ATTR;\n              start = p;\n              break;\n            case S_EQ:\n              s = S_ATTR_NOQUOT_VALUE;\n              start = p;\n              break;\n            case S_TAG_CLOSE:\n              throw new Error(\"elements closed character '/' and '>' must be connected to\");}\n\n        }}\n    //end outer switch\n    //console.log('p++',p)\n    p++;\n  }\n}\n/**\r\n   * @return true if has new namespace define\r\n   */\nfunction appendElement(el, domBuilder, currentNSMap) {\n  var tagName = el.tagName;\n  var localNSMap = null;\n  //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n  var i = el.length;\n  while (i--) {\n    var a = el[i];\n    var qName = a.qName;\n    var value = a.value;\n    var nsp = qName.indexOf(':');\n    if (nsp > 0) {\n      var prefix = a.prefix = qName.slice(0, nsp);\n      var localName = qName.slice(nsp + 1);\n      var nsPrefix = prefix === 'xmlns' && localName;\n    } else {\n      localName = qName;\n      prefix = null;\n      nsPrefix = qName === 'xmlns' && '';\n    }\n    //can not set prefix,because prefix !== ''\n    a.localName = localName;\n    //prefix == null for no ns prefix attribute \n    if (nsPrefix !== false) {//hack!!\n      if (localNSMap == null) {\n        localNSMap = {};\n        //console.log(currentNSMap,0)\n        _copy(currentNSMap, currentNSMap = {});\n        //console.log(currentNSMap,1)\n      }\n      currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n      a.uri = 'http://www.w3.org/2000/xmlns/';\n      domBuilder.startPrefixMapping(nsPrefix, value);\n    }\n  }\n  var i = el.length;\n  while (i--) {\n    a = el[i];\n    var prefix = a.prefix;\n    if (prefix) {//no prefix attribute has no namespace\n      if (prefix === 'xml') {\n        a.uri = 'http://www.w3.org/XML/1998/namespace';\n      }if (prefix !== 'xmlns') {\n        a.uri = currentNSMap[prefix || ''];\n\n        //{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n      }\n    }\n  }\n  var nsp = tagName.indexOf(':');\n  if (nsp > 0) {\n    prefix = el.prefix = tagName.slice(0, nsp);\n    localName = el.localName = tagName.slice(nsp + 1);\n  } else {\n    prefix = null; //important!!\n    localName = el.localName = tagName;\n  }\n  //no prefix element has default namespace\n  var ns = el.uri = currentNSMap[prefix || ''];\n  domBuilder.startElement(ns, localName, tagName, el);\n  //endPrefixMapping and startPrefixMapping have not any help for dom builder\n  //localNSMap = null\n  if (el.closed) {\n    domBuilder.endElement(ns, localName, tagName);\n    if (localNSMap) {\n      for (prefix in localNSMap) {\n        domBuilder.endPrefixMapping(prefix);\n      }\n    }\n  } else {\n    el.currentNSMap = currentNSMap;\n    el.localNSMap = localNSMap;\n    //parseStack.push(el);\n    return true;\n  }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n  if (/^(?:script|textarea)$/i.test(tagName)) {\n    var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);\n    var text = source.substring(elStartEnd + 1, elEndStart);\n    if (/[&<]/.test(text)) {\n      if (/^script$/i.test(tagName)) {\n        //if(!/\\]\\]>/.test(text)){\n        //lexHandler.startCDATA();\n        domBuilder.characters(text, 0, text.length);\n        //lexHandler.endCDATA();\n        return elEndStart;\n        //}\n      } //}else{//text area\n      text = text.replace(/&#?\\w+;/g, entityReplacer);\n      domBuilder.characters(text, 0, text.length);\n      return elEndStart;\n      //}\n\n    }\n  }\n  return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n  //if(tagName in closeMap){\n  var pos = closeMap[tagName];\n  if (pos == null) {\n    //console.log(tagName)\n    pos = source.lastIndexOf('</' + tagName + '>');\n    if (pos < elStartEnd) {//忘记闭合\n      pos = source.lastIndexOf('</' + tagName);\n    }\n    closeMap[tagName] = pos;\n  }\n  return pos < elStartEnd;\n  //} \n}\nfunction _copy(source, target) {\n  for (var n in source) {target[n] = source[n];}\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {//sure start with '<!'\n  var next = source.charAt(start + 2);\n  switch (next) {\n    case '-':\n      if (source.charAt(start + 3) === '-') {\n        var end = source.indexOf('-->', start + 4);\n        //append comment source.substring(4,end)//<!--\n        if (end > start) {\n          domBuilder.comment(source, start + 4, end - start - 4);\n          return end + 3;\n        } else {\n          errorHandler.error(\"Unclosed comment\");\n          return -1;\n        }\n      } else {\n        //error\n        return -1;\n      }\n    default:\n      if (source.substr(start + 3, 6) == 'CDATA[') {\n        var end = source.indexOf(']]>', start + 9);\n        domBuilder.startCDATA();\n        domBuilder.characters(source, start + 9, end - start - 9);\n        domBuilder.endCDATA();\n        return end + 3;\n      }\n      //<!DOCTYPE\n      //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) \n      var matchs = split(source, start);\n      var len = matchs.length;\n      if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n        var name = matchs[1][0];\n        var pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];\n        var sysid = len > 4 && matchs[4][0];\n        var lastMatch = matchs[len - 1];\n        domBuilder.startDTD(name, pubid && pubid.replace(/^(['\"])(.*?)\\1$/, '$2'),\n        sysid && sysid.replace(/^(['\"])(.*?)\\1$/, '$2'));\n        domBuilder.endDTD();\n\n        return lastMatch.index + lastMatch[0].length;\n      }}\n\n  return -1;\n}\n\n\n\nfunction parseInstruction(source, start, domBuilder) {\n  var end = source.indexOf('?>', start);\n  if (end) {\n    var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n    if (match) {\n      var len = match[0].length;\n      domBuilder.processingInstruction(match[1], match[2]);\n      return end + 2;\n    } else {//error\n      return -1;\n    }\n  }\n  return -1;\n}\n\n/**\r\n   * @param source\r\n   */\nfunction ElementAttributes(source) {\n\n}\nElementAttributes.prototype = {\n  setTagName: function setTagName(tagName) {\n    if (!tagNamePattern.test(tagName)) {\n      throw new Error('invalid tagName:' + tagName);\n    }\n    this.tagName = tagName;\n  },\n  add: function add(qName, value, offset) {\n    if (!tagNamePattern.test(qName)) {\n      throw new Error('invalid attribute:' + qName);\n    }\n    this[this.length++] = { qName: qName, value: value, offset: offset };\n  },\n  length: 0,\n  getLocalName: function getLocalName(i) {return this[i].localName;},\n  getLocator: function getLocator(i) {return this[i].locator;},\n  getQName: function getQName(i) {return this[i].qName;},\n  getURI: function getURI(i) {return this[i].uri;},\n  getValue: function getValue(i) {return this[i].value;}\n  //\t,getIndex:function(uri, localName)){\n  //\t\tif(localName){\n  //\t\t\t\n  //\t\t}else{\n  //\t\t\tvar qName = uri\n  //\t\t}\n  //\t},\n  //\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\n  //\tgetType:function(uri,localName){}\n  //\tgetType:function(i){},\n};\n\n\n\n\nfunction _set_proto_(thiz, parent) {\n  thiz.__proto__ = parent;\n  return thiz;\n}\nif (!(_set_proto_({}, _set_proto_.prototype) instanceof _set_proto_)) {\n  _set_proto_ = function _set_proto_(thiz, parent) {\n    function p() {};\n    p.prototype = parent;\n    p = new p();\n    for (parent in thiz) {\n      p[parent] = thiz[parent];\n    }\n    return p;\n  };\n}\n\nfunction split(source, start) {\n  var match;\n  var buf = [];\n  var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n  reg.lastIndex = start;\n  reg.exec(source); //skip <\n  while (match = reg.exec(source)) {\n    buf.push(match);\n    if (match[1]) return buf;\n  }\n}\n\nexports.XMLReader = XMLReader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/*!********************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/xmldom/dom.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__f__) {/*\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n */\n\nfunction copy(src, dest) {\n  for (var p in src) {\n    dest[p] = src[p];\n  }\n}\n/**\n  ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n  ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n   */\nfunction _extends(Class, Super) {\n  var pt = Class.prototype;\n  if (Object.create) {\n    var ppt = Object.create(Super.prototype);\n    pt.__proto__ = ppt;\n  }\n  if (!(pt instanceof Super)) {var\n    t = function t() {};;\n    t.prototype = Super.prototype;\n    t = new t();\n    copy(pt, t);\n    Class.prototype = pt = t;\n  }\n  if (pt.constructor != Class) {\n    if (typeof Class != 'function') {\n      __f__(\"error\", \"unknow Class:\" + Class, \" at xmldom/dom.js:32\");\n    }\n    pt.constructor = Class;\n  }\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml';\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n\n\nfunction DOMException(code, message) {\n  if (message instanceof Error) {\n    var error = message;\n  } else {\n    error = this;\n    Error.call(this, ExceptionMessage[code]);\n    this.message = ExceptionMessage[code];\n    if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n  }\n  error.code = code;\n  if (message) this.message = this.message + \": \" + message;\n  return error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n                                    * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n                                    * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n                                    * The items in the NodeList are accessible via an integral index, starting from 0.\n                                    */\nfunction NodeList() {\n};\nNodeList.prototype = {\n  /**\n                        * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n                        * @standard level1\n                        */\n  length: 0,\n  /**\n              * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n              * @standard level1\n              * @param index  unsigned long \n              *   Index into the collection.\n              * @return Node\n              * \tThe node at the indexth position in the NodeList, or null if that is not a valid index. \n              */\n  item: function item(index) {\n    return this[index] || null;\n  },\n  toString: function toString(isHTML, nodeFilter) {\n    for (var buf = [], i = 0; i < this.length; i++) {\n      serializeToString(this[i], buf, isHTML, nodeFilter);\n    }\n    return buf.join('');\n  } };\n\nfunction LiveNodeList(node, refresh) {\n  this._node = node;\n  this._refresh = refresh;\n  _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n  var inc = list._node._inc || list._node.ownerDocument._inc;\n  if (list._inc != inc) {\n    var ls = list._refresh(list._node);\n    //console.log(ls.length)\n    __set__(list, 'length', ls.length);\n    copy(ls, list);\n    list._inc = inc;\n  }\n}\nLiveNodeList.prototype.item = function (i) {\n  _updateLiveList(this);\n  return this[i];\n};\n\n_extends(LiveNodeList, NodeList);\n/**\n                                   * \n                                   * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n                                   * NamedNodeMap objects in the DOM are live.\n                                   * used for attributes or DocumentType entities \n                                   */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list, node) {\n  var i = list.length;\n  while (i--) {\n    if (list[i] === node) {return i;}\n  }\n}\n\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n  if (oldAttr) {\n    list[_findNodeIndex(list, oldAttr)] = newAttr;\n  } else {\n    list[list.length++] = newAttr;\n  }\n  if (el) {\n    newAttr.ownerElement = el;\n    var doc = el.ownerDocument;\n    if (doc) {\n      oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n      _onAddAttribute(doc, el, newAttr);\n    }\n  }\n}\nfunction _removeNamedNode(el, list, attr) {\n  //console.log('remove attr:'+attr)\n  var i = _findNodeIndex(list, attr);\n  if (i >= 0) {\n    var lastIndex = list.length - 1;\n    while (i < lastIndex) {\n      list[i] = list[++i];\n    }\n    list.length = lastIndex;\n    if (el) {\n      var doc = el.ownerDocument;\n      if (doc) {\n        _onRemoveAttribute(doc, el, attr);\n        attr.ownerElement = null;\n      }\n    }\n  } else {\n    throw DOMException(NOT_FOUND_ERR, new Error(el.tagName + '@' + attr));\n  }\n}\nNamedNodeMap.prototype = {\n  length: 0,\n  item: NodeList.prototype.item,\n  getNamedItem: function getNamedItem(key) {\n    //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n    //\t\t\treturn null;\n    //\t\t}\n    //console.log()\n    var i = this.length;\n    while (i--) {\n      var attr = this[i];\n      //console.log(attr.nodeName,key)\n      if (attr.nodeName == key) {\n        return attr;\n      }\n    }\n  },\n  setNamedItem: function setNamedItem(attr) {\n    var el = attr.ownerElement;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    var oldAttr = this.getNamedItem(attr.nodeName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n  /* returns Node */\n  setNamedItemNS: function setNamedItemNS(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n    var el = attr.ownerElement,oldAttr;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n\n  /* returns Node */\n  removeNamedItem: function removeNamedItem(key) {\n    var attr = this.getNamedItem(key);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n\n\n  }, // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\n  //for level2\n  removeNamedItemNS: function removeNamedItemNS(namespaceURI, localName) {\n    var attr = this.getNamedItemNS(namespaceURI, localName);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n  },\n  getNamedItemNS: function getNamedItemNS(namespaceURI, localName) {\n    var i = this.length;\n    while (i--) {\n      var node = this[i];\n      if (node.localName == localName && node.namespaceURI == namespaceURI) {\n        return node;\n      }\n    }\n    return null;\n  } };\n\n/**\n        * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n        */\nfunction DOMImplementation( /* Object */features) {\n  this._features = {};\n  if (features) {\n    for (var feature in features) {\n      this._features = features[feature];\n    }\n  }\n};\n\nDOMImplementation.prototype = {\n  hasFeature: function hasFeature( /* string */feature, /* string */version) {\n    var versions = this._features[feature.toLowerCase()];\n    if (versions && (!version || version in versions)) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  // Introduced in DOM Level 2:\n  createDocument: function createDocument(namespaceURI, qualifiedName, doctype) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n    var doc = new Document();\n    doc.implementation = this;\n    doc.childNodes = new NodeList();\n    doc.doctype = doctype;\n    if (doctype) {\n      doc.appendChild(doctype);\n    }\n    if (qualifiedName) {\n      var root = doc.createElementNS(namespaceURI, qualifiedName);\n      doc.appendChild(root);\n    }\n    return doc;\n  },\n  // Introduced in DOM Level 2:\n  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n    var node = new DocumentType();\n    node.name = qualifiedName;\n    node.nodeName = qualifiedName;\n    node.publicId = publicId;\n    node.systemId = systemId;\n    // Introduced in DOM Level 2:\n    //readonly attribute DOMString        internalSubset;\n\n    //TODO:..\n    //  readonly attribute NamedNodeMap     entities;\n    //  readonly attribute NamedNodeMap     notations;\n    return node;\n  } };\n\n\n\n/**\n        * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n        */\n\nfunction Node() {\n};\n\nNode.prototype = {\n  firstChild: null,\n  lastChild: null,\n  previousSibling: null,\n  nextSibling: null,\n  attributes: null,\n  parentNode: null,\n  childNodes: null,\n  ownerDocument: null,\n  nodeValue: null,\n  namespaceURI: null,\n  prefix: null,\n  localName: null,\n  // Modified in DOM Level 2:\n  insertBefore: function insertBefore(newChild, refChild) {//raises \n    return _insertBefore(this, newChild, refChild);\n  },\n  replaceChild: function replaceChild(newChild, oldChild) {//raises \n    this.insertBefore(newChild, oldChild);\n    if (oldChild) {\n      this.removeChild(oldChild);\n    }\n  },\n  removeChild: function removeChild(oldChild) {\n    return _removeChild(this, oldChild);\n  },\n  appendChild: function appendChild(newChild) {\n    return this.insertBefore(newChild, null);\n  },\n  hasChildNodes: function hasChildNodes() {\n    return this.firstChild != null;\n  },\n  cloneNode: function cloneNode(deep) {\n    return _cloneNode(this.ownerDocument || this, this, deep);\n  },\n  // Modified in DOM Level 2:\n  normalize: function normalize() {\n    var child = this.firstChild;\n    while (child) {\n      var next = child.nextSibling;\n      if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n        this.removeChild(next);\n        child.appendData(next.data);\n      } else {\n        child.normalize();\n        child = next;\n      }\n    }\n  },\n  // Introduced in DOM Level 2:\n  isSupported: function isSupported(feature, version) {\n    return this.ownerDocument.implementation.hasFeature(feature, version);\n  },\n  // Introduced in DOM Level 2:\n  hasAttributes: function hasAttributes() {\n    return this.attributes.length > 0;\n  },\n  lookupPrefix: function lookupPrefix(namespaceURI) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        for (var n in map) {\n          if (map[n] == namespaceURI) {\n            return n;\n          }\n        }\n      }\n      el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  lookupNamespaceURI: function lookupNamespaceURI(prefix) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        if (prefix in map) {\n          return map[prefix];\n        }\n      }\n      el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  isDefaultNamespace: function isDefaultNamespace(namespaceURI) {\n    var prefix = this.lookupPrefix(namespaceURI);\n    return prefix == null;\n  } };\n\n\n\nfunction _xmlEncoder(c) {\n  return c == '<' && '&lt;' ||\n  c == '>' && '&gt;' ||\n  c == '&' && '&amp;' ||\n  c == '\"' && '&quot;' ||\n  '&#' + c.charCodeAt() + ';';\n}\n\n\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n\n/**\n                                 * @param callback return true for continue,false for break\n                                 * @return boolean true: break visit;\n                                 */\nfunction _visitNode(node, callback) {\n  if (callback(node)) {\n    return true;\n  }\n  if (node = node.firstChild) {\n    do {\n      if (_visitNode(node, callback)) {return true;}\n    } while (node = node.nextSibling);\n  }\n}\n\n\n\nfunction Document() {\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;\n  }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];\n  }\n}\nfunction _onUpdateChild(doc, el, newChild) {\n  if (doc && doc._inc) {\n    doc._inc++;\n    //update childNodes\n    var cs = el.childNodes;\n    if (newChild) {\n      cs[cs.length++] = newChild;\n    } else {\n      //console.log(1)\n      var child = el.firstChild;\n      var i = 0;\n      while (child) {\n        cs[i++] = child;\n        child = child.nextSibling;\n      }\n      cs.length = i;\n    }\n  }\n}\n\n/**\n   * attributes;\n   * children;\n   * \n   * writeable properties:\n   * nodeValue,Attr:value,CharacterData:data\n   * prefix\n   */\nfunction _removeChild(parentNode, child) {\n  var previous = child.previousSibling;\n  var next = child.nextSibling;\n  if (previous) {\n    previous.nextSibling = next;\n  } else {\n    parentNode.firstChild = next;\n  }\n  if (next) {\n    next.previousSibling = previous;\n  } else {\n    parentNode.lastChild = previous;\n  }\n  _onUpdateChild(parentNode.ownerDocument, parentNode);\n  return child;\n}\n/**\n   * preformance key(refChild == null)\n   */\nfunction _insertBefore(parentNode, newChild, nextChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    cp.removeChild(newChild); //remove and update\n  }\n  if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    var newFirst = newChild.firstChild;\n    if (newFirst == null) {\n      return newChild;\n    }\n    var newLast = newChild.lastChild;\n  } else {\n    newFirst = newLast = newChild;\n  }\n  var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n  newFirst.previousSibling = pre;\n  newLast.nextSibling = nextChild;\n\n\n  if (pre) {\n    pre.nextSibling = newFirst;\n  } else {\n    parentNode.firstChild = newFirst;\n  }\n  if (nextChild == null) {\n    parentNode.lastChild = newLast;\n  } else {\n    nextChild.previousSibling = newLast;\n  }\n  do {\n    newFirst.parentNode = parentNode;\n  } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n  _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);\n  //console.log(parentNode.lastChild.nextSibling == null)\n  if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n    newChild.firstChild = newChild.lastChild = null;\n  }\n  return newChild;\n}\nfunction _appendSingleChild(parentNode, newChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    var pre = parentNode.lastChild;\n    cp.removeChild(newChild); //remove and update\n    var pre = parentNode.lastChild;\n  }\n  var pre = parentNode.lastChild;\n  newChild.parentNode = parentNode;\n  newChild.previousSibling = pre;\n  newChild.nextSibling = null;\n  if (pre) {\n    pre.nextSibling = newChild;\n  } else {\n    parentNode.firstChild = newChild;\n  }\n  parentNode.lastChild = newChild;\n  _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n  return newChild;\n  //console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n  //implementation : null,\n  nodeName: '#document',\n  nodeType: DOCUMENT_NODE,\n  doctype: null,\n  documentElement: null,\n  _inc: 1,\n\n  insertBefore: function insertBefore(newChild, refChild) {//raises \n    if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n      var child = newChild.firstChild;\n      while (child) {\n        var next = child.nextSibling;\n        this.insertBefore(child, refChild);\n        child = next;\n      }\n      return newChild;\n    }\n    if (this.documentElement == null && newChild.nodeType == ELEMENT_NODE) {\n      this.documentElement = newChild;\n    }\n\n    return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;\n  },\n  removeChild: function removeChild(oldChild) {\n    if (this.documentElement == oldChild) {\n      this.documentElement = null;\n    }\n    return _removeChild(this, oldChild);\n  },\n  // Introduced in DOM Level 2:\n  importNode: function importNode(importedNode, deep) {\n    return _importNode(this, importedNode, deep);\n  },\n  // Introduced in DOM Level 2:\n  getElementById: function getElementById(id) {\n    var rtv = null;\n    _visitNode(this.documentElement, function (node) {\n      if (node.nodeType == ELEMENT_NODE) {\n        if (node.getAttribute('id') == id) {\n          rtv = node;\n          return true;\n        }\n      }\n    });\n    return rtv;\n  },\n\n  //document factory method:\n  createElement: function createElement(tagName) {\n    var node = new Element();\n    node.ownerDocument = this;\n    node.nodeName = tagName;\n    node.tagName = tagName;\n    node.childNodes = new NodeList();\n    var attrs = node.attributes = new NamedNodeMap();\n    attrs._ownerElement = node;\n    return node;\n  },\n  createDocumentFragment: function createDocumentFragment() {\n    var node = new DocumentFragment();\n    node.ownerDocument = this;\n    node.childNodes = new NodeList();\n    return node;\n  },\n  createTextNode: function createTextNode(data) {\n    var node = new Text();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createComment: function createComment(data) {\n    var node = new Comment();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createCDATASection: function createCDATASection(data) {\n    var node = new CDATASection();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createProcessingInstruction: function createProcessingInstruction(target, data) {\n    var node = new ProcessingInstruction();\n    node.ownerDocument = this;\n    node.tagName = node.target = target;\n    node.nodeValue = node.data = data;\n    return node;\n  },\n  createAttribute: function createAttribute(name) {\n    var node = new Attr();\n    node.ownerDocument = this;\n    node.name = name;\n    node.nodeName = name;\n    node.localName = name;\n    node.specified = true;\n    return node;\n  },\n  createEntityReference: function createEntityReference(name) {\n    var node = new EntityReference();\n    node.ownerDocument = this;\n    node.nodeName = name;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createElementNS: function createElementNS(namespaceURI, qualifiedName) {\n    var node = new Element();\n    var pl = qualifiedName.split(':');\n    var attrs = node.attributes = new NamedNodeMap();\n    node.childNodes = new NodeList();\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.tagName = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    attrs._ownerElement = node;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createAttributeNS: function createAttributeNS(namespaceURI, qualifiedName) {\n    var node = new Attr();\n    var pl = qualifiedName.split(':');\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.name = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    node.specified = true;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    return node;\n  } };\n\n_extends(Document, Node);\n\n\nfunction Element() {\n  this._nsMap = {};\n};\nElement.prototype = {\n  nodeType: ELEMENT_NODE,\n  hasAttribute: function hasAttribute(name) {\n    return this.getAttributeNode(name) != null;\n  },\n  getAttribute: function getAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    return attr && attr.value || '';\n  },\n  getAttributeNode: function getAttributeNode(name) {\n    return this.attributes.getNamedItem(name);\n  },\n  setAttribute: function setAttribute(name, value) {\n    var attr = this.ownerDocument.createAttribute(name);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  removeAttribute: function removeAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    attr && this.removeAttributeNode(attr);\n  },\n\n  //four real opeartion method\n  appendChild: function appendChild(newChild) {\n    if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return this.insertBefore(newChild, null);\n    } else {\n      return _appendSingleChild(this, newChild);\n    }\n  },\n  setAttributeNode: function setAttributeNode(newAttr) {\n    return this.attributes.setNamedItem(newAttr);\n  },\n  setAttributeNodeNS: function setAttributeNodeNS(newAttr) {\n    return this.attributes.setNamedItemNS(newAttr);\n  },\n  removeAttributeNode: function removeAttributeNode(oldAttr) {\n    //console.log(this == oldAttr.ownerElement)\n    return this.attributes.removeNamedItem(oldAttr.nodeName);\n  },\n  //get real attribute name,and remove it by removeAttributeNode\n  removeAttributeNS: function removeAttributeNS(namespaceURI, localName) {\n    var old = this.getAttributeNodeNS(namespaceURI, localName);\n    old && this.removeAttributeNode(old);\n  },\n\n  hasAttributeNS: function hasAttributeNS(namespaceURI, localName) {\n    return this.getAttributeNodeNS(namespaceURI, localName) != null;\n  },\n  getAttributeNS: function getAttributeNS(namespaceURI, localName) {\n    var attr = this.getAttributeNodeNS(namespaceURI, localName);\n    return attr && attr.value || '';\n  },\n  setAttributeNS: function setAttributeNS(namespaceURI, qualifiedName, value) {\n    var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  getAttributeNodeNS: function getAttributeNodeNS(namespaceURI, localName) {\n    return this.attributes.getNamedItemNS(namespaceURI, localName);\n  },\n\n  getElementsByTagName: function getElementsByTagName(tagName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n    });\n  },\n  getElementsByTagNameNS: function getElementsByTagNameNS(namespaceURI, localName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n\n    });\n  } };\n\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element, Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n  data: '',\n  substringData: function substringData(offset, count) {\n    return this.data.substring(offset, offset + count);\n  },\n  appendData: function appendData(text) {\n    text = this.data + text;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  },\n  insertData: function insertData(offset, text) {\n    this.replaceData(offset, 0, text);\n\n  },\n  appendChild: function appendChild(newChild) {\n    throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);\n  },\n  deleteData: function deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  },\n  replaceData: function replaceData(offset, count, text) {\n    var start = this.data.substring(0, offset);\n    var end = this.data.substring(offset + count);\n    text = start + text + end;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  } };\n\n_extends(CharacterData, Node);\nfunction Text() {\n};\nText.prototype = {\n  nodeName: \"#text\",\n  nodeType: TEXT_NODE,\n  splitText: function splitText(offset) {\n    var text = this.data;\n    var newText = text.substring(offset);\n    text = text.substring(0, offset);\n    this.data = this.nodeValue = text;\n    this.length = text.length;\n    var newNode = this.ownerDocument.createTextNode(newText);\n    if (this.parentNode) {\n      this.parentNode.insertBefore(newNode, this.nextSibling);\n    }\n    return newNode;\n  } };\n\n_extends(Text, CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n  nodeName: \"#comment\",\n  nodeType: COMMENT_NODE };\n\n_extends(Comment, CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n  nodeName: \"#cdata-section\",\n  nodeType: CDATA_SECTION_NODE };\n\n_extends(CDATASection, CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {}\nXMLSerializer.prototype.serializeToString = function (node, isHtml, nodeFilter) {\n  return nodeSerializeToString.call(node, isHtml, nodeFilter);\n};\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml, nodeFilter) {\n  var buf = [];\n  var refNode = this.nodeType == 9 ? this.documentElement : this;\n  var prefix = refNode.prefix;\n  var uri = refNode.namespaceURI;\n\n  if (uri && prefix == null) {\n    //console.log(prefix)\n    var prefix = refNode.lookupPrefix(uri);\n    if (prefix == null) {\n      //isHTML = true;\n      var visibleNamespaces = [\n      { namespace: uri, prefix: null }\n      //{namespace:uri,prefix:''}\n      ];\n    }\n  }\n  serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);\n  //console.log('###',this.nodeType,uri,prefix,buf.join(''))\n  return buf.join('');\n}\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n  var prefix = node.prefix || '';\n  var uri = node.namespaceURI;\n  if (!prefix && !uri) {\n    return false;\n  }\n  if (prefix === \"xml\" && uri === \"http://www.w3.org/XML/1998/namespace\" ||\n  uri == 'http://www.w3.org/2000/xmlns/') {\n    return false;\n  }\n\n  var i = visibleNamespaces.length;\n  //console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)\n  while (i--) {\n    var ns = visibleNamespaces[i];\n    // get namespace prefix\n    //console.log(node.nodeType,node.tagName,ns.prefix,prefix)\n    if (ns.prefix == prefix) {\n      return ns.namespace != uri;\n    }\n  }\n  //console.log(isHTML,uri,prefix=='')\n  //if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){\n  //\treturn false;\n  //}\n  //node.flag = '11111'\n  //console.error(3,true,node.flag,node.prefix,node.namespaceURI)\n  return true;\n}\nfunction serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {\n  if (nodeFilter) {\n    node = nodeFilter(node);\n    if (node) {\n      if (typeof node == 'string') {\n        buf.push(node);\n        return;\n      }\n    } else {\n      return;\n    }\n    //buf.sort.apply(attrs, attributeSorter);\n  }\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      if (!visibleNamespaces) visibleNamespaces = [];\n      var startVisibleNamespaces = visibleNamespaces.length;\n      var attrs = node.attributes;\n      var len = attrs.length;\n      var child = node.firstChild;\n      var nodeName = node.tagName;\n\n      isHTML = htmlns === node.namespaceURI || isHTML;\n      buf.push('<', nodeName);\n\n\n\n      for (var i = 0; i < len; i++) {\n        // add namespaces for attributes\n        var attr = attrs.item(i);\n        if (attr.prefix == 'xmlns') {\n          visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });\n        } else if (attr.nodeName == 'xmlns') {\n          visibleNamespaces.push({ prefix: '', namespace: attr.value });\n        }\n      }\n      for (var i = 0; i < len; i++) {\n        var attr = attrs.item(i);\n        if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\n          var prefix = attr.prefix || '';\n          var uri = attr.namespaceURI;\n          var ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n          buf.push(ns, '=\"', uri, '\"');\n          visibleNamespaces.push({ prefix: prefix, namespace: uri });\n        }\n        serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);\n      }\n      // add namespace for current node\t\t\n      if (needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n        var prefix = node.prefix || '';\n        var uri = node.namespaceURI;\n        var ns = prefix ? ' xmlns:' + prefix : \" xmlns\";\n        buf.push(ns, '=\"', uri, '\"');\n        visibleNamespaces.push({ prefix: prefix, namespace: uri });\n      }\n\n      if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {\n        buf.push('>');\n        //if is cdata child node\n        if (isHTML && /^script$/i.test(nodeName)) {\n          while (child) {\n            if (child.data) {\n              buf.push(child.data);\n            } else {\n              serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);\n            }\n            child = child.nextSibling;\n          }\n        } else\n        {\n          while (child) {\n            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);\n            child = child.nextSibling;\n          }\n        }\n        buf.push('</', nodeName, '>');\n      } else {\n        buf.push('/>');\n      }\n      // remove added visible namespaces\n      //visibleNamespaces.length = startVisibleNamespaces;\n      return;\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      var child = node.firstChild;\n      while (child) {\n        serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);\n        child = child.nextSibling;\n      }\n      return;\n    case ATTRIBUTE_NODE:\n      return buf.push(' ', node.name, '=\"', node.value.replace(/[<&\"]/g, _xmlEncoder), '\"');\n    case TEXT_NODE:\n      return buf.push(node.data.replace(/[<&]/g, _xmlEncoder));\n    case CDATA_SECTION_NODE:\n      return buf.push('<![CDATA[', node.data, ']]>');\n    case COMMENT_NODE:\n      return buf.push(\"<!--\", node.data, \"-->\");\n    case DOCUMENT_TYPE_NODE:\n      var pubid = node.publicId;\n      var sysid = node.systemId;\n      buf.push('<!DOCTYPE ', node.name);\n      if (pubid) {\n        buf.push(' PUBLIC \"', pubid);\n        if (sysid && sysid != '.') {\n          buf.push('\" \"', sysid);\n        }\n        buf.push('\">');\n      } else if (sysid && sysid != '.') {\n        buf.push(' SYSTEM \"', sysid, '\">');\n      } else {\n        var sub = node.internalSubset;\n        if (sub) {\n          buf.push(\" [\", sub, \"]\");\n        }\n        buf.push(\">\");\n      }\n      return;\n    case PROCESSING_INSTRUCTION_NODE:\n      return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n    case ENTITY_REFERENCE_NODE:\n      return buf.push('&', node.nodeName, ';');\n    //case ENTITY_NODE:\n    //case NOTATION_NODE:\n    default:\n      buf.push('??', node.nodeName);}\n\n}\nfunction _importNode(doc, node, deep) {\n  var node2;\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      node2 = node.cloneNode(false);\n      node2.ownerDocument = doc;\n    //var attrs = node2.attributes;\n    //var len = attrs.length;\n    //for(var i=0;i<len;i++){\n    //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n    //}\n    case DOCUMENT_FRAGMENT_NODE:\n      break;\n    case ATTRIBUTE_NODE:\n      deep = true;\n      break;\n    //case ENTITY_REFERENCE_NODE:\n    //case PROCESSING_INSTRUCTION_NODE:\n    ////case TEXT_NODE:\n    //case CDATA_SECTION_NODE:\n    //case COMMENT_NODE:\n    //\tdeep = false;\n    //\tbreak;\n    //case DOCUMENT_NODE:\n    //case DOCUMENT_TYPE_NODE:\n    //cannot be imported.\n    //case ENTITY_NODE:\n    //case NOTATION_NODE：\n    //can not hit in level3\n    //default:throw e;\n  }\n  if (!node2) {\n    node2 = node.cloneNode(false); //false\n  }\n  node2.ownerDocument = doc;\n  node2.parentNode = null;\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_importNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction _cloneNode(doc, node, deep) {\n  var node2 = new node.constructor();\n  for (var n in node) {\n    var v = node[n];\n    if (typeof v != 'object') {\n      if (v != node2[n]) {\n        node2[n] = v;\n      }\n    }\n  }\n  if (node.childNodes) {\n    node2.childNodes = new NodeList();\n  }\n  node2.ownerDocument = doc;\n  switch (node2.nodeType) {\n    case ELEMENT_NODE:\n      var attrs = node.attributes;\n      var attrs2 = node2.attributes = new NamedNodeMap();\n      var len = attrs.length;\n      attrs2._ownerElement = node2;\n      for (var i = 0; i < len; i++) {\n        node2.setAttributeNode(_cloneNode(doc, attrs.item(i), true));\n      }\n      break;;\n    case ATTRIBUTE_NODE:\n      deep = true;}\n\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_cloneNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n\nfunction __set__(object, key, value) {\n  object[key] = value;\n}\n//do dynamic\ntry {\n  if (Object.defineProperty) {var\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    getTextContent = function getTextContent(node) {\n      switch (node.nodeType) {\n        case ELEMENT_NODE:\n        case DOCUMENT_FRAGMENT_NODE:\n          var buf = [];\n          node = node.firstChild;\n          while (node) {\n            if (node.nodeType !== 7 && node.nodeType !== 8) {\n              buf.push(getTextContent(node));\n            }\n            node = node.nextSibling;\n          }\n          return buf.join('');\n        default:\n          return node.nodeValue;}\n\n    };Object.defineProperty(LiveNodeList.prototype, 'length', { get: function get() {_updateLiveList(this);return this.$$length;} });Object.defineProperty(Node.prototype, 'textContent', { get: function get() {return getTextContent(this);}, set: function set(data) {switch (this.nodeType) {case ELEMENT_NODE:case DOCUMENT_FRAGMENT_NODE:while (this.firstChild) {this.removeChild(this.firstChild);}if (data || String(data)) {this.appendChild(this.ownerDocument.createTextNode(data));}break;default: //TODO:\n            this.data = data;this.value = data;this.nodeValue = data;}} });__set__ = function __set__(object, key, value) {\n      //console.log(value)\n      object['$$' + key] = value;\n    };\n  }\n} catch (e) {\n} //ie8\n\n//if(typeof require == 'function'){\nexports.DOMImplementation = DOMImplementation;\nexports.XMLSerializer = XMLSerializer;\n//}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8veG1sZG9tL2RvbS5qcyJdLCJuYW1lcyI6WyJjb3B5Iiwic3JjIiwiZGVzdCIsInAiLCJfZXh0ZW5kcyIsIkNsYXNzIiwiU3VwZXIiLCJwdCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsInBwdCIsIl9fcHJvdG9fXyIsInQiLCJjb25zdHJ1Y3RvciIsImh0bWxucyIsIk5vZGVUeXBlIiwiRUxFTUVOVF9OT0RFIiwiQVRUUklCVVRFX05PREUiLCJURVhUX05PREUiLCJDREFUQV9TRUNUSU9OX05PREUiLCJFTlRJVFlfUkVGRVJFTkNFX05PREUiLCJFTlRJVFlfTk9ERSIsIlBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSIsIkNPTU1FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJET0NVTUVOVF9UWVBFX05PREUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwiTk9UQVRJT05fTk9ERSIsIkV4Y2VwdGlvbkNvZGUiLCJFeGNlcHRpb25NZXNzYWdlIiwiSU5ERVhfU0laRV9FUlIiLCJET01TVFJJTkdfU0laRV9FUlIiLCJISUVSQVJDSFlfUkVRVUVTVF9FUlIiLCJXUk9OR19ET0NVTUVOVF9FUlIiLCJJTlZBTElEX0NIQVJBQ1RFUl9FUlIiLCJOT19EQVRBX0FMTE9XRURfRVJSIiwiTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSIiwiTk9UX0ZPVU5EX0VSUiIsIk5PVF9TVVBQT1JURURfRVJSIiwiSU5VU0VfQVRUUklCVVRFX0VSUiIsIklOVkFMSURfU1RBVEVfRVJSIiwiU1lOVEFYX0VSUiIsIklOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiIsIk5BTUVTUEFDRV9FUlIiLCJJTlZBTElEX0FDQ0VTU19FUlIiLCJET01FeGNlcHRpb24iLCJjb2RlIiwibWVzc2FnZSIsIkVycm9yIiwiZXJyb3IiLCJjYWxsIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJOb2RlTGlzdCIsImxlbmd0aCIsIml0ZW0iLCJpbmRleCIsInRvU3RyaW5nIiwiaXNIVE1MIiwibm9kZUZpbHRlciIsImJ1ZiIsImkiLCJzZXJpYWxpemVUb1N0cmluZyIsImpvaW4iLCJMaXZlTm9kZUxpc3QiLCJub2RlIiwicmVmcmVzaCIsIl9ub2RlIiwiX3JlZnJlc2giLCJfdXBkYXRlTGl2ZUxpc3QiLCJsaXN0IiwiaW5jIiwiX2luYyIsIm93bmVyRG9jdW1lbnQiLCJscyIsIl9fc2V0X18iLCJOYW1lZE5vZGVNYXAiLCJfZmluZE5vZGVJbmRleCIsIl9hZGROYW1lZE5vZGUiLCJlbCIsIm5ld0F0dHIiLCJvbGRBdHRyIiwib3duZXJFbGVtZW50IiwiZG9jIiwiX29uUmVtb3ZlQXR0cmlidXRlIiwiX29uQWRkQXR0cmlidXRlIiwiX3JlbW92ZU5hbWVkTm9kZSIsImF0dHIiLCJsYXN0SW5kZXgiLCJ0YWdOYW1lIiwiZ2V0TmFtZWRJdGVtIiwia2V5Iiwibm9kZU5hbWUiLCJzZXROYW1lZEl0ZW0iLCJfb3duZXJFbGVtZW50Iiwic2V0TmFtZWRJdGVtTlMiLCJnZXROYW1lZEl0ZW1OUyIsIm5hbWVzcGFjZVVSSSIsImxvY2FsTmFtZSIsInJlbW92ZU5hbWVkSXRlbSIsInJlbW92ZU5hbWVkSXRlbU5TIiwiRE9NSW1wbGVtZW50YXRpb24iLCJmZWF0dXJlcyIsIl9mZWF0dXJlcyIsImZlYXR1cmUiLCJoYXNGZWF0dXJlIiwidmVyc2lvbiIsInZlcnNpb25zIiwidG9Mb3dlckNhc2UiLCJjcmVhdGVEb2N1bWVudCIsInF1YWxpZmllZE5hbWUiLCJkb2N0eXBlIiwiRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNoaWxkTm9kZXMiLCJhcHBlbmRDaGlsZCIsInJvb3QiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVEb2N1bWVudFR5cGUiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiRG9jdW1lbnRUeXBlIiwibmFtZSIsIk5vZGUiLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJhdHRyaWJ1dGVzIiwicGFyZW50Tm9kZSIsIm5vZGVWYWx1ZSIsInByZWZpeCIsImluc2VydEJlZm9yZSIsIm5ld0NoaWxkIiwicmVmQ2hpbGQiLCJfaW5zZXJ0QmVmb3JlIiwicmVwbGFjZUNoaWxkIiwib2xkQ2hpbGQiLCJyZW1vdmVDaGlsZCIsIl9yZW1vdmVDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJjbG9uZU5vZGUiLCJkZWVwIiwibm9ybWFsaXplIiwiY2hpbGQiLCJuZXh0Iiwibm9kZVR5cGUiLCJhcHBlbmREYXRhIiwiZGF0YSIsImlzU3VwcG9ydGVkIiwiaGFzQXR0cmlidXRlcyIsImxvb2t1cFByZWZpeCIsIm1hcCIsIl9uc01hcCIsIm4iLCJsb29rdXBOYW1lc3BhY2VVUkkiLCJpc0RlZmF1bHROYW1lc3BhY2UiLCJfeG1sRW5jb2RlciIsImMiLCJjaGFyQ29kZUF0IiwiX3Zpc2l0Tm9kZSIsImNhbGxiYWNrIiwibnMiLCJ2YWx1ZSIsInJlbW92ZSIsIl9vblVwZGF0ZUNoaWxkIiwiY3MiLCJwcmV2aW91cyIsIm5leHRDaGlsZCIsImNwIiwibmV3Rmlyc3QiLCJuZXdMYXN0IiwicHJlIiwiX2FwcGVuZFNpbmdsZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiaW1wb3J0Tm9kZSIsImltcG9ydGVkTm9kZSIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJydHYiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50IiwiRWxlbWVudCIsImF0dHJzIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsIlRleHQiLCJjcmVhdGVDb21tZW50IiwiQ29tbWVudCIsImNyZWF0ZUNEQVRBU2VjdGlvbiIsIkNEQVRBU2VjdGlvbiIsImNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsInRhcmdldCIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsImNyZWF0ZUF0dHJpYnV0ZSIsIkF0dHIiLCJzcGVjaWZpZWQiLCJjcmVhdGVFbnRpdHlSZWZlcmVuY2UiLCJFbnRpdHlSZWZlcmVuY2UiLCJwbCIsInNwbGl0IiwiY3JlYXRlQXR0cmlidXRlTlMiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGVOb2RlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZU5vZGUiLCJzZXRBdHRyaWJ1dGVOb2RlTlMiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsIm9sZCIsImdldEF0dHJpYnV0ZU5vZGVOUyIsImhhc0F0dHJpYnV0ZU5TIiwiZ2V0QXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYmFzZSIsInB1c2giLCJnZXRFbGVtZW50c0J5VGFnTmFtZU5TIiwiQ2hhcmFjdGVyRGF0YSIsInN1YnN0cmluZ0RhdGEiLCJvZmZzZXQiLCJjb3VudCIsInN1YnN0cmluZyIsInRleHQiLCJpbnNlcnREYXRhIiwicmVwbGFjZURhdGEiLCJkZWxldGVEYXRhIiwic3RhcnQiLCJlbmQiLCJzcGxpdFRleHQiLCJuZXdUZXh0IiwibmV3Tm9kZSIsIk5vdGF0aW9uIiwiRW50aXR5IiwiWE1MU2VyaWFsaXplciIsImlzSHRtbCIsIm5vZGVTZXJpYWxpemVUb1N0cmluZyIsInJlZk5vZGUiLCJ1cmkiLCJ2aXNpYmxlTmFtZXNwYWNlcyIsIm5hbWVzcGFjZSIsIm5lZWROYW1lc3BhY2VEZWZpbmUiLCJzdGFydFZpc2libGVOYW1lc3BhY2VzIiwibGVuIiwidGVzdCIsInJlcGxhY2UiLCJwdWJpZCIsInN5c2lkIiwic3ViIiwiaW50ZXJuYWxTdWJzZXQiLCJub2RlMiIsInYiLCJhdHRyczIiLCJvYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldFRleHRDb250ZW50IiwiZ2V0IiwiJCRsZW5ndGgiLCJzZXQiLCJTdHJpbmciLCJlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQSxTQUFTQSxJQUFULENBQWNDLEdBQWQsRUFBa0JDLElBQWxCLEVBQXVCO0FBQ3RCLE9BQUksSUFBSUMsQ0FB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QUFTb0wsTUFBVCxFQUFnQnBLLEdBQWhCLEVBQW9Cd0UsS0FBcEIsRUFBMEI7QUFDbkM7QUFDQTRGLFlBQU0sQ0FBQyxPQUFLcEssR0FBTixDQUFOLEdBQW1Cd0UsS0FBbkI7QUFDQSxLQUhEO0FBSUE7QUFDRCxDQXRERCxDQXNEQyxPQUFNbUcsQ0FBTixFQUFRO0FBQ1IsQ0FEQSxDQUFTOztBQUdWO0FBQ0NDLE9BQU8sQ0FBQ2xLLGlCQUFSLEdBQTRCQSxpQkFBNUI7QUFDQWtLLE9BQU8sQ0FBQzNCLGFBQVIsR0FBd0JBLGFBQXhCO0FBQ0QsRyIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBET00gTGV2ZWwgMlxuICogT2JqZWN0IERPTUV4Y2VwdGlvblxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtRE9NLUxldmVsLTEvZWNtYS1zY3JpcHQtbGFuZ3VhZ2UtYmluZGluZy5odG1sXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDAvUkVDLURPTS1MZXZlbC0yLUNvcmUtMjAwMDExMTMvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG4gKi9cblxuZnVuY3Rpb24gY29weShzcmMsZGVzdCl7XG5cdGZvcih2YXIgcCBpbiBzcmMpe1xuXHRcdGRlc3RbcF0gPSBzcmNbcF07XG5cdH1cbn1cbi8qKlxuXlxcdytcXC5wcm90b3R5cGVcXC4oW19cXHddKylcXHMqPVxccyooKD86LipcXHtcXHMqP1tcXHJcXG5dW1xcc1xcU10qP159KXxcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG5eXFx3K1xcLnByb3RvdHlwZVxcLihbX1xcd10rKVxccyo9XFxzKihcXFMuKj8oPz1bO1xcclxcbl0pKTs/XG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKENsYXNzLFN1cGVyKXtcblx0dmFyIHB0ID0gQ2xhc3MucHJvdG90eXBlO1xuXHRpZihPYmplY3QuY3JlYXRlKXtcblx0XHR2YXIgcHB0ID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpXG5cdFx0cHQuX19wcm90b19fID0gcHB0O1xuXHR9XG5cdGlmKCEocHQgaW5zdGFuY2VvZiBTdXBlcikpe1xuXHRcdGZ1bmN0aW9uIHQoKXt9O1xuXHRcdHQucHJvdG90eXBlID0gU3VwZXIucHJvdG90eXBlO1xuXHRcdHQgPSBuZXcgdCgpO1xuXHRcdGNvcHkocHQsdCk7XG5cdFx0Q2xhc3MucHJvdG90eXBlID0gcHQgPSB0O1xuXHR9XG5cdGlmKHB0LmNvbnN0cnVjdG9yICE9IENsYXNzKXtcblx0XHRpZih0eXBlb2YgQ2xhc3MgIT0gJ2Z1bmN0aW9uJyl7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwidW5rbm93IENsYXNzOlwiK0NsYXNzKVxuXHRcdH1cblx0XHRwdC5jb25zdHJ1Y3RvciA9IENsYXNzXG5cdH1cbn1cbnZhciBodG1sbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcgO1xuLy8gTm9kZSBUeXBlc1xudmFyIE5vZGVUeXBlID0ge31cbnZhciBFTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5FTEVNRU5UX05PREUgICAgICAgICAgICAgICAgPSAxO1xudmFyIEFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IE5vZGVUeXBlLkFUVFJJQlVURV9OT0RFICAgICAgICAgICAgICA9IDI7XG52YXIgVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuVEVYVF9OT0RFICAgICAgICAgICAgICAgICAgID0gMztcbnZhciBDREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5DREFUQV9TRUNUSU9OX05PREUgICAgICAgICAgPSA0O1xudmFyIEVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IE5vZGVUeXBlLkVOVElUWV9SRUZFUkVOQ0VfTk9ERSAgICAgICA9IDU7XG52YXIgRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRU5USVRZX05PREUgICAgICAgICAgICAgICAgID0gNjtcbnZhciBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSBOb2RlVHlwZS5QUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgPSA3O1xudmFyIENPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IE5vZGVUeXBlLkNPTU1FTlRfTk9ERSAgICAgICAgICAgICAgICA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gTm9kZVR5cGUuRE9DVU1FTlRfTk9ERSAgICAgICAgICAgICAgID0gOTtcbnZhciBET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9UWVBFX05PREUgICAgICAgICAgPSAxMDtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSBOb2RlVHlwZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICAgICAgPSAxMTtcbnZhciBOT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSBOb2RlVHlwZS5OT1RBVElPTl9OT0RFICAgICAgICAgICAgICAgPSAxMjtcblxuLy8gRXhjZXB0aW9uQ29kZVxudmFyIEV4Y2VwdGlvbkNvZGUgPSB7fVxudmFyIEV4Y2VwdGlvbk1lc3NhZ2UgPSB7fTtcbnZhciBJTkRFWF9TSVpFX0VSUiAgICAgICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOREVYX1NJWkVfRVJSICAgICAgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxXT1cIkluZGV4IHNpemUgZXJyb3JcIiksMSk7XG52YXIgRE9NU1RSSU5HX1NJWkVfRVJSICAgICAgICAgID0gRXhjZXB0aW9uQ29kZS5ET01TVFJJTkdfU0laRV9FUlIgICAgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMl09XCJET01TdHJpbmcgc2l6ZSBlcnJvclwiKSwyKTtcbnZhciBISUVSQVJDSFlfUkVRVUVTVF9FUlIgICAgICAgPSBFeGNlcHRpb25Db2RlLkhJRVJBUkNIWV9SRVFVRVNUX0VSUiAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVszXT1cIkhpZXJhcmNoeSByZXF1ZXN0IGVycm9yXCIpLDMpO1xudmFyIFdST05HX0RPQ1VNRU5UX0VSUiAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuV1JPTkdfRE9DVU1FTlRfRVJSICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzRdPVwiV3JvbmcgZG9jdW1lbnRcIiksNCk7XG52YXIgSU5WQUxJRF9DSEFSQUNURVJfRVJSICAgICAgID0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0NIQVJBQ1RFUl9FUlIgICAgICAgPSAoKEV4Y2VwdGlvbk1lc3NhZ2VbNV09XCJJbnZhbGlkIGNoYXJhY3RlclwiKSw1KTtcbnZhciBOT19EQVRBX0FMTE9XRURfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLk5PX0RBVEFfQUxMT1dFRF9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVs2XT1cIk5vIGRhdGEgYWxsb3dlZFwiKSw2KTtcbnZhciBOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlIgPSBFeGNlcHRpb25Db2RlLk5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUiA9ICgoRXhjZXB0aW9uTWVzc2FnZVs3XT1cIk5vIG1vZGlmaWNhdGlvbiBhbGxvd2VkXCIpLDcpO1xudmFyIE5PVF9GT1VORF9FUlIgICAgICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX0ZPVU5EX0VSUiAgICAgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzhdPVwiTm90IGZvdW5kXCIpLDgpO1xudmFyIE5PVF9TVVBQT1JURURfRVJSICAgICAgICAgICA9IEV4Y2VwdGlvbkNvZGUuTk9UX1NVUFBPUlRFRF9FUlIgICAgICAgICAgID0gKChFeGNlcHRpb25NZXNzYWdlWzldPVwiTm90IHN1cHBvcnRlZFwiKSw5KTtcbnZhciBJTlVTRV9BVFRSSUJVVEVfRVJSICAgICAgICAgPSBFeGNlcHRpb25Db2RlLklOVVNFX0FUVFJJQlVURV9FUlIgICAgICAgICA9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMF09XCJBdHRyaWJ1dGUgaW4gdXNlXCIpLDEwKTtcbi8vbGV2ZWwyXG52YXIgSU5WQUxJRF9TVEFURV9FUlIgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLklOVkFMSURfU1RBVEVfRVJSICAgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzExXT1cIkludmFsaWQgc3RhdGVcIiksMTEpO1xudmFyIFNZTlRBWF9FUlIgICAgICAgICAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5TWU5UQVhfRVJSICAgICAgICAgICAgICAgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxMl09XCJTeW50YXggZXJyb3JcIiksMTIpO1xudmFyIElOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUiBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX01PRElGSUNBVElPTl9FUlIgXHQ9ICgoRXhjZXB0aW9uTWVzc2FnZVsxM109XCJJbnZhbGlkIG1vZGlmaWNhdGlvblwiKSwxMyk7XG52YXIgTkFNRVNQQUNFX0VSUiAgICAgICAgICAgIFx0PSBFeGNlcHRpb25Db2RlLk5BTUVTUEFDRV9FUlIgICAgICAgICAgIFx0PSAoKEV4Y2VwdGlvbk1lc3NhZ2VbMTRdPVwiSW52YWxpZCBuYW1lc3BhY2VcIiksMTQpO1xudmFyIElOVkFMSURfQUNDRVNTX0VSUiAgICAgICBcdD0gRXhjZXB0aW9uQ29kZS5JTlZBTElEX0FDQ0VTU19FUlIgICAgICBcdD0gKChFeGNlcHRpb25NZXNzYWdlWzE1XT1cIkludmFsaWQgYWNjZXNzXCIpLDE1KTtcblxuXG5mdW5jdGlvbiBET01FeGNlcHRpb24oY29kZSwgbWVzc2FnZSkge1xuXHRpZihtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3Ipe1xuXHRcdHZhciBlcnJvciA9IG1lc3NhZ2U7XG5cdH1lbHNle1xuXHRcdGVycm9yID0gdGhpcztcblx0XHRFcnJvci5jYWxsKHRoaXMsIEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV0pO1xuXHRcdHRoaXMubWVzc2FnZSA9IEV4Y2VwdGlvbk1lc3NhZ2VbY29kZV07XG5cdFx0aWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIERPTUV4Y2VwdGlvbik7XG5cdH1cblx0ZXJyb3IuY29kZSA9IGNvZGU7XG5cdGlmKG1lc3NhZ2UpIHRoaXMubWVzc2FnZSA9IHRoaXMubWVzc2FnZSArIFwiOiBcIiArIG1lc3NhZ2U7XG5cdHJldHVybiBlcnJvcjtcbn07XG5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuY29weShFeGNlcHRpb25Db2RlLERPTUV4Y2VwdGlvbilcbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC01MzYyOTcxNzdcbiAqIFRoZSBOb2RlTGlzdCBpbnRlcmZhY2UgcHJvdmlkZXMgdGhlIGFic3RyYWN0aW9uIG9mIGFuIG9yZGVyZWQgY29sbGVjdGlvbiBvZiBub2Rlcywgd2l0aG91dCBkZWZpbmluZyBvciBjb25zdHJhaW5pbmcgaG93IHRoaXMgY29sbGVjdGlvbiBpcyBpbXBsZW1lbnRlZC4gTm9kZUxpc3Qgb2JqZWN0cyBpbiB0aGUgRE9NIGFyZSBsaXZlLlxuICogVGhlIGl0ZW1zIGluIHRoZSBOb2RlTGlzdCBhcmUgYWNjZXNzaWJsZSB2aWEgYW4gaW50ZWdyYWwgaW5kZXgsIHN0YXJ0aW5nIGZyb20gMC5cbiAqL1xuZnVuY3Rpb24gTm9kZUxpc3QoKSB7XG59O1xuTm9kZUxpc3QucHJvdG90eXBlID0ge1xuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdC4gVGhlIHJhbmdlIG9mIHZhbGlkIGNoaWxkIG5vZGUgaW5kaWNlcyBpcyAwIHRvIGxlbmd0aC0xIGluY2x1c2l2ZS5cblx0ICogQHN0YW5kYXJkIGxldmVsMVxuXHQgKi9cblx0bGVuZ3RoOjAsIFxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kZXh0aCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uLiBJZiBpbmRleCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIG51bWJlciBvZiBub2RlcyBpbiB0aGUgbGlzdCwgdGhpcyByZXR1cm5zIG51bGwuXG5cdCAqIEBzdGFuZGFyZCBsZXZlbDFcblx0ICogQHBhcmFtIGluZGV4ICB1bnNpZ25lZCBsb25nIFxuXHQgKiAgIEluZGV4IGludG8gdGhlIGNvbGxlY3Rpb24uXG5cdCAqIEByZXR1cm4gTm9kZVxuXHQgKiBcdFRoZSBub2RlIGF0IHRoZSBpbmRleHRoIHBvc2l0aW9uIGluIHRoZSBOb2RlTGlzdCwgb3IgbnVsbCBpZiB0aGF0IGlzIG5vdCBhIHZhbGlkIGluZGV4LiBcblx0ICovXG5cdGl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXNbaW5kZXhdIHx8IG51bGw7XG5cdH0sXG5cdHRvU3RyaW5nOmZ1bmN0aW9uKGlzSFRNTCxub2RlRmlsdGVyKXtcblx0XHRmb3IodmFyIGJ1ZiA9IFtdLCBpID0gMDtpPHRoaXMubGVuZ3RoO2krKyl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyh0aGlzW2ldLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcik7XG5cdFx0fVxuXHRcdHJldHVybiBidWYuam9pbignJyk7XG5cdH1cbn07XG5mdW5jdGlvbiBMaXZlTm9kZUxpc3Qobm9kZSxyZWZyZXNoKXtcblx0dGhpcy5fbm9kZSA9IG5vZGU7XG5cdHRoaXMuX3JlZnJlc2ggPSByZWZyZXNoXG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcbn1cbmZ1bmN0aW9uIF91cGRhdGVMaXZlTGlzdChsaXN0KXtcblx0dmFyIGluYyA9IGxpc3QuX25vZGUuX2luYyB8fCBsaXN0Ll9ub2RlLm93bmVyRG9jdW1lbnQuX2luYztcblx0aWYobGlzdC5faW5jICE9IGluYyl7XG5cdFx0dmFyIGxzID0gbGlzdC5fcmVmcmVzaChsaXN0Ll9ub2RlKTtcblx0XHQvL2NvbnNvbGUubG9nKGxzLmxlbmd0aClcblx0XHRfX3NldF9fKGxpc3QsJ2xlbmd0aCcsbHMubGVuZ3RoKTtcblx0XHRjb3B5KGxzLGxpc3QpO1xuXHRcdGxpc3QuX2luYyA9IGluYztcblx0fVxufVxuTGl2ZU5vZGVMaXN0LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaSl7XG5cdF91cGRhdGVMaXZlTGlzdCh0aGlzKTtcblx0cmV0dXJuIHRoaXNbaV07XG59XG5cbl9leHRlbmRzKExpdmVOb2RlTGlzdCxOb2RlTGlzdCk7XG4vKipcbiAqIFxuICogT2JqZWN0cyBpbXBsZW1lbnRpbmcgdGhlIE5hbWVkTm9kZU1hcCBpbnRlcmZhY2UgYXJlIHVzZWQgdG8gcmVwcmVzZW50IGNvbGxlY3Rpb25zIG9mIG5vZGVzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG5hbWUuIE5vdGUgdGhhdCBOYW1lZE5vZGVNYXAgZG9lcyBub3QgaW5oZXJpdCBmcm9tIE5vZGVMaXN0OyBOYW1lZE5vZGVNYXBzIGFyZSBub3QgbWFpbnRhaW5lZCBpbiBhbnkgcGFydGljdWxhciBvcmRlci4gT2JqZWN0cyBjb250YWluZWQgaW4gYW4gb2JqZWN0IGltcGxlbWVudGluZyBOYW1lZE5vZGVNYXAgbWF5IGFsc28gYmUgYWNjZXNzZWQgYnkgYW4gb3JkaW5hbCBpbmRleCwgYnV0IHRoaXMgaXMgc2ltcGx5IHRvIGFsbG93IGNvbnZlbmllbnQgZW51bWVyYXRpb24gb2YgdGhlIGNvbnRlbnRzIG9mIGEgTmFtZWROb2RlTWFwLCBhbmQgZG9lcyBub3QgaW1wbHkgdGhhdCB0aGUgRE9NIHNwZWNpZmllcyBhbiBvcmRlciB0byB0aGVzZSBOb2Rlcy5cbiAqIE5hbWVkTm9kZU1hcCBvYmplY3RzIGluIHRoZSBET00gYXJlIGxpdmUuXG4gKiB1c2VkIGZvciBhdHRyaWJ1dGVzIG9yIERvY3VtZW50VHlwZSBlbnRpdGllcyBcbiAqL1xuZnVuY3Rpb24gTmFtZWROb2RlTWFwKCkge1xufTtcblxuZnVuY3Rpb24gX2ZpbmROb2RlSW5kZXgobGlzdCxub2RlKXtcblx0dmFyIGkgPSBsaXN0Lmxlbmd0aDtcblx0d2hpbGUoaS0tKXtcblx0XHRpZihsaXN0W2ldID09PSBub2RlKXtyZXR1cm4gaX1cblx0fVxufVxuXG5mdW5jdGlvbiBfYWRkTmFtZWROb2RlKGVsLGxpc3QsbmV3QXR0cixvbGRBdHRyKXtcblx0aWYob2xkQXR0cil7XG5cdFx0bGlzdFtfZmluZE5vZGVJbmRleChsaXN0LG9sZEF0dHIpXSA9IG5ld0F0dHI7XG5cdH1lbHNle1xuXHRcdGxpc3RbbGlzdC5sZW5ndGgrK10gPSBuZXdBdHRyO1xuXHR9XG5cdGlmKGVsKXtcblx0XHRuZXdBdHRyLm93bmVyRWxlbWVudCA9IGVsO1xuXHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdGlmKGRvYyl7XG5cdFx0XHRvbGRBdHRyICYmIF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsb2xkQXR0cik7XG5cdFx0XHRfb25BZGRBdHRyaWJ1dGUoZG9jLGVsLG5ld0F0dHIpO1xuXHRcdH1cblx0fVxufVxuZnVuY3Rpb24gX3JlbW92ZU5hbWVkTm9kZShlbCxsaXN0LGF0dHIpe1xuXHQvL2NvbnNvbGUubG9nKCdyZW1vdmUgYXR0cjonK2F0dHIpXG5cdHZhciBpID0gX2ZpbmROb2RlSW5kZXgobGlzdCxhdHRyKTtcblx0aWYoaT49MCl7XG5cdFx0dmFyIGxhc3RJbmRleCA9IGxpc3QubGVuZ3RoLTFcblx0XHR3aGlsZShpPGxhc3RJbmRleCl7XG5cdFx0XHRsaXN0W2ldID0gbGlzdFsrK2ldXG5cdFx0fVxuXHRcdGxpc3QubGVuZ3RoID0gbGFzdEluZGV4O1xuXHRcdGlmKGVsKXtcblx0XHRcdHZhciBkb2MgPSBlbC5vd25lckRvY3VtZW50O1xuXHRcdFx0aWYoZG9jKXtcblx0XHRcdFx0X29uUmVtb3ZlQXR0cmlidXRlKGRvYyxlbCxhdHRyKTtcblx0XHRcdFx0YXR0ci5vd25lckVsZW1lbnQgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fWVsc2V7XG5cdFx0dGhyb3cgRE9NRXhjZXB0aW9uKE5PVF9GT1VORF9FUlIsbmV3IEVycm9yKGVsLnRhZ05hbWUrJ0AnK2F0dHIpKVxuXHR9XG59XG5OYW1lZE5vZGVNYXAucHJvdG90eXBlID0ge1xuXHRsZW5ndGg6MCxcblx0aXRlbTpOb2RlTGlzdC5wcm90b3R5cGUuaXRlbSxcblx0Z2V0TmFtZWRJdGVtOiBmdW5jdGlvbihrZXkpIHtcbi8vXHRcdGlmKGtleS5pbmRleE9mKCc6Jyk+MCB8fCBrZXkgPT0gJ3htbG5zJyl7XG4vL1x0XHRcdHJldHVybiBudWxsO1xuLy9cdFx0fVxuXHRcdC8vY29uc29sZS5sb2coKVxuXHRcdHZhciBpID0gdGhpcy5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKXtcblx0XHRcdHZhciBhdHRyID0gdGhpc1tpXTtcblx0XHRcdC8vY29uc29sZS5sb2coYXR0ci5ub2RlTmFtZSxrZXkpXG5cdFx0XHRpZihhdHRyLm5vZGVOYW1lID09IGtleSl7XG5cdFx0XHRcdHJldHVybiBhdHRyO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0c2V0TmFtZWRJdGVtOiBmdW5jdGlvbihhdHRyKSB7XG5cdFx0dmFyIGVsID0gYXR0ci5vd25lckVsZW1lbnQ7XG5cdFx0aWYoZWwgJiYgZWwhPXRoaXMuX293bmVyRWxlbWVudCl7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKElOVVNFX0FUVFJJQlVURV9FUlIpO1xuXHRcdH1cblx0XHR2YXIgb2xkQXR0ciA9IHRoaXMuZ2V0TmFtZWRJdGVtKGF0dHIubm9kZU5hbWUpO1xuXHRcdF9hZGROYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cixvbGRBdHRyKTtcblx0XHRyZXR1cm4gb2xkQXR0cjtcblx0fSxcblx0LyogcmV0dXJucyBOb2RlICovXG5cdHNldE5hbWVkSXRlbU5TOiBmdW5jdGlvbihhdHRyKSB7Ly8gcmFpc2VzOiBXUk9OR19ET0NVTUVOVF9FUlIsTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSLElOVVNFX0FUVFJJQlVURV9FUlJcblx0XHR2YXIgZWwgPSBhdHRyLm93bmVyRWxlbWVudCwgb2xkQXR0cjtcblx0XHRpZihlbCAmJiBlbCE9dGhpcy5fb3duZXJFbGVtZW50KXtcblx0XHRcdHRocm93IG5ldyBET01FeGNlcHRpb24oSU5VU0VfQVRUUklCVVRFX0VSUik7XG5cdFx0fVxuXHRcdG9sZEF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbU5TKGF0dHIubmFtZXNwYWNlVVJJLGF0dHIubG9jYWxOYW1lKTtcblx0XHRfYWRkTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIsb2xkQXR0cik7XG5cdFx0cmV0dXJuIG9sZEF0dHI7XG5cdH0sXG5cblx0LyogcmV0dXJucyBOb2RlICovXG5cdHJlbW92ZU5hbWVkSXRlbTogZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldE5hbWVkSXRlbShrZXkpO1xuXHRcdF9yZW1vdmVOYW1lZE5vZGUodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsYXR0cik7XG5cdFx0cmV0dXJuIGF0dHI7XG5cdFx0XG5cdFx0XG5cdH0sLy8gcmFpc2VzOiBOT1RfRk9VTkRfRVJSLE5PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUlxuXHRcblx0Ly9mb3IgbGV2ZWwyXG5cdHJlbW92ZU5hbWVkSXRlbU5TOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxsb2NhbE5hbWUpe1xuXHRcdHZhciBhdHRyID0gdGhpcy5nZXROYW1lZEl0ZW1OUyhuYW1lc3BhY2VVUkksbG9jYWxOYW1lKTtcblx0XHRfcmVtb3ZlTmFtZWROb2RlKHRoaXMuX293bmVyRWxlbWVudCx0aGlzLGF0dHIpO1xuXHRcdHJldHVybiBhdHRyO1xuXHR9LFxuXHRnZXROYW1lZEl0ZW1OUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpIHtcblx0XHR2YXIgaSA9IHRoaXMubGVuZ3RoO1xuXHRcdHdoaWxlKGktLSl7XG5cdFx0XHR2YXIgbm9kZSA9IHRoaXNbaV07XG5cdFx0XHRpZihub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUgJiYgbm9kZS5uYW1lc3BhY2VVUkkgPT0gbmFtZXNwYWNlVVJJKXtcblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG59O1xuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy1ET00tTGV2ZWwtMS9sZXZlbC1vbmUtY29yZS5odG1sI0lELTEwMjE2MTQ5MFxuICovXG5mdW5jdGlvbiBET01JbXBsZW1lbnRhdGlvbigvKiBPYmplY3QgKi8gZmVhdHVyZXMpIHtcblx0dGhpcy5fZmVhdHVyZXMgPSB7fTtcblx0aWYgKGZlYXR1cmVzKSB7XG5cdFx0Zm9yICh2YXIgZmVhdHVyZSBpbiBmZWF0dXJlcykge1xuXHRcdFx0IHRoaXMuX2ZlYXR1cmVzID0gZmVhdHVyZXNbZmVhdHVyZV07XG5cdFx0fVxuXHR9XG59O1xuXG5ET01JbXBsZW1lbnRhdGlvbi5wcm90b3R5cGUgPSB7XG5cdGhhc0ZlYXR1cmU6IGZ1bmN0aW9uKC8qIHN0cmluZyAqLyBmZWF0dXJlLCAvKiBzdHJpbmcgKi8gdmVyc2lvbikge1xuXHRcdHZhciB2ZXJzaW9ucyA9IHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmUudG9Mb3dlckNhc2UoKV07XG5cdFx0aWYgKHZlcnNpb25zICYmICghdmVyc2lvbiB8fCB2ZXJzaW9uIGluIHZlcnNpb25zKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGNyZWF0ZURvY3VtZW50OmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgIHF1YWxpZmllZE5hbWUsIGRvY3R5cGUpey8vIHJhaXNlczpJTlZBTElEX0NIQVJBQ1RFUl9FUlIsTkFNRVNQQUNFX0VSUixXUk9OR19ET0NVTUVOVF9FUlJcblx0XHR2YXIgZG9jID0gbmV3IERvY3VtZW50KCk7XG5cdFx0ZG9jLmltcGxlbWVudGF0aW9uID0gdGhpcztcblx0XHRkb2MuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdGRvYy5kb2N0eXBlID0gZG9jdHlwZTtcblx0XHRpZihkb2N0eXBlKXtcblx0XHRcdGRvYy5hcHBlbmRDaGlsZChkb2N0eXBlKTtcblx0XHR9XG5cdFx0aWYocXVhbGlmaWVkTmFtZSl7XG5cdFx0XHR2YXIgcm9vdCA9IGRvYy5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpO1xuXHRcdFx0ZG9jLmFwcGVuZENoaWxkKHJvb3QpO1xuXHRcdH1cblx0XHRyZXR1cm4gZG9jO1xuXHR9LFxuXHQvLyBJbnRyb2R1Y2VkIGluIERPTSBMZXZlbCAyOlxuXHRjcmVhdGVEb2N1bWVudFR5cGU6ZnVuY3Rpb24ocXVhbGlmaWVkTmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKXsvLyByYWlzZXM6SU5WQUxJRF9DSEFSQUNURVJfRVJSLE5BTUVTUEFDRV9FUlJcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudFR5cGUoKTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubm9kZU5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUucHVibGljSWQgPSBwdWJsaWNJZDtcblx0XHRub2RlLnN5c3RlbUlkID0gc3lzdGVtSWQ7XG5cdFx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0XHQvL3JlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgICAgICAgIGludGVybmFsU3Vic2V0O1xuXHRcdFxuXHRcdC8vVE9ETzouLlxuXHRcdC8vICByZWFkb25seSBhdHRyaWJ1dGUgTmFtZWROb2RlTWFwICAgICBlbnRpdGllcztcblx0XHQvLyAgcmVhZG9ubHkgYXR0cmlidXRlIE5hbWVkTm9kZU1hcCAgICAgbm90YXRpb25zO1xuXHRcdHJldHVybiBub2RlO1xuXHR9XG59O1xuXG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAwL1JFQy1ET00tTGV2ZWwtMi1Db3JlLTIwMDAxMTEzL2NvcmUuaHRtbCNJRC0xOTUwNjQxMjQ3XG4gKi9cblxuZnVuY3Rpb24gTm9kZSgpIHtcbn07XG5cbk5vZGUucHJvdG90eXBlID0ge1xuXHRmaXJzdENoaWxkIDogbnVsbCxcblx0bGFzdENoaWxkIDogbnVsbCxcblx0cHJldmlvdXNTaWJsaW5nIDogbnVsbCxcblx0bmV4dFNpYmxpbmcgOiBudWxsLFxuXHRhdHRyaWJ1dGVzIDogbnVsbCxcblx0cGFyZW50Tm9kZSA6IG51bGwsXG5cdGNoaWxkTm9kZXMgOiBudWxsLFxuXHRvd25lckRvY3VtZW50IDogbnVsbCxcblx0bm9kZVZhbHVlIDogbnVsbCxcblx0bmFtZXNwYWNlVVJJIDogbnVsbCxcblx0cHJlZml4IDogbnVsbCxcblx0bG9jYWxOYW1lIDogbnVsbCxcblx0Ly8gTW9kaWZpZWQgaW4gRE9NIExldmVsIDI6XG5cdGluc2VydEJlZm9yZTpmdW5jdGlvbihuZXdDaGlsZCwgcmVmQ2hpbGQpey8vcmFpc2VzIFxuXHRcdHJldHVybiBfaW5zZXJ0QmVmb3JlKHRoaXMsbmV3Q2hpbGQscmVmQ2hpbGQpO1xuXHR9LFxuXHRyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQsIG9sZENoaWxkKXsvL3JhaXNlcyBcblx0XHR0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxvbGRDaGlsZCk7XG5cdFx0aWYob2xkQ2hpbGQpe1xuXHRcdFx0dGhpcy5yZW1vdmVDaGlsZChvbGRDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRyZW1vdmVDaGlsZDpmdW5jdGlvbihvbGRDaGlsZCl7XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0fSxcblx0aGFzQ2hpbGROb2RlczpmdW5jdGlvbigpe1xuXHRcdHJldHVybiB0aGlzLmZpcnN0Q2hpbGQgIT0gbnVsbDtcblx0fSxcblx0Y2xvbmVOb2RlOmZ1bmN0aW9uKGRlZXApe1xuXHRcdHJldHVybiBjbG9uZU5vZGUodGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHRoaXMsZGVlcCk7XG5cdH0sXG5cdC8vIE1vZGlmaWVkIGluIERPTSBMZXZlbCAyOlxuXHRub3JtYWxpemU6ZnVuY3Rpb24oKXtcblx0XHR2YXIgY2hpbGQgPSB0aGlzLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0dmFyIG5leHQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHRcdGlmKG5leHQgJiYgbmV4dC5ub2RlVHlwZSA9PSBURVhUX05PREUgJiYgY2hpbGQubm9kZVR5cGUgPT0gVEVYVF9OT0RFKXtcblx0XHRcdFx0dGhpcy5yZW1vdmVDaGlsZChuZXh0KTtcblx0XHRcdFx0Y2hpbGQuYXBwZW5kRGF0YShuZXh0LmRhdGEpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGNoaWxkLm5vcm1hbGl6ZSgpO1xuXHRcdFx0XHRjaGlsZCA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuICBcdC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG5cdGlzU3VwcG9ydGVkOmZ1bmN0aW9uKGZlYXR1cmUsIHZlcnNpb24pe1xuXHRcdHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShmZWF0dXJlLHZlcnNpb24pO1xuXHR9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDI6XG4gICAgaGFzQXR0cmlidXRlczpmdW5jdGlvbigpe1xuICAgIFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5sZW5ndGg+MDtcbiAgICB9LFxuICAgIGxvb2t1cFByZWZpeDpmdW5jdGlvbihuYW1lc3BhY2VVUkkpe1xuICAgIFx0dmFyIGVsID0gdGhpcztcbiAgICBcdHdoaWxlKGVsKXtcbiAgICBcdFx0dmFyIG1hcCA9IGVsLl9uc01hcDtcbiAgICBcdFx0Ly9jb25zb2xlLmRpcihtYXApXG4gICAgXHRcdGlmKG1hcCl7XG4gICAgXHRcdFx0Zm9yKHZhciBuIGluIG1hcCl7XG4gICAgXHRcdFx0XHRpZihtYXBbbl0gPT0gbmFtZXNwYWNlVVJJKXtcbiAgICBcdFx0XHRcdFx0cmV0dXJuIG47XG4gICAgXHRcdFx0XHR9XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgbG9va3VwTmFtZXNwYWNlVVJJOmZ1bmN0aW9uKHByZWZpeCl7XG4gICAgXHR2YXIgZWwgPSB0aGlzO1xuICAgIFx0d2hpbGUoZWwpe1xuICAgIFx0XHR2YXIgbWFwID0gZWwuX25zTWFwO1xuICAgIFx0XHQvL2NvbnNvbGUuZGlyKG1hcClcbiAgICBcdFx0aWYobWFwKXtcbiAgICBcdFx0XHRpZihwcmVmaXggaW4gbWFwKXtcbiAgICBcdFx0XHRcdHJldHVybiBtYXBbcHJlZml4XSA7XG4gICAgXHRcdFx0fVxuICAgIFx0XHR9XG4gICAgXHRcdGVsID0gZWwubm9kZVR5cGUgPT0gQVRUUklCVVRFX05PREU/ZWwub3duZXJEb2N1bWVudCA6IGVsLnBhcmVudE5vZGU7XG4gICAgXHR9XG4gICAgXHRyZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIC8vIEludHJvZHVjZWQgaW4gRE9NIExldmVsIDM6XG4gICAgaXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKG5hbWVzcGFjZVVSSSl7XG4gICAgXHR2YXIgcHJlZml4ID0gdGhpcy5sb29rdXBQcmVmaXgobmFtZXNwYWNlVVJJKTtcbiAgICBcdHJldHVybiBwcmVmaXggPT0gbnVsbDtcbiAgICB9XG59O1xuXG5cbmZ1bmN0aW9uIF94bWxFbmNvZGVyKGMpe1xuXHRyZXR1cm4gYyA9PSAnPCcgJiYgJyZsdDsnIHx8XG4gICAgICAgICBjID09ICc+JyAmJiAnJmd0OycgfHxcbiAgICAgICAgIGMgPT0gJyYnICYmICcmYW1wOycgfHxcbiAgICAgICAgIGMgPT0gJ1wiJyAmJiAnJnF1b3Q7JyB8fFxuICAgICAgICAgJyYjJytjLmNoYXJDb2RlQXQoKSsnOydcbn1cblxuXG5jb3B5KE5vZGVUeXBlLE5vZGUpO1xuY29weShOb2RlVHlwZSxOb2RlLnByb3RvdHlwZSk7XG5cbi8qKlxuICogQHBhcmFtIGNhbGxiYWNrIHJldHVybiB0cnVlIGZvciBjb250aW51ZSxmYWxzZSBmb3IgYnJlYWtcbiAqIEByZXR1cm4gYm9vbGVhbiB0cnVlOiBicmVhayB2aXNpdDtcbiAqL1xuZnVuY3Rpb24gX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKXtcblx0aWYoY2FsbGJhY2sobm9kZSkpe1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmKG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpe1xuXHRcdGRve1xuXHRcdFx0aWYoX3Zpc2l0Tm9kZShub2RlLGNhbGxiYWNrKSl7cmV0dXJuIHRydWV9XG4gICAgICAgIH13aGlsZShub2RlPW5vZGUubmV4dFNpYmxpbmcpXG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gRG9jdW1lbnQoKXtcbn1cbmZ1bmN0aW9uIF9vbkFkZEF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cil7XG5cdGRvYyAmJiBkb2MuX2luYysrO1xuXHR2YXIgbnMgPSBuZXdBdHRyLm5hbWVzcGFjZVVSSSA7XG5cdGlmKG5zID09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zLycpe1xuXHRcdC8vdXBkYXRlIG5hbWVzcGFjZVxuXHRcdGVsLl9uc01hcFtuZXdBdHRyLnByZWZpeD9uZXdBdHRyLmxvY2FsTmFtZTonJ10gPSBuZXdBdHRyLnZhbHVlXG5cdH1cbn1cbmZ1bmN0aW9uIF9vblJlbW92ZUF0dHJpYnV0ZShkb2MsZWwsbmV3QXR0cixyZW1vdmUpe1xuXHRkb2MgJiYgZG9jLl9pbmMrKztcblx0dmFyIG5zID0gbmV3QXR0ci5uYW1lc3BhY2VVUkkgO1xuXHRpZihucyA9PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nKXtcblx0XHQvL3VwZGF0ZSBuYW1lc3BhY2Vcblx0XHRkZWxldGUgZWwuX25zTWFwW25ld0F0dHIucHJlZml4P25ld0F0dHIubG9jYWxOYW1lOicnXVxuXHR9XG59XG5mdW5jdGlvbiBfb25VcGRhdGVDaGlsZChkb2MsZWwsbmV3Q2hpbGQpe1xuXHRpZihkb2MgJiYgZG9jLl9pbmMpe1xuXHRcdGRvYy5faW5jKys7XG5cdFx0Ly91cGRhdGUgY2hpbGROb2Rlc1xuXHRcdHZhciBjcyA9IGVsLmNoaWxkTm9kZXM7XG5cdFx0aWYobmV3Q2hpbGQpe1xuXHRcdFx0Y3NbY3MubGVuZ3RoKytdID0gbmV3Q2hpbGQ7XG5cdFx0fWVsc2V7XG5cdFx0XHQvL2NvbnNvbGUubG9nKDEpXG5cdFx0XHR2YXIgY2hpbGQgPSBlbC5maXJzdENoaWxkO1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHRjc1tpKytdID0gY2hpbGQ7XG5cdFx0XHRcdGNoaWxkID1jaGlsZC5uZXh0U2libGluZztcblx0XHRcdH1cblx0XHRcdGNzLmxlbmd0aCA9IGk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogYXR0cmlidXRlcztcbiAqIGNoaWxkcmVuO1xuICogXG4gKiB3cml0ZWFibGUgcHJvcGVydGllczpcbiAqIG5vZGVWYWx1ZSxBdHRyOnZhbHVlLENoYXJhY3RlckRhdGE6ZGF0YVxuICogcHJlZml4XG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVDaGlsZChwYXJlbnROb2RlLGNoaWxkKXtcblx0dmFyIHByZXZpb3VzID0gY2hpbGQucHJldmlvdXNTaWJsaW5nO1xuXHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRpZihwcmV2aW91cyl7XG5cdFx0cHJldmlvdXMubmV4dFNpYmxpbmcgPSBuZXh0O1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXh0XG5cdH1cblx0aWYobmV4dCl7XG5cdFx0bmV4dC5wcmV2aW91c1NpYmxpbmcgPSBwcmV2aW91cztcblx0fWVsc2V7XG5cdFx0cGFyZW50Tm9kZS5sYXN0Q2hpbGQgPSBwcmV2aW91cztcblx0fVxuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQscGFyZW50Tm9kZSk7XG5cdHJldHVybiBjaGlsZDtcbn1cbi8qKlxuICogcHJlZm9ybWFuY2Uga2V5KHJlZkNoaWxkID09IG51bGwpXG4gKi9cbmZ1bmN0aW9uIF9pbnNlcnRCZWZvcmUocGFyZW50Tm9kZSxuZXdDaGlsZCxuZXh0Q2hpbGQpe1xuXHR2YXIgY3AgPSBuZXdDaGlsZC5wYXJlbnROb2RlO1xuXHRpZihjcCl7XG5cdFx0Y3AucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpOy8vcmVtb3ZlIGFuZCB1cGRhdGVcblx0fVxuXHRpZihuZXdDaGlsZC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0dmFyIG5ld0ZpcnN0ID0gbmV3Q2hpbGQuZmlyc3RDaGlsZDtcblx0XHRpZiAobmV3Rmlyc3QgPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIG5ld0NoaWxkO1xuXHRcdH1cblx0XHR2YXIgbmV3TGFzdCA9IG5ld0NoaWxkLmxhc3RDaGlsZDtcblx0fWVsc2V7XG5cdFx0bmV3Rmlyc3QgPSBuZXdMYXN0ID0gbmV3Q2hpbGQ7XG5cdH1cblx0dmFyIHByZSA9IG5leHRDaGlsZCA/IG5leHRDaGlsZC5wcmV2aW91c1NpYmxpbmcgOiBwYXJlbnROb2RlLmxhc3RDaGlsZDtcblxuXHRuZXdGaXJzdC5wcmV2aW91c1NpYmxpbmcgPSBwcmU7XG5cdG5ld0xhc3QubmV4dFNpYmxpbmcgPSBuZXh0Q2hpbGQ7XG5cdFxuXHRcblx0aWYocHJlKXtcblx0XHRwcmUubmV4dFNpYmxpbmcgPSBuZXdGaXJzdDtcblx0fWVsc2V7XG5cdFx0cGFyZW50Tm9kZS5maXJzdENoaWxkID0gbmV3Rmlyc3Q7XG5cdH1cblx0aWYobmV4dENoaWxkID09IG51bGwpe1xuXHRcdHBhcmVudE5vZGUubGFzdENoaWxkID0gbmV3TGFzdDtcblx0fWVsc2V7XG5cdFx0bmV4dENoaWxkLnByZXZpb3VzU2libGluZyA9IG5ld0xhc3Q7XG5cdH1cblx0ZG97XG5cdFx0bmV3Rmlyc3QucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG5cdH13aGlsZShuZXdGaXJzdCAhPT0gbmV3TGFzdCAmJiAobmV3Rmlyc3Q9IG5ld0ZpcnN0Lm5leHRTaWJsaW5nKSlcblx0X29uVXBkYXRlQ2hpbGQocGFyZW50Tm9kZS5vd25lckRvY3VtZW50fHxwYXJlbnROb2RlLHBhcmVudE5vZGUpO1xuXHQvL2NvbnNvbGUubG9nKHBhcmVudE5vZGUubGFzdENoaWxkLm5leHRTaWJsaW5nID09IG51bGwpXG5cdGlmIChuZXdDaGlsZC5ub2RlVHlwZSA9PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG5cdFx0bmV3Q2hpbGQuZmlyc3RDaGlsZCA9IG5ld0NoaWxkLmxhc3RDaGlsZCA9IG51bGw7XG5cdH1cblx0cmV0dXJuIG5ld0NoaWxkO1xufVxuZnVuY3Rpb24gX2FwcGVuZFNpbmdsZUNoaWxkKHBhcmVudE5vZGUsbmV3Q2hpbGQpe1xuXHR2YXIgY3AgPSBuZXdDaGlsZC5wYXJlbnROb2RlO1xuXHRpZihjcCl7XG5cdFx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHRcdGNwLnJlbW92ZUNoaWxkKG5ld0NoaWxkKTsvL3JlbW92ZSBhbmQgdXBkYXRlXG5cdFx0dmFyIHByZSA9IHBhcmVudE5vZGUubGFzdENoaWxkO1xuXHR9XG5cdHZhciBwcmUgPSBwYXJlbnROb2RlLmxhc3RDaGlsZDtcblx0bmV3Q2hpbGQucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG5cdG5ld0NoaWxkLnByZXZpb3VzU2libGluZyA9IHByZTtcblx0bmV3Q2hpbGQubmV4dFNpYmxpbmcgPSBudWxsO1xuXHRpZihwcmUpe1xuXHRcdHByZS5uZXh0U2libGluZyA9IG5ld0NoaWxkO1xuXHR9ZWxzZXtcblx0XHRwYXJlbnROb2RlLmZpcnN0Q2hpbGQgPSBuZXdDaGlsZDtcblx0fVxuXHRwYXJlbnROb2RlLmxhc3RDaGlsZCA9IG5ld0NoaWxkO1xuXHRfb25VcGRhdGVDaGlsZChwYXJlbnROb2RlLm93bmVyRG9jdW1lbnQscGFyZW50Tm9kZSxuZXdDaGlsZCk7XG5cdHJldHVybiBuZXdDaGlsZDtcblx0Ly9jb25zb2xlLmxvZyhcIl9fYWFcIixwYXJlbnROb2RlLmxhc3RDaGlsZC5uZXh0U2libGluZyA9PSBudWxsKVxufVxuRG9jdW1lbnQucHJvdG90eXBlID0ge1xuXHQvL2ltcGxlbWVudGF0aW9uIDogbnVsbCxcblx0bm9kZU5hbWUgOiAgJyNkb2N1bWVudCcsXG5cdG5vZGVUeXBlIDogIERPQ1VNRU5UX05PREUsXG5cdGRvY3R5cGUgOiAgbnVsbCxcblx0ZG9jdW1lbnRFbGVtZW50IDogIG51bGwsXG5cdF9pbmMgOiAxLFxuXHRcblx0aW5zZXJ0QmVmb3JlIDogIGZ1bmN0aW9uKG5ld0NoaWxkLCByZWZDaGlsZCl7Ly9yYWlzZXMgXG5cdFx0aWYobmV3Q2hpbGQubm9kZVR5cGUgPT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSl7XG5cdFx0XHR2YXIgY2hpbGQgPSBuZXdDaGlsZC5maXJzdENoaWxkO1xuXHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHR2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR0aGlzLmluc2VydEJlZm9yZShjaGlsZCxyZWZDaGlsZCk7XG5cdFx0XHRcdGNoaWxkID0gbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXdDaGlsZDtcblx0XHR9XG5cdFx0aWYodGhpcy5kb2N1bWVudEVsZW1lbnQgPT0gbnVsbCAmJiBuZXdDaGlsZC5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpe1xuXHRcdFx0dGhpcy5kb2N1bWVudEVsZW1lbnQgPSBuZXdDaGlsZDtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIF9pbnNlcnRCZWZvcmUodGhpcyxuZXdDaGlsZCxyZWZDaGlsZCksKG5ld0NoaWxkLm93bmVyRG9jdW1lbnQgPSB0aGlzKSxuZXdDaGlsZDtcblx0fSxcblx0cmVtb3ZlQ2hpbGQgOiAgZnVuY3Rpb24ob2xkQ2hpbGQpe1xuXHRcdGlmKHRoaXMuZG9jdW1lbnRFbGVtZW50ID09IG9sZENoaWxkKXtcblx0XHRcdHRoaXMuZG9jdW1lbnRFbGVtZW50ID0gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIF9yZW1vdmVDaGlsZCh0aGlzLG9sZENoaWxkKTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0aW1wb3J0Tm9kZSA6IGZ1bmN0aW9uKGltcG9ydGVkTm9kZSxkZWVwKXtcblx0XHRyZXR1cm4gaW1wb3J0Tm9kZSh0aGlzLGltcG9ydGVkTm9kZSxkZWVwKTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Z2V0RWxlbWVudEJ5SWQgOlx0ZnVuY3Rpb24oaWQpe1xuXHRcdHZhciBydHYgPSBudWxsO1xuXHRcdF92aXNpdE5vZGUodGhpcy5kb2N1bWVudEVsZW1lbnQsZnVuY3Rpb24obm9kZSl7XG5cdFx0XHRpZihub2RlLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSl7XG5cdFx0XHRcdGlmKG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpID09IGlkKXtcblx0XHRcdFx0XHRydHYgPSBub2RlO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSlcblx0XHRyZXR1cm4gcnR2O1xuXHR9LFxuXHRcblx0Ly9kb2N1bWVudCBmYWN0b3J5IG1ldGhvZDpcblx0Y3JlYXRlRWxlbWVudCA6XHRmdW5jdGlvbih0YWdOYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gdGFnTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSB0YWdOYW1lO1xuXHRcdG5vZGUuY2hpbGROb2RlcyA9IG5ldyBOb2RlTGlzdCgpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0YXR0cnMuX293bmVyRWxlbWVudCA9IG5vZGU7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZURvY3VtZW50RnJhZ21lbnQgOlx0ZnVuY3Rpb24oKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlVGV4dE5vZGUgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgVGV4dCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNvbW1lbnQgOlx0ZnVuY3Rpb24oZGF0YSl7XG5cdFx0dmFyIG5vZGUgPSBuZXcgQ29tbWVudCgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS5hcHBlbmREYXRhKGRhdGEpXG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUNEQVRBU2VjdGlvbiA6XHRmdW5jdGlvbihkYXRhKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBDREFUQVNlY3Rpb24oKTtcblx0XHRub2RlLm93bmVyRG9jdW1lbnQgPSB0aGlzO1xuXHRcdG5vZGUuYXBwZW5kRGF0YShkYXRhKVxuXHRcdHJldHVybiBub2RlO1xuXHR9LFxuXHRjcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gOlx0ZnVuY3Rpb24odGFyZ2V0LGRhdGEpe1xuXHRcdHZhciBub2RlID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbigpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudCA9IHRoaXM7XG5cdFx0bm9kZS50YWdOYW1lID0gbm9kZS50YXJnZXQgPSB0YXJnZXQ7XG5cdFx0bm9kZS5ub2RlVmFsdWU9IG5vZGUuZGF0YSA9IGRhdGE7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH0sXG5cdGNyZWF0ZUF0dHJpYnV0ZSA6XHRmdW5jdGlvbihuYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBBdHRyKCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50XHQ9IHRoaXM7XG5cdFx0bm9kZS5uYW1lID0gbmFtZTtcblx0XHRub2RlLm5vZGVOYW1lXHQ9IG5hbWU7XG5cdFx0bm9kZS5sb2NhbE5hbWUgPSBuYW1lO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Y3JlYXRlRW50aXR5UmVmZXJlbmNlIDpcdGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEVudGl0eVJlZmVyZW5jZSgpO1xuXHRcdG5vZGUub3duZXJEb2N1bWVudFx0PSB0aGlzO1xuXHRcdG5vZGUubm9kZU5hbWVcdD0gbmFtZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlRWxlbWVudE5TIDpcdGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSxxdWFsaWZpZWROYW1lKXtcblx0XHR2YXIgbm9kZSA9IG5ldyBFbGVtZW50KCk7XG5cdFx0dmFyIHBsID0gcXVhbGlmaWVkTmFtZS5zcGxpdCgnOicpO1xuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXMgPSBuZXcgTmFtZWROb2RlTWFwKCk7XG5cdFx0bm9kZS5jaGlsZE5vZGVzID0gbmV3IE5vZGVMaXN0KCk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLnRhZ05hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdGlmKHBsLmxlbmd0aCA9PSAyKXtcblx0XHRcdG5vZGUucHJlZml4ID0gcGxbMF07XG5cdFx0XHRub2RlLmxvY2FsTmFtZSA9IHBsWzFdO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly9lbC5wcmVmaXggPSBudWxsO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdH1cblx0XHRhdHRycy5fb3duZXJFbGVtZW50ID0gbm9kZTtcblx0XHRyZXR1cm4gbm9kZTtcblx0fSxcblx0Ly8gSW50cm9kdWNlZCBpbiBET00gTGV2ZWwgMjpcblx0Y3JlYXRlQXR0cmlidXRlTlMgOlx0ZnVuY3Rpb24obmFtZXNwYWNlVVJJLHF1YWxpZmllZE5hbWUpe1xuXHRcdHZhciBub2RlID0gbmV3IEF0dHIoKTtcblx0XHR2YXIgcGwgPSBxdWFsaWZpZWROYW1lLnNwbGl0KCc6Jyk7XG5cdFx0bm9kZS5vd25lckRvY3VtZW50ID0gdGhpcztcblx0XHRub2RlLm5vZGVOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHRub2RlLm5hbWUgPSBxdWFsaWZpZWROYW1lO1xuXHRcdG5vZGUubmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuXHRcdG5vZGUuc3BlY2lmaWVkID0gdHJ1ZTtcblx0XHRpZihwbC5sZW5ndGggPT0gMil7XG5cdFx0XHRub2RlLnByZWZpeCA9IHBsWzBdO1xuXHRcdFx0bm9kZS5sb2NhbE5hbWUgPSBwbFsxXTtcblx0XHR9ZWxzZXtcblx0XHRcdC8vZWwucHJlZml4ID0gbnVsbDtcblx0XHRcdG5vZGUubG9jYWxOYW1lID0gcXVhbGlmaWVkTmFtZTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH1cbn07XG5fZXh0ZW5kcyhEb2N1bWVudCxOb2RlKTtcblxuXG5mdW5jdGlvbiBFbGVtZW50KCkge1xuXHR0aGlzLl9uc01hcCA9IHt9O1xufTtcbkVsZW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlVHlwZSA6IEVMRU1FTlRfTk9ERSxcblx0aGFzQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZShuYW1lKSE9bnVsbDtcblx0fSxcblx0Z2V0QXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSk7XG5cdFx0cmV0dXJuIGF0dHIgJiYgYXR0ci52YWx1ZSB8fCAnJztcblx0fSxcblx0Z2V0QXR0cmlidXRlTm9kZSA6IGZ1bmN0aW9uKG5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKG5hbWUpO1xuXHR9LFxuXHRzZXRBdHRyaWJ1dGUgOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKG5hbWUpO1xuXHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcblx0fSxcblx0cmVtb3ZlQXR0cmlidXRlIDogZnVuY3Rpb24obmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGUobmFtZSlcblx0XHRhdHRyICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyKTtcblx0fSxcblx0XG5cdC8vZm91ciByZWFsIG9wZWFydGlvbiBtZXRob2Rcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdGlmKG5ld0NoaWxkLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFKXtcblx0XHRcdHJldHVybiB0aGlzLmluc2VydEJlZm9yZShuZXdDaGlsZCxudWxsKTtcblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybiBfYXBwZW5kU2luZ2xlQ2hpbGQodGhpcyxuZXdDaGlsZCk7XG5cdFx0fVxuXHR9LFxuXHRzZXRBdHRyaWJ1dGVOb2RlIDogZnVuY3Rpb24obmV3QXR0cil7XG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zZXROYW1lZEl0ZW0obmV3QXR0cik7XG5cdH0sXG5cdHNldEF0dHJpYnV0ZU5vZGVOUyA6IGZ1bmN0aW9uKG5ld0F0dHIpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtTlMobmV3QXR0cik7XG5cdH0sXG5cdHJlbW92ZUF0dHJpYnV0ZU5vZGUgOiBmdW5jdGlvbihvbGRBdHRyKXtcblx0XHQvL2NvbnNvbGUubG9nKHRoaXMgPT0gb2xkQXR0ci5vd25lckVsZW1lbnQpXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0ob2xkQXR0ci5ub2RlTmFtZSk7XG5cdH0sXG5cdC8vZ2V0IHJlYWwgYXR0cmlidXRlIG5hbWUsYW5kIHJlbW92ZSBpdCBieSByZW1vdmVBdHRyaWJ1dGVOb2RlXG5cdHJlbW92ZUF0dHJpYnV0ZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHZhciBvbGQgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdFx0b2xkICYmIHRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShvbGQpO1xuXHR9LFxuXHRcblx0aGFzQXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKG5hbWVzcGFjZVVSSSwgbG9jYWxOYW1lKSE9bnVsbDtcblx0fSxcblx0Z2V0QXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSl7XG5cdFx0dmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZU5vZGVOUyhuYW1lc3BhY2VVUkksIGxvY2FsTmFtZSk7XG5cdFx0cmV0dXJuIGF0dHIgJiYgYXR0ci52YWx1ZSB8fCAnJztcblx0fSxcblx0c2V0QXR0cmlidXRlTlMgOiBmdW5jdGlvbihuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUsIHZhbHVlKXtcblx0XHR2YXIgYXR0ciA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIHF1YWxpZmllZE5hbWUpO1xuXHRcdGF0dHIudmFsdWUgPSBhdHRyLm5vZGVWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZU5vZGUoYXR0cilcblx0fSxcblx0Z2V0QXR0cmlidXRlTm9kZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtTlMobmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpO1xuXHR9LFxuXHRcblx0Z2V0RWxlbWVudHNCeVRhZ05hbWUgOiBmdW5jdGlvbih0YWdOYW1lKXtcblx0XHRyZXR1cm4gbmV3IExpdmVOb2RlTGlzdCh0aGlzLGZ1bmN0aW9uKGJhc2Upe1xuXHRcdFx0dmFyIGxzID0gW107XG5cdFx0XHRfdmlzaXROb2RlKGJhc2UsZnVuY3Rpb24obm9kZSl7XG5cdFx0XHRcdGlmKG5vZGUgIT09IGJhc2UgJiYgbm9kZS5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUgJiYgKHRhZ05hbWUgPT09ICcqJyB8fCBub2RlLnRhZ05hbWUgPT0gdGFnTmFtZSkpe1xuXHRcdFx0XHRcdGxzLnB1c2gobm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxzO1xuXHRcdH0pO1xuXHR9LFxuXHRnZXRFbGVtZW50c0J5VGFnTmFtZU5TIDogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBsb2NhbE5hbWUpe1xuXHRcdHJldHVybiBuZXcgTGl2ZU5vZGVMaXN0KHRoaXMsZnVuY3Rpb24oYmFzZSl7XG5cdFx0XHR2YXIgbHMgPSBbXTtcblx0XHRcdF92aXNpdE5vZGUoYmFzZSxmdW5jdGlvbihub2RlKXtcblx0XHRcdFx0aWYobm9kZSAhPT0gYmFzZSAmJiBub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgKG5hbWVzcGFjZVVSSSA9PT0gJyonIHx8IG5vZGUubmFtZXNwYWNlVVJJID09PSBuYW1lc3BhY2VVUkkpICYmIChsb2NhbE5hbWUgPT09ICcqJyB8fCBub2RlLmxvY2FsTmFtZSA9PSBsb2NhbE5hbWUpKXtcblx0XHRcdFx0XHRscy5wdXNoKG5vZGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBscztcblx0XHRcdFxuXHRcdH0pO1xuXHR9XG59O1xuRG9jdW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU7XG5Eb2N1bWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWVOUyA9IEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lTlM7XG5cblxuX2V4dGVuZHMoRWxlbWVudCxOb2RlKTtcbmZ1bmN0aW9uIEF0dHIoKSB7XG59O1xuQXR0ci5wcm90b3R5cGUubm9kZVR5cGUgPSBBVFRSSUJVVEVfTk9ERTtcbl9leHRlbmRzKEF0dHIsTm9kZSk7XG5cblxuZnVuY3Rpb24gQ2hhcmFjdGVyRGF0YSgpIHtcbn07XG5DaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSA9IHtcblx0ZGF0YSA6ICcnLFxuXHRzdWJzdHJpbmdEYXRhIDogZnVuY3Rpb24ob2Zmc2V0LCBjb3VudCkge1xuXHRcdHJldHVybiB0aGlzLmRhdGEuc3Vic3RyaW5nKG9mZnNldCwgb2Zmc2V0K2NvdW50KTtcblx0fSxcblx0YXBwZW5kRGF0YTogZnVuY3Rpb24odGV4dCkge1xuXHRcdHRleHQgPSB0aGlzLmRhdGErdGV4dDtcblx0XHR0aGlzLm5vZGVWYWx1ZSA9IHRoaXMuZGF0YSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0fSxcblx0aW5zZXJ0RGF0YTogZnVuY3Rpb24ob2Zmc2V0LHRleHQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCwwLHRleHQpO1xuXHRcblx0fSxcblx0YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obmV3Q2hpbGQpe1xuXHRcdHRocm93IG5ldyBFcnJvcihFeGNlcHRpb25NZXNzYWdlW0hJRVJBUkNIWV9SRVFVRVNUX0VSUl0pXG5cdH0sXG5cdGRlbGV0ZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQpIHtcblx0XHR0aGlzLnJlcGxhY2VEYXRhKG9mZnNldCxjb3VudCxcIlwiKTtcblx0fSxcblx0cmVwbGFjZURhdGE6IGZ1bmN0aW9uKG9mZnNldCwgY291bnQsIHRleHQpIHtcblx0XHR2YXIgc3RhcnQgPSB0aGlzLmRhdGEuc3Vic3RyaW5nKDAsb2Zmc2V0KTtcblx0XHR2YXIgZW5kID0gdGhpcy5kYXRhLnN1YnN0cmluZyhvZmZzZXQrY291bnQpO1xuXHRcdHRleHQgPSBzdGFydCArIHRleHQgKyBlbmQ7XG5cdFx0dGhpcy5ub2RlVmFsdWUgPSB0aGlzLmRhdGEgPSB0ZXh0O1xuXHRcdHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG5cdH1cbn1cbl9leHRlbmRzKENoYXJhY3RlckRhdGEsTm9kZSk7XG5mdW5jdGlvbiBUZXh0KCkge1xufTtcblRleHQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI3RleHRcIixcblx0bm9kZVR5cGUgOiBURVhUX05PREUsXG5cdHNwbGl0VGV4dCA6IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRcdHZhciB0ZXh0ID0gdGhpcy5kYXRhO1xuXHRcdHZhciBuZXdUZXh0ID0gdGV4dC5zdWJzdHJpbmcob2Zmc2V0KTtcblx0XHR0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcblx0XHR0aGlzLmRhdGEgPSB0aGlzLm5vZGVWYWx1ZSA9IHRleHQ7XG5cdFx0dGhpcy5sZW5ndGggPSB0ZXh0Lmxlbmd0aDtcblx0XHR2YXIgbmV3Tm9kZSA9IHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuZXdUZXh0KTtcblx0XHRpZih0aGlzLnBhcmVudE5vZGUpe1xuXHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCB0aGlzLm5leHRTaWJsaW5nKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld05vZGU7XG5cdH1cbn1cbl9leHRlbmRzKFRleHQsQ2hhcmFjdGVyRGF0YSk7XG5mdW5jdGlvbiBDb21tZW50KCkge1xufTtcbkNvbW1lbnQucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NvbW1lbnRcIixcblx0bm9kZVR5cGUgOiBDT01NRU5UX05PREVcbn1cbl9leHRlbmRzKENvbW1lbnQsQ2hhcmFjdGVyRGF0YSk7XG5cbmZ1bmN0aW9uIENEQVRBU2VjdGlvbigpIHtcbn07XG5DREFUQVNlY3Rpb24ucHJvdG90eXBlID0ge1xuXHRub2RlTmFtZSA6IFwiI2NkYXRhLXNlY3Rpb25cIixcblx0bm9kZVR5cGUgOiBDREFUQV9TRUNUSU9OX05PREVcbn1cbl9leHRlbmRzKENEQVRBU2VjdGlvbixDaGFyYWN0ZXJEYXRhKTtcblxuXG5mdW5jdGlvbiBEb2N1bWVudFR5cGUoKSB7XG59O1xuRG9jdW1lbnRUeXBlLnByb3RvdHlwZS5ub2RlVHlwZSA9IERPQ1VNRU5UX1RZUEVfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50VHlwZSxOb2RlKTtcblxuZnVuY3Rpb24gTm90YXRpb24oKSB7XG59O1xuTm90YXRpb24ucHJvdG90eXBlLm5vZGVUeXBlID0gTk9UQVRJT05fTk9ERTtcbl9leHRlbmRzKE5vdGF0aW9uLE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHkoKSB7XG59O1xuRW50aXR5LnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9OT0RFO1xuX2V4dGVuZHMoRW50aXR5LE5vZGUpO1xuXG5mdW5jdGlvbiBFbnRpdHlSZWZlcmVuY2UoKSB7XG59O1xuRW50aXR5UmVmZXJlbmNlLnByb3RvdHlwZS5ub2RlVHlwZSA9IEVOVElUWV9SRUZFUkVOQ0VfTk9ERTtcbl9leHRlbmRzKEVudGl0eVJlZmVyZW5jZSxOb2RlKTtcblxuZnVuY3Rpb24gRG9jdW1lbnRGcmFnbWVudCgpIHtcbn07XG5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5ub2RlTmFtZSA9XHRcIiNkb2N1bWVudC1mcmFnbWVudFwiO1xuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUubm9kZVR5cGUgPVx0RE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbl9leHRlbmRzKERvY3VtZW50RnJhZ21lbnQsTm9kZSk7XG5cblxuZnVuY3Rpb24gUHJvY2Vzc2luZ0luc3RydWN0aW9uKCkge1xufVxuUHJvY2Vzc2luZ0luc3RydWN0aW9uLnByb3RvdHlwZS5ub2RlVHlwZSA9IFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERTtcbl9leHRlbmRzKFByb2Nlc3NpbmdJbnN0cnVjdGlvbixOb2RlKTtcbmZ1bmN0aW9uIFhNTFNlcmlhbGl6ZXIoKXt9XG5YTUxTZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVUb1N0cmluZyA9IGZ1bmN0aW9uKG5vZGUsaXNIdG1sLG5vZGVGaWx0ZXIpe1xuXHRyZXR1cm4gbm9kZVNlcmlhbGl6ZVRvU3RyaW5nLmNhbGwobm9kZSxpc0h0bWwsbm9kZUZpbHRlcik7XG59XG5Ob2RlLnByb3RvdHlwZS50b1N0cmluZyA9IG5vZGVTZXJpYWxpemVUb1N0cmluZztcbmZ1bmN0aW9uIG5vZGVTZXJpYWxpemVUb1N0cmluZyhpc0h0bWwsbm9kZUZpbHRlcil7XG5cdHZhciBidWYgPSBbXTtcblx0dmFyIHJlZk5vZGUgPSB0aGlzLm5vZGVUeXBlID09IDk/dGhpcy5kb2N1bWVudEVsZW1lbnQ6dGhpcztcblx0dmFyIHByZWZpeCA9IHJlZk5vZGUucHJlZml4O1xuXHR2YXIgdXJpID0gcmVmTm9kZS5uYW1lc3BhY2VVUkk7XG5cdFxuXHRpZih1cmkgJiYgcHJlZml4ID09IG51bGwpe1xuXHRcdC8vY29uc29sZS5sb2cocHJlZml4KVxuXHRcdHZhciBwcmVmaXggPSByZWZOb2RlLmxvb2t1cFByZWZpeCh1cmkpO1xuXHRcdGlmKHByZWZpeCA9PSBudWxsKXtcblx0XHRcdC8vaXNIVE1MID0gdHJ1ZTtcblx0XHRcdHZhciB2aXNpYmxlTmFtZXNwYWNlcz1bXG5cdFx0XHR7bmFtZXNwYWNlOnVyaSxwcmVmaXg6bnVsbH1cblx0XHRcdC8ve25hbWVzcGFjZTp1cmkscHJlZml4OicnfVxuXHRcdFx0XVxuXHRcdH1cblx0fVxuXHRzZXJpYWxpemVUb1N0cmluZyh0aGlzLGJ1Zixpc0h0bWwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdC8vY29uc29sZS5sb2coJyMjIycsdGhpcy5ub2RlVHlwZSx1cmkscHJlZml4LGJ1Zi5qb2luKCcnKSlcblx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn1cbmZ1bmN0aW9uIG5lZWROYW1lc3BhY2VEZWZpbmUobm9kZSxpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSB7XG5cdHZhciBwcmVmaXggPSBub2RlLnByZWZpeHx8Jyc7XG5cdHZhciB1cmkgPSBub2RlLm5hbWVzcGFjZVVSSTtcblx0aWYgKCFwcmVmaXggJiYgIXVyaSl7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChwcmVmaXggPT09IFwieG1sXCIgJiYgdXJpID09PSBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiIFxuXHRcdHx8IHVyaSA9PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8nKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0XG5cdHZhciBpID0gdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoIFxuXHQvL2NvbnNvbGUubG9nKCdAQEBAJyxub2RlLnRhZ05hbWUscHJlZml4LHVyaSx2aXNpYmxlTmFtZXNwYWNlcylcblx0d2hpbGUgKGktLSkge1xuXHRcdHZhciBucyA9IHZpc2libGVOYW1lc3BhY2VzW2ldO1xuXHRcdC8vIGdldCBuYW1lc3BhY2UgcHJlZml4XG5cdFx0Ly9jb25zb2xlLmxvZyhub2RlLm5vZGVUeXBlLG5vZGUudGFnTmFtZSxucy5wcmVmaXgscHJlZml4KVxuXHRcdGlmIChucy5wcmVmaXggPT0gcHJlZml4KXtcblx0XHRcdHJldHVybiBucy5uYW1lc3BhY2UgIT0gdXJpO1xuXHRcdH1cblx0fVxuXHQvL2NvbnNvbGUubG9nKGlzSFRNTCx1cmkscHJlZml4PT0nJylcblx0Ly9pZihpc0hUTUwgJiYgcHJlZml4ID09bnVsbCAmJiB1cmkgPT0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKXtcblx0Ly9cdHJldHVybiBmYWxzZTtcblx0Ly99XG5cdC8vbm9kZS5mbGFnID0gJzExMTExJ1xuXHQvL2NvbnNvbGUuZXJyb3IoMyx0cnVlLG5vZGUuZmxhZyxub2RlLnByZWZpeCxub2RlLm5hbWVzcGFjZVVSSSlcblx0cmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVUb1N0cmluZyhub2RlLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyl7XG5cdGlmKG5vZGVGaWx0ZXIpe1xuXHRcdG5vZGUgPSBub2RlRmlsdGVyKG5vZGUpO1xuXHRcdGlmKG5vZGUpe1xuXHRcdFx0aWYodHlwZW9mIG5vZGUgPT0gJ3N0cmluZycpe1xuXHRcdFx0XHRidWYucHVzaChub2RlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHQvL2J1Zi5zb3J0LmFwcGx5KGF0dHJzLCBhdHRyaWJ1dGVTb3J0ZXIpO1xuXHR9XG5cdHN3aXRjaChub2RlLm5vZGVUeXBlKXtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0aWYgKCF2aXNpYmxlTmFtZXNwYWNlcykgdmlzaWJsZU5hbWVzcGFjZXMgPSBbXTtcblx0XHR2YXIgc3RhcnRWaXNpYmxlTmFtZXNwYWNlcyA9IHZpc2libGVOYW1lc3BhY2VzLmxlbmd0aDtcblx0XHR2YXIgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGxlbiA9IGF0dHJzLmxlbmd0aDtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0dmFyIG5vZGVOYW1lID0gbm9kZS50YWdOYW1lO1xuXHRcdFxuXHRcdGlzSFRNTCA9ICAoaHRtbG5zID09PSBub2RlLm5hbWVzcGFjZVVSSSkgfHxpc0hUTUwgXG5cdFx0YnVmLnB1c2goJzwnLG5vZGVOYW1lKTtcblx0XHRcblx0XHRcblx0XHRcblx0XHRmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0Ly8gYWRkIG5hbWVzcGFjZXMgZm9yIGF0dHJpYnV0ZXNcblx0XHRcdHZhciBhdHRyID0gYXR0cnMuaXRlbShpKTtcblx0XHRcdGlmIChhdHRyLnByZWZpeCA9PSAneG1sbnMnKSB7XG5cdFx0XHRcdHZpc2libGVOYW1lc3BhY2VzLnB1c2goeyBwcmVmaXg6IGF0dHIubG9jYWxOYW1lLCBuYW1lc3BhY2U6IGF0dHIudmFsdWUgfSk7XG5cdFx0XHR9ZWxzZSBpZihhdHRyLm5vZGVOYW1lID09ICd4bWxucycpe1xuXHRcdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiAnJywgbmFtZXNwYWNlOiBhdHRyLnZhbHVlIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IodmFyIGk9MDtpPGxlbjtpKyspe1xuXHRcdFx0dmFyIGF0dHIgPSBhdHRycy5pdGVtKGkpO1xuXHRcdFx0aWYgKG5lZWROYW1lc3BhY2VEZWZpbmUoYXR0cixpc0hUTUwsIHZpc2libGVOYW1lc3BhY2VzKSkge1xuXHRcdFx0XHR2YXIgcHJlZml4ID0gYXR0ci5wcmVmaXh8fCcnO1xuXHRcdFx0XHR2YXIgdXJpID0gYXR0ci5uYW1lc3BhY2VVUkk7XG5cdFx0XHRcdHZhciBucyA9IHByZWZpeCA/ICcgeG1sbnM6JyArIHByZWZpeCA6IFwiIHhtbG5zXCI7XG5cdFx0XHRcdGJ1Zi5wdXNoKG5zLCAnPVwiJyAsIHVyaSAsICdcIicpO1xuXHRcdFx0XHR2aXNpYmxlTmFtZXNwYWNlcy5wdXNoKHsgcHJlZml4OiBwcmVmaXgsIG5hbWVzcGFjZTp1cmkgfSk7XG5cdFx0XHR9XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyhhdHRyLGJ1Zixpc0hUTUwsbm9kZUZpbHRlcix2aXNpYmxlTmFtZXNwYWNlcyk7XG5cdFx0fVxuXHRcdC8vIGFkZCBuYW1lc3BhY2UgZm9yIGN1cnJlbnQgbm9kZVx0XHRcblx0XHRpZiAobmVlZE5hbWVzcGFjZURlZmluZShub2RlLGlzSFRNTCwgdmlzaWJsZU5hbWVzcGFjZXMpKSB7XG5cdFx0XHR2YXIgcHJlZml4ID0gbm9kZS5wcmVmaXh8fCcnO1xuXHRcdFx0dmFyIHVyaSA9IG5vZGUubmFtZXNwYWNlVVJJO1xuXHRcdFx0dmFyIG5zID0gcHJlZml4ID8gJyB4bWxuczonICsgcHJlZml4IDogXCIgeG1sbnNcIjtcblx0XHRcdGJ1Zi5wdXNoKG5zLCAnPVwiJyAsIHVyaSAsICdcIicpO1xuXHRcdFx0dmlzaWJsZU5hbWVzcGFjZXMucHVzaCh7IHByZWZpeDogcHJlZml4LCBuYW1lc3BhY2U6dXJpIH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZihjaGlsZCB8fCBpc0hUTUwgJiYgIS9eKD86bWV0YXxsaW5rfGltZ3xicnxocnxpbnB1dCkkL2kudGVzdChub2RlTmFtZSkpe1xuXHRcdFx0YnVmLnB1c2goJz4nKTtcblx0XHRcdC8vaWYgaXMgY2RhdGEgY2hpbGQgbm9kZVxuXHRcdFx0aWYoaXNIVE1MICYmIC9ec2NyaXB0JC9pLnRlc3Qobm9kZU5hbWUpKXtcblx0XHRcdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0XHRcdGlmKGNoaWxkLmRhdGEpe1xuXHRcdFx0XHRcdFx0YnVmLnB1c2goY2hpbGQuZGF0YSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRcdFx0c2VyaWFsaXplVG9TdHJpbmcoY2hpbGQsYnVmLGlzSFRNTCxub2RlRmlsdGVyLHZpc2libGVOYW1lc3BhY2VzKTtcblx0XHRcdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRidWYucHVzaCgnPC8nLG5vZGVOYW1lLCc+Jyk7XG5cdFx0fWVsc2V7XG5cdFx0XHRidWYucHVzaCgnLz4nKTtcblx0XHR9XG5cdFx0Ly8gcmVtb3ZlIGFkZGVkIHZpc2libGUgbmFtZXNwYWNlc1xuXHRcdC8vdmlzaWJsZU5hbWVzcGFjZXMubGVuZ3RoID0gc3RhcnRWaXNpYmxlTmFtZXNwYWNlcztcblx0XHRyZXR1cm47XG5cdGNhc2UgRE9DVU1FTlRfTk9ERTpcblx0Y2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRzZXJpYWxpemVUb1N0cmluZyhjaGlsZCxidWYsaXNIVE1MLG5vZGVGaWx0ZXIsdmlzaWJsZU5hbWVzcGFjZXMpO1xuXHRcdFx0Y2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHRjYXNlIEFUVFJJQlVURV9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCgnICcsbm9kZS5uYW1lLCc9XCInLG5vZGUudmFsdWUucmVwbGFjZSgvWzwmXCJdL2csX3htbEVuY29kZXIpLCdcIicpO1xuXHRjYXNlIFRFWFRfTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2gobm9kZS5kYXRhLnJlcGxhY2UoL1s8Jl0vZyxfeG1sRW5jb2RlcikpO1xuXHRjYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICc8IVtDREFUQVsnLG5vZGUuZGF0YSwnXV0+Jyk7XG5cdGNhc2UgQ09NTUVOVF9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8IS0tXCIsbm9kZS5kYXRhLFwiLS0+XCIpO1xuXHRjYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0XHR2YXIgcHViaWQgPSBub2RlLnB1YmxpY0lkO1xuXHRcdHZhciBzeXNpZCA9IG5vZGUuc3lzdGVtSWQ7XG5cdFx0YnVmLnB1c2goJzwhRE9DVFlQRSAnLG5vZGUubmFtZSk7XG5cdFx0aWYocHViaWQpe1xuXHRcdFx0YnVmLnB1c2goJyBQVUJMSUMgXCInLHB1YmlkKTtcblx0XHRcdGlmIChzeXNpZCAmJiBzeXNpZCE9Jy4nKSB7XG5cdFx0XHRcdGJ1Zi5wdXNoKCAnXCIgXCInLHN5c2lkKTtcblx0XHRcdH1cblx0XHRcdGJ1Zi5wdXNoKCdcIj4nKTtcblx0XHR9ZWxzZSBpZihzeXNpZCAmJiBzeXNpZCE9Jy4nKXtcblx0XHRcdGJ1Zi5wdXNoKCcgU1lTVEVNIFwiJyxzeXNpZCwnXCI+Jyk7XG5cdFx0fWVsc2V7XG5cdFx0XHR2YXIgc3ViID0gbm9kZS5pbnRlcm5hbFN1YnNldDtcblx0XHRcdGlmKHN1Yil7XG5cdFx0XHRcdGJ1Zi5wdXNoKFwiIFtcIixzdWIsXCJdXCIpO1xuXHRcdFx0fVxuXHRcdFx0YnVmLnB1c2goXCI+XCIpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdGNhc2UgUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOlxuXHRcdHJldHVybiBidWYucHVzaCggXCI8P1wiLG5vZGUudGFyZ2V0LFwiIFwiLG5vZGUuZGF0YSxcIj8+XCIpO1xuXHRjYXNlIEVOVElUWV9SRUZFUkVOQ0VfTk9ERTpcblx0XHRyZXR1cm4gYnVmLnB1c2goICcmJyxub2RlLm5vZGVOYW1lLCc7Jyk7XG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREU6XG5cdGRlZmF1bHQ6XG5cdFx0YnVmLnB1c2goJz8/Jyxub2RlLm5vZGVOYW1lKTtcblx0fVxufVxuZnVuY3Rpb24gaW1wb3J0Tm9kZShkb2Msbm9kZSxkZWVwKXtcblx0dmFyIG5vZGUyO1xuXHRzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcblx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0bm9kZTIgPSBub2RlLmNsb25lTm9kZShmYWxzZSk7XG5cdFx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0XHQvL3ZhciBhdHRycyA9IG5vZGUyLmF0dHJpYnV0ZXM7XG5cdFx0Ly92YXIgbGVuID0gYXR0cnMubGVuZ3RoO1xuXHRcdC8vZm9yKHZhciBpPTA7aTxsZW47aSsrKXtcblx0XHRcdC8vbm9kZTIuc2V0QXR0cmlidXRlTm9kZU5TKGltcG9ydE5vZGUoZG9jLGF0dHJzLml0ZW0oaSksZGVlcCkpO1xuXHRcdC8vfVxuXHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0YnJlYWs7XG5cdGNhc2UgQVRUUklCVVRFX05PREU6XG5cdFx0ZGVlcCA9IHRydWU7XG5cdFx0YnJlYWs7XG5cdC8vY2FzZSBFTlRJVFlfUkVGRVJFTkNFX05PREU6XG5cdC8vY2FzZSBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREU6XG5cdC8vLy9jYXNlIFRFWFRfTk9ERTpcblx0Ly9jYXNlIENEQVRBX1NFQ1RJT05fTk9ERTpcblx0Ly9jYXNlIENPTU1FTlRfTk9ERTpcblx0Ly9cdGRlZXAgPSBmYWxzZTtcblx0Ly9cdGJyZWFrO1xuXHQvL2Nhc2UgRE9DVU1FTlRfTk9ERTpcblx0Ly9jYXNlIERPQ1VNRU5UX1RZUEVfTk9ERTpcblx0Ly9jYW5ub3QgYmUgaW1wb3J0ZWQuXG5cdC8vY2FzZSBFTlRJVFlfTk9ERTpcblx0Ly9jYXNlIE5PVEFUSU9OX05PREXvvJpcblx0Ly9jYW4gbm90IGhpdCBpbiBsZXZlbDNcblx0Ly9kZWZhdWx0OnRocm93IGU7XG5cdH1cblx0aWYoIW5vZGUyKXtcblx0XHRub2RlMiA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTsvL2ZhbHNlXG5cdH1cblx0bm9kZTIub3duZXJEb2N1bWVudCA9IGRvYztcblx0bm9kZTIucGFyZW50Tm9kZSA9IG51bGw7XG5cdGlmKGRlZXApe1xuXHRcdHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShjaGlsZCl7XG5cdFx0XHRub2RlMi5hcHBlbmRDaGlsZChpbXBvcnROb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG4vL1xuLy92YXIgX3JlbGF0aW9uTWFwID0ge2ZpcnN0Q2hpbGQ6MSxsYXN0Q2hpbGQ6MSxwcmV2aW91c1NpYmxpbmc6MSxuZXh0U2libGluZzoxLFxuLy9cdFx0XHRcdFx0YXR0cmlidXRlczoxLGNoaWxkTm9kZXM6MSxwYXJlbnROb2RlOjEsZG9jdW1lbnRFbGVtZW50OjEsZG9jdHlwZSx9O1xuZnVuY3Rpb24gY2xvbmVOb2RlKGRvYyxub2RlLGRlZXApe1xuXHR2YXIgbm9kZTIgPSBuZXcgbm9kZS5jb25zdHJ1Y3RvcigpO1xuXHRmb3IodmFyIG4gaW4gbm9kZSl7XG5cdFx0dmFyIHYgPSBub2RlW25dO1xuXHRcdGlmKHR5cGVvZiB2ICE9ICdvYmplY3QnICl7XG5cdFx0XHRpZih2ICE9IG5vZGUyW25dKXtcblx0XHRcdFx0bm9kZTJbbl0gPSB2O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZihub2RlLmNoaWxkTm9kZXMpe1xuXHRcdG5vZGUyLmNoaWxkTm9kZXMgPSBuZXcgTm9kZUxpc3QoKTtcblx0fVxuXHRub2RlMi5vd25lckRvY3VtZW50ID0gZG9jO1xuXHRzd2l0Y2ggKG5vZGUyLm5vZGVUeXBlKSB7XG5cdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdHZhciBhdHRyc1x0PSBub2RlLmF0dHJpYnV0ZXM7XG5cdFx0dmFyIGF0dHJzMlx0PSBub2RlMi5hdHRyaWJ1dGVzID0gbmV3IE5hbWVkTm9kZU1hcCgpO1xuXHRcdHZhciBsZW4gPSBhdHRycy5sZW5ndGhcblx0XHRhdHRyczIuX293bmVyRWxlbWVudCA9IG5vZGUyO1xuXHRcdGZvcih2YXIgaT0wO2k8bGVuO2krKyl7XG5cdFx0XHRub2RlMi5zZXRBdHRyaWJ1dGVOb2RlKGNsb25lTm9kZShkb2MsYXR0cnMuaXRlbShpKSx0cnVlKSk7XG5cdFx0fVxuXHRcdGJyZWFrOztcblx0Y2FzZSBBVFRSSUJVVEVfTk9ERTpcblx0XHRkZWVwID0gdHJ1ZTtcblx0fVxuXHRpZihkZWVwKXtcblx0XHR2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUoY2hpbGQpe1xuXHRcdFx0bm9kZTIuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlKGRvYyxjaGlsZCxkZWVwKSk7XG5cdFx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbm9kZTI7XG59XG5cbmZ1bmN0aW9uIF9fc2V0X18ob2JqZWN0LGtleSx2YWx1ZSl7XG5cdG9iamVjdFtrZXldID0gdmFsdWVcbn1cbi8vZG8gZHluYW1pY1xudHJ5e1xuXHRpZihPYmplY3QuZGVmaW5lUHJvcGVydHkpe1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaXZlTm9kZUxpc3QucHJvdG90eXBlLCdsZW5ndGgnLHtcblx0XHRcdGdldDpmdW5jdGlvbigpe1xuXHRcdFx0XHRfdXBkYXRlTGl2ZUxpc3QodGhpcyk7XG5cdFx0XHRcdHJldHVybiB0aGlzLiQkbGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwndGV4dENvbnRlbnQnLHtcblx0XHRcdGdldDpmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4gZ2V0VGV4dENvbnRlbnQodGhpcyk7XG5cdFx0XHR9LFxuXHRcdFx0c2V0OmZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRzd2l0Y2godGhpcy5ub2RlVHlwZSl7XG5cdFx0XHRcdGNhc2UgRUxFTUVOVF9OT0RFOlxuXHRcdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdFx0d2hpbGUodGhpcy5maXJzdENoaWxkKXtcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ2hpbGQodGhpcy5maXJzdENoaWxkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoZGF0YSB8fCBTdHJpbmcoZGF0YSkpe1xuXHRcdFx0XHRcdFx0dGhpcy5hcHBlbmRDaGlsZCh0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHQvL1RPRE86XG5cdFx0XHRcdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHRcdFx0XHR0aGlzLnZhbHVlID0gZGF0YTtcblx0XHRcdFx0XHR0aGlzLm5vZGVWYWx1ZSA9IGRhdGE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGdldFRleHRDb250ZW50KG5vZGUpe1xuXHRcdFx0c3dpdGNoKG5vZGUubm9kZVR5cGUpe1xuXHRcdFx0Y2FzZSBFTEVNRU5UX05PREU6XG5cdFx0XHRjYXNlIERPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG5cdFx0XHRcdHZhciBidWYgPSBbXTtcblx0XHRcdFx0bm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcblx0XHRcdFx0d2hpbGUobm9kZSl7XG5cdFx0XHRcdFx0aWYobm9kZS5ub2RlVHlwZSE9PTcgJiYgbm9kZS5ub2RlVHlwZSAhPT04KXtcblx0XHRcdFx0XHRcdGJ1Zi5wdXNoKGdldFRleHRDb250ZW50KG5vZGUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGJ1Zi5qb2luKCcnKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiBub2RlLm5vZGVWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0X19zZXRfXyA9IGZ1bmN0aW9uKG9iamVjdCxrZXksdmFsdWUpe1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh2YWx1ZSlcblx0XHRcdG9iamVjdFsnJCQnK2tleV0gPSB2YWx1ZVxuXHRcdH1cblx0fVxufWNhdGNoKGUpey8vaWU4XG59XG5cbi8vaWYodHlwZW9mIHJlcXVpcmUgPT0gJ2Z1bmN0aW9uJyl7XG5cdGV4cG9ydHMuRE9NSW1wbGVtZW50YXRpb24gPSBET01JbXBsZW1lbnRhdGlvbjtcblx0ZXhwb3J0cy5YTUxTZXJpYWxpemVyID0gWE1MU2VyaWFsaXplcjtcbi8vfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/*!************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/lib/json2xml.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//copyright Ryan Day 2010 <http://ryanday.org>, Joscha Feth 2013 <http://www.feth.com> [MIT Licensed]\n\nvar element_start_char =\n\"a-zA-Z_\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FFF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\";\nvar element_non_start_char = \"-.0-9\\xB7\\u0300-\\u036F\\u203F\\u2040\";\nvar element_replace = new RegExp(\"^([^\" + element_start_char + \"])|^((x|X)(m|M)(l|L))|([^\" + element_start_char + element_non_start_char + \"])\", \"g\");\nvar not_safe_in_xml = /[^\\x09\\x0A\\x0D\\x20-\\xFF\\x85\\xA0-\\uD7FF\\uE000-\\uFDCF\\uFDE0-\\uFFFD]/gm;\n\nvar objKeys = function objKeys(obj) {\n  var l = [];\n  if (obj instanceof Object) {\n    for (var k in obj) {\n      if (obj.hasOwnProperty(k)) {\n        l.push(k);\n      }\n    }\n  }\n  return l;\n};\nvar process_to_xml = function process_to_xml(node_data, options) {\n\n  var makeNode = function makeNode(name, content, attributes, level, hasSubNodes) {\n    var indent_value = options.indent !== undefined ? options.indent : \"\\t\";\n    var indent = options.prettyPrint ? '\\n' + new Array(level).join(indent_value) : '';\n    if (options.removeIllegalNameCharacters) {\n      name = name.replace(element_replace, '_');\n    }\n\n    var node = [indent, '<', name, attributes || ''];\n    if (content && content.length > 0) {\n      node.push('>');\n      node.push(content);\n      hasSubNodes && node.push(indent);\n      node.push('</');\n      node.push(name);\n      node.push('>');\n    } else {\n      node.push('/>');\n    }\n    return node.join('');\n  };\n\n  return function fn(node_data, node_descriptor, level) {\n    var type = typeof node_data;\n    if (Array.isArray ? Array.isArray(node_data) : node_data instanceof Array) {\n      type = 'array';\n    } else if (node_data instanceof Date) {\n      type = 'date';\n    }\n\n    switch (type) {\n      //if value is an array create child nodes from values\n      case 'array':\n        var ret = [];\n        node_data.map(function (v) {\n          ret.push(fn(v, 1, level + 1));\n          //entries that are values of an array are the only ones that can be special node descriptors\n        });\n        options.prettyPrint && ret.push('\\n');\n        return ret.join('');\n        break;\n\n      case 'date':\n        // cast dates to ISO 8601 date (soap likes it)\n        return node_data.toJSON ? node_data.toJSON() : node_data + '';\n        break;\n\n      case 'object':\n        var nodes = [];\n        for (var name in node_data) {\n          if (node_data.hasOwnProperty(name)) {\n            if (node_data[name] instanceof Array) {\n              for (var j = 0; j < node_data[name].length; j++) {\n                if (node_data[name].hasOwnProperty(j)) {\n                  nodes.push(makeNode(name, fn(node_data[name][j], 0, level + 1), null, level + 1, objKeys(node_data[name][j]).length));\n                }\n              }\n            } else {\n              nodes.push(makeNode(name, fn(node_data[name], 0, level + 1), null, level + 1));\n            }\n          }\n        }\n        options.prettyPrint && nodes.length > 0 && nodes.push('\\n');\n        return nodes.join('');\n        break;\n\n      case 'function':\n        return node_data();\n        break;\n\n      default:\n        return options.escape ? esc(node_data) : '' + node_data;}\n\n\n  }(node_data, 0, 0);\n};\n\n\nvar xml_header = function xml_header(standalone) {\n  var ret = ['<?xml version=\"1.0\" encoding=\"UTF-8\"'];\n\n  if (standalone) {\n    ret.push(' standalone=\"yes\"');\n  }\n  ret.push('?>');\n\n  return ret.join('');\n};\n\nfunction esc(str) {\n  return ('' + str).replace(/&/g, '&amp;').\n  replace(/</g, '&lt;').\n  replace(/>/g, '&gt;').\n  replace(/'/g, '&apos;').\n  replace(/\"/g, '&quot;').\n  replace(not_safe_in_xml, '');\n}\n\nmodule.exports = function (obj, options) {\n  if (!options) {\n    options = {\n      xmlHeader: {\n        standalone: true },\n\n      prettyPrint: true,\n      indent: \"  \",\n      escape: true };\n\n  }\n\n  if (typeof obj == 'string') {\n    try {\n      obj = JSON.parse(obj.toString());\n    } catch (e) {\n      return false;\n    }\n  }\n\n  var xmlheader = '';\n  var docType = '';\n  if (options) {\n    if (typeof options == 'object') {\n      // our config is an object\n\n      if (options.xmlHeader) {\n        // the user wants an xml header\n        xmlheader = xml_header(!!options.xmlHeader.standalone);\n      }\n\n      if (typeof options.docType != 'undefined') {\n        docType = '<!DOCTYPE ' + options.docType + '>';\n      }\n    } else {\n      // our config is a boolean value, so just add xml header\n      xmlheader = xml_header();\n    }\n  }\n  options = options || {};\n\n  var ret = [\n  xmlheader,\n  options.prettyPrint && docType ? '\\n' : '',\n  docType,\n  process_to_xml(obj, options)];\n\n  return ret.join('').replace(/\\n{2,}/g, '\\n').replace(/\\s+$/g, '');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/*!*********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/event.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__f__) {var initEvent = function initEvent(cos) {\n  var listeners = {};\n  var getList = function getList(action) {\n    !listeners[action] && (listeners[action] = []);\n    return listeners[action];\n  };\n  cos.on = function (action, callback) {\n    if (action === 'task-list-update') {\n      __f__(\"warn\", 'warning: Event \"' + action + '\" has been deprecated. Please use \"list-update\" instead.', \" at cos-js-sdk-v5/src/event.js:9\");\n    }\n    getList(action).push(callback);\n  };\n  cos.off = function (action, callback) {\n    var list = getList(action);\n    for (var i = list.length - 1; i >= 0; i--) {\n      callback === list[i] && list.splice(i, 1);\n    }\n  };\n  cos.emit = function (action, data) {\n    var list = getList(action).map(function (cb) {\n      return cb;\n    });\n    for (var i = 0; i < list.length; i++) {\n      list[i](data);\n    }\n  };\n};\n\nvar EventProxy = function EventProxy() {\n  initEvent(this);\n};\n\nmodule.exports.init = initEvent;\nmodule.exports.EventProxy = EventProxy;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29zLWpzLXNkay12NS9zcmMvZXZlbnQuanMiXSwibmFtZXMiOlsiaW5pdEV2ZW50IiwiY29zIiwibGlzdGVuZXJzIiwiZ2V0TGlzdCIsImFjdGlvbiIsIm9uIiwiY2FsbGJhY2siLCJwdXNoIiwib2ZmIiwibGlzdCIsImkiLCJsZW5ndGgiLCJzcGxpY2UiLCJlbWl0IiwiZGF0YSIsIm1hcCIsImNiIiwiRXZlbnRQcm94eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbml0Il0sIm1hcHBpbmdzIjoiQUFBQSxpREFBSUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUMsR0FBVixFQUFlO0FBQzNCLE1BQUlDLFNBQVMsR0FBRyxFQUFoQjtBQUNBLE1BQUlDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVVDLE1BQVYsRUFBa0I7QUFDNUIsS0FBQ0YsU0FBUyxDQUFDRSxNQUFELENBQVYsS0FBdUJGLFNBQVMsQ0FBQ0UsTUFBRCxDQUFULEdBQW9CLEVBQTNDO0FBQ0EsV0FBT0YsU0FBUyxDQUFDRSxNQUFELENBQWhCO0FBQ0gsR0FIRDtBQUlBSCxLQUFHLENBQUNJLEVBQUosR0FBUyxVQUFVRCxNQUFWLEVBQWtCRSxRQUFsQixFQUE0QjtBQUNqQyxRQUFJRixNQUFNLEtBQUssa0JBQWYsRUFBbUM7QUFDL0Isb0JBQWEscUJBQXFCQSxNQUFyQixHQUE4QiwwREFBM0M7QUFDSDtBQUNERCxXQUFPLENBQUNDLE1BQUQsQ0FBUCxDQUFnQkcsSUFBaEIsQ0FBcUJELFFBQXJCO0FBQ0gsR0FMRDtBQU1BTCxLQUFHLENBQUNPLEdBQUosR0FBVSxVQUFVSixNQUFWLEVBQWtCRSxRQUFsQixFQUE0QjtBQUNsQyxRQUFJRyxJQUFJLEdBQUdOLE9BQU8sQ0FBQ0MsTUFBRCxDQUFsQjtBQUNBLFNBQUssSUFBSU0sQ0FBQyxHQUFHRCxJQUFJLENBQUNFLE1BQUwsR0FBYyxDQUEzQixFQUE4QkQsQ0FBQyxJQUFJLENBQW5DLEVBQXNDQSxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDSixjQUFRLEtBQUtHLElBQUksQ0FBQ0MsQ0FBRCxDQUFqQixJQUF3QkQsSUFBSSxDQUFDRyxNQUFMLENBQVlGLENBQVosRUFBZSxDQUFmLENBQXhCO0FBQ0g7QUFDSixHQUxEO0FBTUFULEtBQUcsQ0FBQ1ksSUFBSixHQUFXLFVBQVVULE1BQVYsRUFBa0JVLElBQWxCLEVBQXdCO0FBQy9CLFFBQUlMLElBQUksR0FBR04sT0FBTyxDQUFDQyxNQUFELENBQVAsQ0FBZ0JXLEdBQWhCLENBQW9CLFVBQVVDLEVBQVYsRUFBYztBQUN6QyxhQUFPQSxFQUFQO0FBQ0gsS0FGVSxDQUFYO0FBR0EsU0FBSyxJQUFJTixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxJQUFJLENBQUNFLE1BQXpCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDRCxVQUFJLENBQUNDLENBQUQsQ0FBSixDQUFRSSxJQUFSO0FBQ0g7QUFDSixHQVBEO0FBUUgsQ0ExQkQ7O0FBNEJBLElBQUlHLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVk7QUFDekJqQixXQUFTLENBQUMsSUFBRCxDQUFUO0FBQ0gsQ0FGRDs7QUFJQWtCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxJQUFmLEdBQXNCcEIsU0FBdEI7QUFDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRixVQUFmLEdBQTRCQSxVQUE1QixDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluaXRFdmVudCA9IGZ1bmN0aW9uIChjb3MpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB7fTtcclxuICAgIHZhciBnZXRMaXN0ID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICFsaXN0ZW5lcnNbYWN0aW9uXSAmJiAobGlzdGVuZXJzW2FjdGlvbl0gPSBbXSk7XHJcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyc1thY3Rpb25dO1xyXG4gICAgfTtcclxuICAgIGNvcy5vbiA9IGZ1bmN0aW9uIChhY3Rpb24sIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ3Rhc2stbGlzdC11cGRhdGUnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybignd2FybmluZzogRXZlbnQgXCInICsgYWN0aW9uICsgJ1wiIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCJsaXN0LXVwZGF0ZVwiIGluc3RlYWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdldExpc3QoYWN0aW9uKS5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBjb3Mub2ZmID0gZnVuY3Rpb24gKGFjdGlvbiwgY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgbGlzdCA9IGdldExpc3QoYWN0aW9uKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayA9PT0gbGlzdFtpXSAmJiBsaXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29zLmVtaXQgPSBmdW5jdGlvbiAoYWN0aW9uLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIGxpc3QgPSBnZXRMaXN0KGFjdGlvbikubWFwKGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICByZXR1cm4gY2I7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxpc3RbaV0oZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbnZhciBFdmVudFByb3h5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaW5pdEV2ZW50KHRoaXMpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuaW5pdCA9IGluaXRFdmVudDtcclxubW9kdWxlLmV4cG9ydHMuRXZlbnRQcm94eSA9IEV2ZW50UHJveHk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/*!********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/task.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__f__) {var session = __webpack_require__(/*! ./session */ 35);\nvar util = __webpack_require__(/*! ./util */ 25);\n\nvar originApiMap = {};\nvar transferToTaskMethod = function transferToTaskMethod(apiMap, apiName) {\n  originApiMap[apiName] = apiMap[apiName];\n  apiMap[apiName] = function (params, callback) {\n    if (params.SkipTask) {\n      originApiMap[apiName].call(this, params, callback);\n    } else {\n      this._addTask(apiName, params, callback);\n    }\n  };\n};\n\nvar initTask = function initTask(cos) {\n\n  var queue = [];\n  var tasks = {};\n  var uploadingFileCount = 0;\n  var nextUploadIndex = 0;\n\n  // 接口返回简略的任务信息\n  var formatTask = function formatTask(task) {\n    var t = {\n      id: task.id,\n      Bucket: task.Bucket,\n      Region: task.Region,\n      Key: task.Key,\n      FilePath: task.FilePath,\n      state: task.state,\n      loaded: task.loaded,\n      size: task.size,\n      speed: task.speed,\n      percent: task.percent,\n      hashPercent: task.hashPercent,\n      error: task.error };\n\n    if (task.FilePath) t.FilePath = task.FilePath;\n    if (task._custom) t._custom = task._custom;\n    return t;\n  };\n\n  var emitListUpdate = function () {\n    var timer;\n    var emit = function emit() {\n      timer = 0;\n      cos.emit('task-list-update', { list: util.map(queue, formatTask) });\n      cos.emit('list-update', { list: util.map(queue, formatTask) });\n    };\n    return function () {\n      if (!timer) timer = setTimeout(emit);\n    };\n  }();\n\n  var clearQueue = function clearQueue() {\n    if (queue.length <= cos.options.UploadQueueSize) return;\n    for (var i = 0;\n    i < nextUploadIndex && // 小于当前操作的 index 才清理\n    i < queue.length && // 大于队列才清理\n    queue.length > cos.options.UploadQueueSize // 如果还太多，才继续清理\n    ;) {\n      var isActive = queue[i].state === 'waiting' || queue[i].state === 'checking' || queue[i].state === 'uploading';\n      if (!queue[i] || !isActive) {\n        tasks[queue[i].id] && delete tasks[queue[i].id];\n        queue.splice(i, 1);\n        nextUploadIndex--;\n      } else {\n        i++;\n      }\n    }\n    emitListUpdate();\n  };\n\n  var startNextTask = function startNextTask() {\n    // 检查是否允许增加执行进程\n    if (uploadingFileCount >= cos.options.FileParallelLimit) return;\n    // 跳过不可执行的任务\n    while (queue[nextUploadIndex] && queue[nextUploadIndex].state !== 'waiting') {nextUploadIndex++;}\n    // 检查是否已遍历结束\n    if (nextUploadIndex >= queue.length) return;\n    // 上传该遍历到的任务\n    var task = queue[nextUploadIndex];\n    nextUploadIndex++;\n    uploadingFileCount++;\n    task.state = 'checking';\n    task.params.onTaskStart && task.params.onTaskStart(formatTask(task));\n    !task.params.UploadData && (task.params.UploadData = {});\n    var apiParams = util.formatParams(task.api, task.params);\n    originApiMap[task.api].call(cos, apiParams, function (err, data) {\n      if (!cos._isRunningTask(task.id)) return;\n      if (task.state === 'checking' || task.state === 'uploading') {\n        task.state = err ? 'error' : 'success';\n        err && (task.error = err);\n        uploadingFileCount--;\n        emitListUpdate();\n        startNextTask();\n        task.callback && task.callback(err, data);\n        if (task.state === 'success') {\n          if (task.params) {\n            delete task.params.UploadData;\n            delete task.params.Body;\n            delete task.params;\n          }\n          delete task.callback;\n        }\n      }\n      clearQueue();\n    });\n    emitListUpdate();\n    // 异步执行下一个任务\n    setTimeout(startNextTask);\n  };\n\n  var killTask = function killTask(id, switchToState) {\n    var task = tasks[id];\n    if (!task) return;\n    var waiting = task && task.state === 'waiting';\n    var running = task && (task.state === 'checking' || task.state === 'uploading');\n    if (switchToState === 'canceled' && task.state !== 'canceled' ||\n    switchToState === 'paused' && waiting ||\n    switchToState === 'paused' && running) {\n      if (switchToState === 'paused' && task.params.Body && typeof task.params.Body.pipe === 'function') {\n        __f__(\"error\", 'stream not support pause', \" at cos-js-sdk-v5/src/task.js:124\");\n        return;\n      }\n      task.state = switchToState;\n      cos.emit('inner-kill-task', { TaskId: id, toState: switchToState });\n      try {\n        var UploadId = task && task.params && task.params.UploadData.UploadId;\n      } catch (e) {}\n      if (switchToState === 'canceled' && UploadId) session.removeUsing(UploadId);\n      emitListUpdate();\n      if (running) {\n        uploadingFileCount--;\n        startNextTask();\n      }\n      if (switchToState === 'canceled') {\n        if (task.params) {\n          delete task.params.UploadData;\n          delete task.params.Body;\n          delete task.params;\n        }\n        delete task.callback;\n      }\n    }\n    clearQueue();\n  };\n\n  cos._addTasks = function (taskList) {\n    util.each(taskList, function (task) {\n      cos._addTask(task.api, task.params, task.callback, true);\n    });\n    emitListUpdate();\n  };\n\n  var isTaskReadyWarning = true;\n  cos._addTask = function (api, params, callback, ignoreAddEvent) {\n\n    // 复制参数对象\n    params = util.formatParams(api, params);\n\n    // 生成 id\n    var id = util.uuid();\n    params.TaskId = id;\n    params.onTaskReady && params.onTaskReady(id);\n    if (params.TaskReady) {\n      params.TaskReady(id);\n      isTaskReadyWarning && __f__(\"warn\", 'warning: Param \"TaskReady\" has been deprecated. Please use \"onTaskReady\" instead.', \" at cos-js-sdk-v5/src/task.js:169\");\n      isTaskReadyWarning = false;\n    }\n\n    var task = {\n      // env\n      params: params,\n      callback: callback,\n      api: api,\n      index: queue.length,\n      // task\n      id: id,\n      Bucket: params.Bucket,\n      Region: params.Region,\n      Key: params.Key,\n      FilePath: params.FilePath || '',\n      state: 'waiting',\n      loaded: 0,\n      size: 0,\n      speed: 0,\n      percent: 0,\n      hashPercent: 0,\n      error: null,\n      _custom: params._custom };\n\n    var onHashProgress = params.onHashProgress;\n    params.onHashProgress = function (info) {\n      if (!cos._isRunningTask(task.id)) return;\n      task.hashPercent = info.percent;\n      onHashProgress && onHashProgress(info);\n      emitListUpdate();\n    };\n    var onProgress = params.onProgress;\n    params.onProgress = function (info) {\n      if (!cos._isRunningTask(task.id)) return;\n      task.state === 'checking' && (task.state = 'uploading');\n      task.loaded = info.loaded;\n      task.speed = info.speed;\n      task.percent = info.percent;\n      onProgress && onProgress(info);\n      emitListUpdate();\n    };\n\n    // 异步获取 filesize\n    util.getFileSize(api, params, function (err, size) {\n      // 开始处理上传\n      if (err) {// 如果获取大小出错，不加入队列\n        callback(err);\n        return;\n      }\n      // 获取完文件大小再把任务加入队列\n      tasks[id] = task;\n      queue.push(task);\n      task.size = size;\n      !ignoreAddEvent && emitListUpdate();\n      startNextTask();\n      clearQueue();\n    });\n    return id;\n  };\n  cos._isRunningTask = function (id) {\n    var task = tasks[id];\n    return !!(task && (task.state === 'checking' || task.state === 'uploading'));\n  };\n  cos.getTaskList = function () {\n    return util.map(queue, formatTask);\n  };\n  cos.cancelTask = function (id) {\n    killTask(id, 'canceled');\n  };\n  cos.pauseTask = function (id) {\n    killTask(id, 'paused');\n  };\n  cos.restartTask = function (id) {\n    var task = tasks[id];\n    if (task && (task.state === 'paused' || task.state === 'error')) {\n      task.state = 'waiting';\n      emitListUpdate();\n      nextUploadIndex = Math.min(nextUploadIndex, task.index);\n      startNextTask();\n    }\n  };\n  cos.isUploadRunning = function () {\n    return uploadingFileCount || nextUploadIndex < queue.length;\n  };\n\n};\n\nmodule.exports.transferToTaskMethod = transferToTaskMethod;\nmodule.exports.init = initTask;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/*!***********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/session.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var util = __webpack_require__(/*! ./util */ 25);\n\n// 按照文件特征值，缓存 UploadId\nvar cacheKey = 'cos_sdk_upload_cache';\nvar expires = 30 * 24 * 3600;\nvar cache;\nvar timer;\n\nvar init = function init() {\n  if (cache) return;\n  cache = JSON.parse(localStorage.getItem(cacheKey) || '[]') || [];\n  // 清理太老旧的数据\n  var changed = false;\n  var now = Math.round(Date.now() / 1000);\n  for (var i = cache.length - 1; i >= 0; i--) {\n    var mtime = cache[i][2];\n    if (!mtime || mtime + expires < now) {\n      cache.splice(i, 1);\n      changed = true;\n    }\n  }\n  changed && localStorage.setItem(cacheKey, JSON.stringify(cache));\n};\n\n// 把缓存存到本地\nvar save = function save() {\n  if (timer) return;\n  timer = setTimeout(function () {\n    localStorage.setItem(cacheKey, JSON.stringify(cache));\n    timer = null;\n  }, 400);\n};\n\nvar mod = {\n  using: {},\n  // 标记 UploadId 正在使用\n  setUsing: function setUsing(uuid) {\n    mod.using[uuid] = true;\n  },\n  // 标记 UploadId 已经没在使用\n  removeUsing: function removeUsing(uuid) {\n    delete mod.using[uuid];\n  },\n  // 用上传参数生成哈希值\n  getFileId: function getFileId(file, ChunkSize, Bucket, Key) {\n    if (file.name && file.size && file.lastModifiedDate && ChunkSize) {\n      return util.md5([file.name, file.size, file.lastModifiedDate, ChunkSize, Bucket, Key].join('::'));\n    } else {\n      return null;\n    }\n  },\n  // 获取文件对应的 UploadId 列表\n  getUploadIdList: function getUploadIdList(uuid) {\n    if (!uuid) return null;\n    init();\n    var list = [];\n    for (var i = 0; i < cache.length; i++) {\n      if (cache[i][0] === uuid)\n      list.push(cache[i][1]);\n    }\n    return list.length ? list : null;\n  },\n  // 缓存 UploadId\n  saveUploadId: function saveUploadId(uuid, UploadId, limit) {\n    init();\n    if (!uuid) return;\n    // 清理没用的 UploadId\n    for (var i = cache.length - 1; i >= 0; i--) {\n      var item = cache[i];\n      if (item[0] === uuid && item[1] === UploadId) {\n        cache.splice(i, 1);\n      }\n    }\n    cache.unshift([uuid, UploadId, Math.round(Date.now() / 1000)]);\n    if (cache.length > limit) cache.splice(limit);\n    save();\n  },\n  // UploadId 已用完，移除掉\n  removeUploadId: function removeUploadId(UploadId) {\n    init();\n    delete mod.using[UploadId];\n    for (var i = cache.length - 1; i >= 0; i--) {\n      if (cache[i][1] === UploadId) cache.splice(i, 1);\n    }\n    save();\n  } };\n\n\nmodule.exports = mod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/*!********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/base.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__f__) {var REQUEST = __webpack_require__(/*! ../lib/request */ 37);\nvar util = __webpack_require__(/*! ./util */ 25);\n\n\n// Bucket 相关\n\n/**\r\n * 获取用户的 bucket 列表\r\n * @param  {Object}  params         回调函数，必须，下面为参数列表\r\n * 无特殊参数\r\n * @param  {Function}  callback     回调函数，必须\r\n */\nfunction getService(params, callback) {\n\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n  var protocol = this.options.Protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\n  var domain = this.options.ServiceDomain;\n  var region = params.Region;\n  if (domain) {\n    domain = domain.replace(/\\{Region\\}/ig, region || '').replace(/\\{.*?\\}/ig, '');\n    if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\n      domain = protocol + '//' + domain;\n    }\n    if (domain.slice(-1) === '/') {\n      domain = domain.slice(0, -1);\n    }\n  } else if (region) {\n    domain = protocol + '//cos.' + region + '.myqcloud.com';\n  } else {\n    domain = protocol + '//service.cos.myqcloud.com';\n  }\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetService',\n    url: domain,\n    method: 'GET',\n    headers: params.Headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var buckets = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Buckets &&\n    data.ListAllMyBucketsResult.Buckets.Bucket || [];\n    buckets = util.isArray(buckets) ? buckets : [buckets];\n    var owner = data && data.ListAllMyBucketsResult && data.ListAllMyBucketsResult.Owner || {};\n    callback(null, {\n      Buckets: buckets,\n      Owner: owner,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 创建 Bucket，并初始化访问权限\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\r\n   *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\r\n   *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\r\n   *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   *     @return  {String}  data.Location             操作地址\r\n   */\nfunction putBucket(params, callback) {\n\n  var self = this;\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucket',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var url = getUrl({\n      protocol: self.options.Protocol,\n      domain: self.options.Domain,\n      bucket: params.Bucket,\n      region: params.Region,\n      isLocation: true });\n\n    callback(null, {\n      Location: url,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 查看是否存在该Bucket，是否有权限访问\r\n   * @param  {Object}  params                     参数对象，必须\r\n   *     @param  {String}  params.Bucket          Bucket名称，必须\r\n   *     @param  {String}  params.Region          地域名称，必须\r\n   * @param  {Function}  callback                 回调函数，必须\r\n   * @return  {Object}  err                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                      返回的数据\r\n   *     @return  {Boolean}  data.BucketExist     Bucket是否存在\r\n   *     @return  {Boolean}  data.BucketAuth      是否有 Bucket 的访问权限\r\n   */\nfunction headBucket(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:HeadBucket',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    method: 'HEAD' },\n  function (err, data) {\n    callback(err, data);\n  });\n}\n\n/**\r\n   * 获取 Bucket 下的 object 列表\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   *     @param  {String}  params.Prefix              前缀匹配，用来规定返回的文件前缀地址，非必须\r\n   *     @param  {String}  params.Delimiter           定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，非必须\r\n   *     @param  {String}  params.Marker              默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\r\n   *     @param  {String}  params.MaxKeys             单次返回最大的条目数量，默认1000，非必须\r\n   *     @param  {String}  params.EncodingType        规定返回值的编码方式，非必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   *     @return  {Object}  data.ListBucketResult     返回的 object 列表信息\r\n   */\nfunction getBucket(params, callback) {\n  var reqParams = {};\n  reqParams['prefix'] = params['Prefix'] || '';\n  reqParams['delimiter'] = params['Delimiter'];\n  reqParams['marker'] = params['Marker'];\n  reqParams['max-keys'] = params['MaxKeys'];\n  reqParams['encoding-type'] = params['EncodingType'];\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucket',\n    ResourceKey: reqParams['prefix'],\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    qs: reqParams },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var ListBucketResult = data.ListBucketResult || {};\n    var Contents = ListBucketResult.Contents || [];\n    var CommonPrefixes = ListBucketResult.CommonPrefixes || [];\n\n    Contents = util.isArray(Contents) ? Contents : [Contents];\n    CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];\n\n    var result = util.clone(ListBucketResult);\n    util.extend(result, {\n      Contents: Contents,\n      CommonPrefixes: CommonPrefixes,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 删除 Bucket\r\n   * @param  {Object}  params                 参数对象，必须\r\n   *     @param  {String}  params.Bucket      Bucket名称，必须\r\n   *     @param  {String}  params.Region      地域名称，必须\r\n   * @param  {Function}  callback             回调函数，必须\r\n   * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                  返回的数据\r\n   *     @return  {String}  data.Location     操作地址\r\n   */\nfunction deleteBucket(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucket',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    method: 'DELETE' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 设置 Bucket 的 权限列表\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   *     @param  {String}  params.ACL                 用户自定义文件权限，可以设置：private，public-read；默认值：private，非必须\r\n   *     @param  {String}  params.GrantRead           赋予被授权者读的权限，格式x-cos-grant-read: uin=\" \",uin=\" \"，非必须\r\n   *     @param  {String}  params.GrantWrite          赋予被授权者写的权限，格式x-cos-grant-write: uin=\" \",uin=\" \"，非必须\r\n   *     @param  {String}  params.GrantFullControl    赋予被授权者读写权限，格式x-cos-grant-full-control: uin=\" \",uin=\" \"，非必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   */\nfunction putBucketAcl(params, callback) {\n  var headers = params.Headers;\n\n  var xml = '';\n  if (params['AccessControlPolicy']) {\n    var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\n    var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\n    Grants = util.isArray(Grants) ? Grants : [Grants];\n    delete AccessControlPolicy.Grant;\n    delete AccessControlPolicy.Grants;\n    AccessControlPolicy.AccessControlList = { Grant: Grants };\n    xml = util.json2xml({ AccessControlPolicy: AccessControlPolicy });\n\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n  }\n\n  // Grant Header 去重\n  util.each(headers, function (val, key) {\n    if (key.indexOf('x-cos-grant-') === 0) {\n      headers[key] = uniqGrant(headers[key]);\n    }\n  });\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketACL',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: headers,\n    action: 'acl',\n    body: xml },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的 权限列表\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   *     @return  {Object}  data.AccessControlPolicy  访问权限信息\r\n   */\nfunction getBucketAcl(params, callback) {\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketACL',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'acl' },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var AccessControlPolicy = data.AccessControlPolicy || {};\n    var Owner = AccessControlPolicy.Owner || {};\n    var Grant = AccessControlPolicy.AccessControlList.Grant || [];\n    Grant = util.isArray(Grant) ? Grant : [Grant];\n    var result = decodeAcl(AccessControlPolicy);\n    if (data.headers && data.headers['x-cos-acl']) {\n      result.ACL = data.headers['x-cos-acl'];\n    }\n    result = util.extend(result, {\n      Owner: Owner,\n      Grants: Grant,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 设置 Bucket 的 跨域设置\r\n   * @param  {Object}  params                             参数对象，必须\r\n   *     @param  {String}  params.Bucket                  Bucket名称，必须\r\n   *     @param  {String}  params.Region                  地域名称，必须\r\n   *     @param  {Object}  params.CORSConfiguration       相关的跨域设置，必须\r\n   * @param  {Array}  params.CORSConfiguration.CORSRules  对应的跨域规则\r\n   * @param  {Function}  callback                         回调函数，必须\r\n   * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                              返回的数据\r\n   */\nfunction putBucketCors(params, callback) {\n\n  var CORSConfiguration = params['CORSConfiguration'] || {};\n  var CORSRules = CORSConfiguration['CORSRules'] || params['CORSRules'] || [];\n  CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\n  util.each(CORSRules, function (rule) {\n    util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key, k) {\n      var sKey = key + 's';\n      var val = rule[sKey] || rule[key] || [];\n      delete rule[sKey];\n      rule[key] = util.isArray(val) ? val : [val];\n    });\n  });\n\n  var xml = util.json2xml({ CORSConfiguration: { CORSRule: CORSRules } });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketCORS',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'cors',\n    headers: headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的 跨域设置\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   *     @return  {Object}  data.CORSRules            Bucket的跨域设置\r\n   */\nfunction getBucketCors(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketCORS',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'cors' },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchCORSConfiguration') {\n        var result = {\n          CORSRules: [],\n          statusCode: err.statusCode };\n\n        err.headers && (result.headers = err.headers);\n        callback(null, result);\n      } else {\n        callback(err);\n      }\n      return;\n    }\n    var CORSConfiguration = data.CORSConfiguration || {};\n    var CORSRules = CORSConfiguration.CORSRules || CORSConfiguration.CORSRule || [];\n    CORSRules = util.clone(util.isArray(CORSRules) ? CORSRules : [CORSRules]);\n\n    util.each(CORSRules, function (rule) {\n      util.each(['AllowedOrigin', 'AllowedHeader', 'AllowedMethod', 'ExposeHeader'], function (key, j) {\n        var sKey = key + 's';\n        var val = rule[sKey] || rule[key] || [];\n        delete rule[key];\n        rule[sKey] = util.isArray(val) ? val : [val];\n      });\n    });\n\n    callback(null, {\n      CORSRules: CORSRules,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 删除 Bucket 的 跨域设置\r\n   * @param  {Object}  params                 参数对象，必须\r\n   *     @param  {String}  params.Bucket      Bucket名称，必须\r\n   *     @param  {String}  params.Region      地域名称，必须\r\n   * @param  {Function}  callback             回调函数，必须\r\n   * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                  返回的数据\r\n   */\nfunction deleteBucketCors(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketCORS',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'cors' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode || err.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的 地域信息\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据，包含地域信息 LocationConstraint\r\n   */\nfunction getBucketLocation(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketLocation',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'location' },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, data);\n  });\n}\n\nfunction putBucketPolicy(params, callback) {\n  var Policy = params['Policy'];\n  var PolicyStr = Policy;\n  try {\n    if (typeof Policy === 'string') {\n      Policy = JSON.parse(PolicyStr);\n    } else {\n      PolicyStr = JSON.stringify(Policy);\n    }\n  } catch (e) {\n    callback({ error: 'Policy format error' });\n  }\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/json';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(PolicyStr));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketPolicy',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    action: 'policy',\n    body: util.isBrowser ? PolicyStr : Policy,\n    headers: headers,\n    json: true },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的读取权限策略\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据\r\n   */\nfunction getBucketPolicy(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketPolicy',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'policy',\n    rawBody: true },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode && err.statusCode === 403) {\n        return callback({ ErrorStatus: 'Access Denied' });\n      }\n      if (err.statusCode && err.statusCode === 405) {\n        return callback({ ErrorStatus: 'Method Not Allowed' });\n      }\n      if (err.statusCode && err.statusCode === 404) {\n        return callback({ ErrorStatus: 'Policy Not Found' });\n      }\n      return callback(err);\n    }\n    var Policy = {};\n    try {\n      Policy = JSON.parse(data.body);\n    } catch (e) {\n    }\n    callback(null, {\n      Policy: Policy,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 删除 Bucket 的 跨域设置\r\n   * @param  {Object}  params                 参数对象，必须\r\n   *     @param  {String}  params.Bucket      Bucket名称，必须\r\n   *     @param  {String}  params.Region      地域名称，必须\r\n   * @param  {Function}  callback             回调函数，必须\r\n   * @return  {Object}  err                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                  返回的数据\r\n   */\nfunction deleteBucketPolicy(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketPolicy',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'policy' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode || err.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 设置 Bucket 的标签\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   *     @param  {Array}   params.TagSet  标签设置，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据\r\n   */\nfunction putBucketTagging(params, callback) {\n\n  var Tagging = params['Tagging'] || {};\n  var Tags = Tagging.TagSet || Tagging.Tags || params['Tags'] || [];\n  Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n  var xml = util.json2xml({ Tagging: { TagSet: { Tag: Tags } } });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketTagging',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'tagging',\n    headers: headers },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的标签设置\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据\r\n   */\nfunction getBucketTagging(params, callback) {\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketTagging',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'tagging' },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode === 404 && err.error && (err.error === \"Not Found\" || err.error.Code === 'NoSuchTagSet')) {\n        var result = {\n          Tags: [],\n          statusCode: err.statusCode };\n\n        err.headers && (result.headers = err.headers);\n        callback(null, result);\n      } else {\n        callback(err);\n      }\n      return;\n    }\n    var Tags = [];\n    try {\n      Tags = data.Tagging.TagSet.Tag || [];\n    } catch (e) {\n    }\n    Tags = util.clone(util.isArray(Tags) ? Tags : [Tags]);\n    callback(null, {\n      Tags: Tags,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 删除 Bucket 的 标签设置\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回的数据\r\n   */\nfunction deleteBucketTagging(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketTagging',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'tagging' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction putBucketLifecycle(params, callback) {\n\n  var LifecycleConfiguration = params['LifecycleConfiguration'] || {};\n  var Rules = LifecycleConfiguration.Rules || params.Rules || [];\n  Rules = util.clone(Rules);\n  var xml = util.json2xml({ LifecycleConfiguration: { Rule: Rules } });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketLifecycle',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'lifecycle',\n    headers: headers },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction getBucketLifecycle(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketLifecycle',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'lifecycle' },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode === 404 && err.error && err.error.Code === 'NoSuchLifecycleConfiguration') {\n        var result = {\n          Rules: [],\n          statusCode: err.statusCode };\n\n        err.headers && (result.headers = err.headers);\n        callback(null, result);\n      } else {\n        callback(err);\n      }\n      return;\n    }\n    var Rules = [];\n    try {\n      Rules = data.LifecycleConfiguration.Rule || [];\n    } catch (e) {\n    }\n    Rules = util.clone(util.isArray(Rules) ? Rules : [Rules]);\n    callback(null, {\n      Rules: Rules,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction deleteBucketLifecycle(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketLifecycle',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'lifecycle' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction putBucketVersioning(params, callback) {\n\n  if (!params['VersioningConfiguration']) {\n    callback({ error: 'missing param VersioningConfiguration' });\n    return;\n  }\n  var VersioningConfiguration = params['VersioningConfiguration'] || {};\n  var xml = util.json2xml({ VersioningConfiguration: VersioningConfiguration });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketVersioning',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'versioning',\n    headers: headers },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction getBucketVersioning(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketVersioning',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'versioning' },\n  function (err, data) {\n    if (!err) {\n      !data.VersioningConfiguration && (data.VersioningConfiguration = {});\n    }\n    callback(err, data);\n  });\n}\n\nfunction putBucketReplication(params, callback) {\n  var ReplicationConfiguration = util.clone(params.ReplicationConfiguration);\n  var xml = util.json2xml({ ReplicationConfiguration: ReplicationConfiguration });\n  xml = xml.replace(/<(\\/?)Rules>/ig, '<$1Rule>');\n  xml = xml.replace(/<(\\/?)Tags>/ig, '<$1Tag>');\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketReplication',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'replication',\n    headers: headers },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\nfunction getBucketReplication(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketReplication',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'replication' },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode === 404 && err.error && (err.error === 'Not Found' || err.error.Code === 'ReplicationConfigurationnotFoundError')) {\n        var result = {\n          ReplicationConfiguration: { Rules: [] },\n          statusCode: err.statusCode };\n\n        err.headers && (result.headers = err.headers);\n        callback(null, result);\n      } else {\n        callback(err);\n      }\n      return;\n    }\n    if (!err) {\n      !data.ReplicationConfiguration && (data.ReplicationConfiguration = {});\n    }\n    if (data.ReplicationConfiguration.Rule) {\n      data.ReplicationConfiguration.Rules = data.ReplicationConfiguration.Rule;\n      delete data.ReplicationConfiguration.Rule;\n    }\n    callback(err, data);\n  });\n}\n\nfunction deleteBucketReplication(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketReplication',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'replication' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 设置 Bucket 静态网站配置信息\r\n   * @param  {Object}  params                                                 参数对象，必须\r\n   *     @param  {String}  params.Bucket                                      Bucket名称，必须\r\n   *     @param  {String}  params.Region                                      地域名称，必须\r\n   *     @param  {Object}  params.WebsiteConfiguration                        地域名称，必须\r\n   *         @param  {Object}   WebsiteConfiguration.IndexDocument            索引文档，必须\r\n   *         @param  {Object}   WebsiteConfiguration.ErrorDocument            错误文档，非必须\r\n   *         @param  {Object}   WebsiteConfiguration.RedirectAllRequestsTo    重定向所有请求，非必须\r\n   *         @param  {Array}   params.RoutingRules                            重定向规则，非必须\r\n   * @param  {Function}  callback                                             回调函数，必须\r\n   * @return  {Object}  err                                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                                                  返回数据\r\n   */\nfunction putBucketWebsite(params, callback) {\n\n  if (!params['WebsiteConfiguration']) {\n    callback({ error: 'missing param WebsiteConfiguration' });\n    return;\n  }\n\n  var WebsiteConfiguration = util.clone(params['WebsiteConfiguration'] || {});\n  var RoutingRules = WebsiteConfiguration['RoutingRules'] || WebsiteConfiguration['RoutingRule'] || [];\n  RoutingRules = util.isArray(RoutingRules) ? RoutingRules : [RoutingRules];\n  delete WebsiteConfiguration.RoutingRule;\n  delete WebsiteConfiguration.RoutingRules;\n  RoutingRules.length > 0 && (WebsiteConfiguration.RoutingRules = { RoutingRule: RoutingRules });\n  var xml = util.json2xml({ WebsiteConfiguration: WebsiteConfiguration });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutBucketWebsite',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'website',\n    headers: headers },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 Bucket 的静态网站配置信息\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据\r\n   */\nfunction getBucketWebsite(params, callback) {\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketWebsite',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: params.Headers,\n    action: 'website' },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode === 404 && err.error.Code === 'NoSuchWebsiteConfiguration') {\n        var result = {\n          WebsiteConfiguration: {},\n          statusCode: err.statusCode };\n\n        err.headers && (result.headers = err.headers);\n        callback(null, result);\n      } else {\n        callback(err);\n      }\n      return;\n    }\n\n    var WebsiteConfiguration = data.WebsiteConfiguration || {};\n    if (WebsiteConfiguration['RoutingRules']) {\n      var RoutingRules = util.clone(WebsiteConfiguration['RoutingRules'].RoutingRule || []);\n      RoutingRules = util.makeArray(RoutingRules);\n      WebsiteConfiguration.RoutingRules = RoutingRules;\n    }\n\n    callback(null, {\n      WebsiteConfiguration: WebsiteConfiguration,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 删除 Bucket 的静态网站配置\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回数据\r\n   */\nfunction deleteBucketWebsite(params, callback) {\n\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteBucketWebsite',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    action: 'website' },\n  function (err, data) {\n    if (err && err.statusCode === 204) {\n      return callback(null, { statusCode: err.statusCode });\n    } else if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n// Object 相关\n\n/**\r\n * 取回对应Object的元数据，Head的权限与Get的权限一致\r\n * @param  {Object}  params                         参数对象，必须\r\n *     @param  {String}  params.Bucket              Bucket名称，必须\r\n *     @param  {String}  params.Region              地域名称，必须\r\n *     @param  {String}  params.Key                 文件名称，必须\r\n *     @param  {String}  params.IfModifiedSince     当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\r\n * @param  {Function}  callback                     回调函数，必须\r\n * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                          为指定 object 的元数据，如果设置了 IfModifiedSince ，且文件未修改，则返回一个对象，NotModified 属性为 true\r\n *     @return  {Boolean}  data.NotModified         是否在 IfModifiedSince 时间点之后未修改该 object，则为 true\r\n */\nfunction headObject(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:HeadObject',\n    method: 'HEAD',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    VersionId: params.VersionId,\n    headers: params.Headers },\n  function (err, data) {\n    if (err) {\n      var statusCode = err.statusCode;\n      if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\n        return callback(null, {\n          NotModified: true,\n          statusCode: statusCode });\n\n      }\n      return callback(err);\n    }\n    if (data.headers && data.headers.etag) {\n      data.ETag = data.headers && data.headers.etag;\n    }\n    callback(null, data);\n  });\n}\n\n\nfunction listObjectVersions(params, callback) {\n  var reqParams = {};\n  reqParams['prefix'] = params['Prefix'] || '';\n  reqParams['delimiter'] = params['Delimiter'];\n  reqParams['key-marker'] = params['KeyMarker'];\n  reqParams['version-id-marker'] = params['VersionIdMarker'];\n  reqParams['max-keys'] = params['MaxKeys'];\n  reqParams['encoding-type'] = params['EncodingType'];\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetBucketObjectVersions',\n    ResourceKey: reqParams['prefix'],\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    qs: reqParams,\n    action: 'versions' },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var ListVersionsResult = data.ListVersionsResult || {};\n    var DeleteMarkers = ListVersionsResult.DeleteMarker || [];\n    DeleteMarkers = util.isArray(DeleteMarkers) ? DeleteMarkers : [DeleteMarkers];\n    var Versions = ListVersionsResult.Version || [];\n    Versions = util.isArray(Versions) ? Versions : [Versions];\n\n    var result = util.clone(ListVersionsResult);\n    delete result.DeleteMarker;\n    delete result.Version;\n    util.extend(result, {\n      DeleteMarkers: DeleteMarkers,\n      Versions: Versions,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 下载 object\r\n   * @param  {Object}  params                                 参数对象，必须\r\n   *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n   *     @param  {String}  params.Region                      地域名称，必须\r\n   *     @param  {String}  params.Key                         文件名称，必须\r\n   *     @param  {WriteStream}  params.Output                 文件写入流，非必须\r\n   *     @param  {String}  params.IfModifiedSince             当Object在指定时间后被修改，则返回对应Object元信息，否则返回304，非必须\r\n   *     @param  {String}  params.IfUnmodifiedSince           如果文件修改时间早于或等于指定时间，才返回文件内容。否则返回 412 (precondition failed)，非必须\r\n   *     @param  {String}  params.IfMatch                     当 ETag 与指定的内容一致，才返回文件。否则返回 412 (precondition failed)，非必须\r\n   *     @param  {String}  params.IfNoneMatch                 当 ETag 与指定的内容不一致，才返回文件。否则返回304 (not modified)，非必须\r\n   *     @param  {String}  params.ResponseContentType         设置返回头部中的 Content-Type 参数，非必须\r\n   *     @param  {String}  params.ResponseContentLanguage     设置返回头部中的 Content-Language 参数，非必须\r\n   *     @param  {String}  params.ResponseExpires             设置返回头部中的 Content-Expires 参数，非必须\r\n   *     @param  {String}  params.ResponseCacheControl        设置返回头部中的 Cache-Control 参数，非必须\r\n   *     @param  {String}  params.ResponseContentDisposition  设置返回头部中的 Content-Disposition 参数，非必须\r\n   *     @param  {String}  params.ResponseContentEncoding     设置返回头部中的 Content-Encoding 参数，非必须\r\n   * @param  {Function}  callback                             回调函数，必须\r\n   * @param  {Object}  err                                    请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @param  {Object}  data                                   为对应的 object 数据，包括 body 和 headers\r\n   */\nfunction getObject(params, callback) {\n  var reqParams = {};\n\n  reqParams['response-content-type'] = params['ResponseContentType'];\n  reqParams['response-content-language'] = params['ResponseContentLanguage'];\n  reqParams['response-expires'] = params['ResponseExpires'];\n  reqParams['response-cache-control'] = params['ResponseCacheControl'];\n  reqParams['response-content-disposition'] = params['ResponseContentDisposition'];\n  reqParams['response-content-encoding'] = params['ResponseContentEncoding'];\n\n  // 如果用户自己传入了 output\n  submitRequest.call(this, {\n    Action: 'name/cos:GetObject',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    VersionId: params.VersionId,\n    headers: params.Headers,\n    qs: reqParams,\n    rawBody: true },\n  function (err, data) {\n    if (err) {\n      var statusCode = err.statusCode;\n      if (params.Headers['If-Modified-Since'] && statusCode && statusCode === 304) {\n        return callback(null, {\n          NotModified: true });\n\n      }\n      return callback(err);\n    }\n    var result = {};\n    result.Body = data.body;\n    if (data.headers && data.headers.etag) {\n      result.ETag = data.headers && data.headers.etag;\n    }\n    util.extend(result, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n\n}\n\n/**\r\n   * 上传 object\r\n   * @param  {Object} params                                          参数对象，必须\r\n   *     @param  {String}  params.Bucket                              Bucket名称，必须\r\n   *     @param  {String}  params.Region                              地域名称，必须\r\n   *     @param  {String}  params.Key                                 文件名称，必须\r\n   *     @param  {File || Blob || String}  params.Body                上传文件对象或字符串，必须\r\n   *     @param  {String}  params.CacheControl                        RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\r\n   *     @param  {String}  params.ContentDisposition                  RFC 2616 中定义的文件名称，将作为 Object 元数据保存，非必须\r\n   *     @param  {String}  params.ContentEncoding                     RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\r\n   *     @param  {String}  params.ContentLength                       RFC 2616 中定义的 HTTP 请求内容长度（字节），必须\r\n   *     @param  {String}  params.ContentType                         RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\r\n   *     @param  {String}  params.Expect                              当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\r\n   *     @param  {String}  params.Expires                             RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\r\n   *     @param  {String}  params.ACL                                 允许用户自定义文件权限，有效值：private | public-read，非必须\r\n   *     @param  {String}  params.GrantRead                           赋予被授权者读取对象的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n   *     @param  {String}  params.GrantReadAcp                        赋予被授权者读取对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n   *     @param  {String}  params.GrantWriteAcp                       赋予被授权者写入对象的访问控制列表（ACL）的权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n   *     @param  {String}  params.GrantFullControl                    赋予被授权者操作对象的所有权限，格式：id=\"[OwnerUin]\"，可使用半角逗号（,）分隔多组被授权者，非必须\r\n   *     @param  {String}  params.StorageClass                        设置对象的存储级别，枚举值：STANDARD、STANDARD_IA、ARCHIVE，默认值：STANDARD，非必须\r\n   *     @param  {String}  params.x-cos-meta-*                        允许用户自定义的头部信息，将作为对象的元数据保存。大小限制2KB，非必须\r\n   *     @param  {String}  params.ContentSha1                         RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验，非必须\r\n   *     @param  {String}  params.ServerSideEncryption                支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n   *     @param  {Function}  params.onProgress                        上传进度回调函数\r\n   * @param  {Function}  callback                                     回调函数，必须\r\n   * @return  {Object}  err                                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                                          为对应的 object 数据\r\n   *     @return  {String}  data.ETag                                 为对应上传文件的 ETag 值\r\n   */\nfunction putObject(params, callback) {\n  var self = this;\n  var FileSize = params.ContentLength;\n  var onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n  // 特殊处理 Cache-Control\n  var headers = params.Headers;\n  !headers['Cache-Control'] && (headers['Cache-Control'] = '');\n\n  // 获取 File 或 Blob 的 type 属性，如果有，作为文件 Content-Type\n  var ContentType = headers['Content-Type'] || params.Body && params.Body.type;\n  !headers['Content-Type'] && ContentType && (headers['Content-Type'] = ContentType);\n\n  var needCalcMd5 = params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5 || self.options.UploadCheckContentMd5;\n  util.getBodyMd5(needCalcMd5, params.Body, function (md5) {\n    if (md5) {\n      if (self.options.UploadCheckContentMd5) params.Headers['Content-MD5'] = util.binaryBase64(md5);\n      if (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5) params.Headers['x-cos-meta-md5'] = md5;\n    }\n\n    if (params.ContentLength !== undefined) {\n      params.Headers['Content-Length'] = params.ContentLength;\n    }\n    onProgress(null, true); // 任务状态开始 uploading\n    submitRequest.call(self, {\n      Action: 'name/cos:PutObject',\n      TaskId: params.TaskId,\n      method: 'PUT',\n      Bucket: params.Bucket,\n      Region: params.Region,\n      Key: params.Key,\n      headers: params.Headers,\n      body: params.Body,\n      onProgress: onProgress },\n    function (err, data) {\n      if (err) {\n        onProgress(null, true);\n        return callback(err);\n      }\n      onProgress({ loaded: FileSize, total: FileSize }, true);\n      if (data) {\n        var url = getUrl({\n          ForcePathStyle: self.options.ForcePathStyle,\n          protocol: self.options.Protocol,\n          domain: self.options.Domain,\n          bucket: params.Bucket,\n          region: params.Region,\n          object: params.Key });\n\n        url = url.substr(url.indexOf('://') + 3);\n        var result = {\n          Location: url,\n          statusCode: data.statusCode,\n          headers: data.headers };\n\n        if (data.headers && data.headers.etag) {\n          result.ETag = data.headers.etag;\n        }\n        return callback(null, result);\n      }\n      callback(null, data);\n    });\n  }, params.onHashProgress);\n}\n\n/**\r\n   * 删除 object\r\n   * @param  {Object}  params                     参数对象，必须\r\n   *     @param  {String}  params.Bucket          Bucket名称，必须\r\n   *     @param  {String}  params.Region          地域名称，必须\r\n   *     @param  {String}  params.Key             object名称，必须\r\n   * @param  {Function}  callback                 回调函数，必须\r\n   * @param  {Object}  err                        请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @param  {Object}  data                       删除操作成功之后返回的数据\r\n   */\nfunction deleteObject(params, callback) {\n  submitRequest.call(this, {\n    Action: 'name/cos:DeleteObject',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: params.Headers,\n    VersionId: params.VersionId },\n  function (err, data) {\n    if (err) {\n      var statusCode = err.statusCode;\n      if (statusCode && statusCode === 204) {\n        return callback(null, { statusCode: statusCode });\n      } else if (statusCode && statusCode === 404) {\n        return callback(null, { BucketNotFound: true, statusCode: statusCode });\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取 object 的 权限列表\r\n   * @param  {Object}  params                         参数对象，必须\r\n   *     @param  {String}  params.Bucket              Bucket名称，必须\r\n   *     @param  {String}  params.Region              地域名称，必须\r\n   *     @param  {String}  params.Key                 object名称，必须\r\n   * @param  {Function}  callback                     回调函数，必须\r\n   * @return  {Object}  err                           请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                          返回的数据\r\n   *     @return  {Object}  data.AccessControlPolicy  权限列表\r\n   */\nfunction getObjectAcl(params, callback) {\n\n  submitRequest.call(this, {\n    Action: 'name/cos:GetObjectACL',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: params.Headers,\n    action: 'acl' },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var AccessControlPolicy = data.AccessControlPolicy || {};\n    var Owner = AccessControlPolicy.Owner || {};\n    var Grant = AccessControlPolicy.AccessControlList && AccessControlPolicy.AccessControlList.Grant || [];\n    Grant = util.isArray(Grant) ? Grant : [Grant];\n    var result = decodeAcl(AccessControlPolicy);\n    if (data.headers && data.headers['x-cos-acl']) {\n      result.ACL = data.headers['x-cos-acl'];\n    }\n    result = util.extend(result, {\n      Owner: Owner,\n      Grants: Grant,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 设置 object 的 权限列表\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   *     @param  {String}  params.Key     object名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回的数据\r\n   */\nfunction putObjectAcl(params, callback) {\n  var headers = params.Headers;\n\n  var xml = '';\n  if (params['AccessControlPolicy']) {\n    var AccessControlPolicy = util.clone(params['AccessControlPolicy'] || {});\n    var Grants = AccessControlPolicy.Grants || AccessControlPolicy.Grant;\n    Grants = util.isArray(Grants) ? Grants : [Grants];\n    delete AccessControlPolicy.Grant;\n    delete AccessControlPolicy.Grants;\n    AccessControlPolicy.AccessControlList = { Grant: Grants };\n    xml = util.json2xml({ AccessControlPolicy: AccessControlPolicy });\n\n    headers['Content-Type'] = 'application/xml';\n    headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n  }\n\n  // Grant Header 去重\n  util.each(headers, function (val, key) {\n    if (key.indexOf('x-cos-grant-') === 0) {\n      headers[key] = uniqGrant(headers[key]);\n    }\n  });\n\n  submitRequest.call(this, {\n    Action: 'name/cos:PutObjectACL',\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    action: 'acl',\n    headers: headers,\n    body: xml },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * Options Object请求实现跨域访问的预请求。即发出一个 OPTIONS 请求给服务器以确认是否可以进行跨域操作。\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Bucket  Bucket名称，必须\r\n   *     @param  {String}  params.Region  地域名称，必须\r\n   *     @param  {String}  params.Key     object名称，必须\r\n   * @param  {Function}  callback         回调函数，必须\r\n   * @return  {Object}  err               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data              返回的数据\r\n   */\nfunction optionsObject(params, callback) {\n\n  var headers = params.Headers;\n  headers['Origin'] = params['Origin'];\n  headers['Access-Control-Request-Method'] = params['AccessControlRequestMethod'];\n  headers['Access-Control-Request-Headers'] = params['AccessControlRequestHeaders'];\n\n  submitRequest.call(this, {\n    Action: 'name/cos:OptionsObject',\n    method: 'OPTIONS',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: headers },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode && err.statusCode === 403) {\n        return callback(null, {\n          OptionsForbidden: true,\n          statusCode: err.statusCode });\n\n      }\n      return callback(err);\n    }\n\n    var headers = data.headers || {};\n    callback(null, {\n      AccessControlAllowOrigin: headers['access-control-allow-origin'],\n      AccessControlAllowMethods: headers['access-control-allow-methods'],\n      AccessControlAllowHeaders: headers['access-control-allow-headers'],\n      AccessControlExposeHeaders: headers['access-control-expose-headers'],\n      AccessControlMaxAge: headers['access-control-max-age'],\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * @param  {Object}                                     参数列表\r\n   *     @param  {String}  Bucket                         Bucket 名称\r\n   *     @param  {String}  Region                         地域名称\r\n   *     @param  {String}  Key                            文件名称\r\n   *     @param  {String}  CopySource                     源文件URL绝对路径，可以通过versionid子资源指定历史版本\r\n   *     @param  {String}  ACL                            允许用户自定义文件权限。有效值：private，public-read默认值：private。\r\n   *     @param  {String}  GrantRead                      赋予被授权者读的权限，格式 x-cos-grant-read: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n   *     @param  {String}  GrantWrite                     赋予被授权者写的权限，格式 x-cos-grant-write: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n   *     @param  {String}  GrantFullControl               赋予被授权者读写权限，格式 x-cos-grant-full-control: uin=\" \",uin=\" \"，当需要给子账户授权时，uin=\"RootAcountID/SubAccountID\"，当需要给根账户授权时，uin=\"RootAcountID\"。\r\n   *     @param  {String}  MetadataDirective              是否拷贝元数据，枚举值：Copy, Replaced，默认值Copy。假如标记为Copy，忽略Header中的用户元数据信息直接复制；假如标记为Replaced，按Header信息修改元数据。当目标路径和原路径一致，即用户试图修改元数据时，必须为Replaced\r\n   *     @param  {String}  CopySourceIfModifiedSince      当Object在指定时间后被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-None-Match一起使用，与其他条件联合使用返回冲突。\r\n   *     @param  {String}  CopySourceIfUnmodifiedSince    当Object在指定时间后未被修改，则执行操作，否则返回412。可与x-cos-copy-source-If-Match一起使用，与其他条件联合使用返回冲突。\r\n   *     @param  {String}  CopySourceIfMatch              当Object的Etag和给定一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Unmodified-Since一起使用，与其他条件联合使用返回冲突。\r\n   *     @param  {String}  CopySourceIfNoneMatch          当Object的Etag和给定不一致时，则执行操作，否则返回412。可与x-cos-copy-source-If-Modified-Since一起使用，与其他条件联合使用返回冲突。\r\n   *     @param  {String}  StorageClass                   存储级别，枚举值：存储级别，枚举值：Standard, Standard_IA，Archive；默认值：Standard\r\n   *     @param  {String}  CacheControl                   指定所有缓存机制在整个请求/响应链中必须服从的指令。\r\n   *     @param  {String}  ContentDisposition             MIME 协议的扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件\r\n   *     @param  {String}  ContentEncoding                HTTP 中用来对「采用何种编码格式传输正文」进行协定的一对头部字段\r\n   *     @param  {String}  ContentLength                  设置响应消息的实体内容的大小，单位为字节\r\n   *     @param  {String}  ContentType                    RFC 2616 中定义的 HTTP 请求内容类型（MIME），例如text/plain\r\n   *     @param  {String}  Expect                         请求的特定的服务器行为\r\n   *     @param  {String}  Expires                        响应过期的日期和时间\r\n   *     @param  {String}  params.ServerSideEncryption   支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n   *     @param  {String}  ContentLanguage                指定内容语言\r\n   *     @param  {String}  x-cos-meta-*                   允许用户自定义的头部信息，将作为 Object 元数据返回。大小限制2K。\r\n   */\nfunction putObjectCopy(params, callback) {\n\n  // 特殊处理 Cache-Control\n  var headers = params.Headers;\n  !headers['Cache-Control'] && (headers['Cache-Control'] = '');\n\n  var CopySource = params.CopySource || '';\n  var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\n  if (!m) {\n    callback({ error: 'CopySource format error' });\n    return;\n  }\n\n  var SourceBucket = m[1];\n  var SourceRegion = m[3];\n  var SourceKey = decodeURIComponent(m[4]);\n\n  submitRequest.call(this, {\n    Scope: [{\n      action: 'name/cos:GetObject',\n      bucket: SourceBucket,\n      region: SourceRegion,\n      prefix: SourceKey },\n    {\n      action: 'name/cos:PutObject',\n      bucket: params.Bucket,\n      region: params.Region,\n      prefix: params.Key }],\n\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    VersionId: params.VersionId,\n    headers: params.Headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var result = util.clone(data.CopyObjectResult || {});\n    util.extend(result, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\nfunction uploadPartCopy(params, callback) {\n\n  var CopySource = params.CopySource || '';\n  var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\n  if (!m) {\n    callback({ error: 'CopySource format error' });\n    return;\n  }\n\n  var SourceBucket = m[1];\n  var SourceRegion = m[3];\n  var SourceKey = decodeURIComponent(m[4]);\n\n  submitRequest.call(this, {\n    Scope: [{\n      action: 'name/cos:GetObject',\n      bucket: SourceBucket,\n      region: SourceRegion,\n      prefix: SourceKey },\n    {\n      action: 'name/cos:PutObject',\n      bucket: params.Bucket,\n      region: params.Region,\n      prefix: params.Key }],\n\n    method: 'PUT',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    VersionId: params.VersionId,\n    qs: {\n      partNumber: params['PartNumber'],\n      uploadId: params['UploadId'] },\n\n    headers: params.Headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var result = util.clone(data.CopyPartResult || {});\n    util.extend(result, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\nfunction deleteMultipleObject(params, callback) {\n  var Objects = params.Objects || [];\n  var Quiet = params.Quiet;\n  Objects = util.isArray(Objects) ? Objects : [Objects];\n\n  var xml = util.json2xml({ Delete: { Object: Objects, Quiet: Quiet || false } });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  var Scope = util.map(Objects, function (v) {\n    return {\n      action: 'name/cos:DeleteObject',\n      bucket: params.Bucket,\n      region: params.Region,\n      prefix: v.Key };\n\n  });\n\n  submitRequest.call(this, {\n    Scope: Scope,\n    method: 'POST',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    body: xml,\n    action: 'delete',\n    headers: headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var DeleteResult = data.DeleteResult || {};\n    var Deleted = DeleteResult.Deleted || [];\n    var Errors = DeleteResult.Error || [];\n\n    Deleted = util.isArray(Deleted) ? Deleted : [Deleted];\n    Errors = util.isArray(Errors) ? Errors : [Errors];\n\n    var result = util.clone(DeleteResult);\n    util.extend(result, {\n      Error: Errors,\n      Deleted: Deleted,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\nfunction restoreObject(params, callback) {\n  var headers = params.Headers;\n  if (!params['RestoreRequest']) {\n    callback({ error: 'missing param RestoreRequest' });\n    return;\n  }\n\n  var RestoreRequest = params.RestoreRequest || {};\n  var xml = util.json2xml({ RestoreRequest: RestoreRequest });\n\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:RestoreObject',\n    method: 'POST',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    VersionId: params.VersionId,\n    body: xml,\n    action: 'restore',\n    headers: headers },\n  function (err, data) {\n    callback(err, data);\n  });\n}\n\n\n// 分块上传\n\n\n/**\r\n * 初始化分块上传\r\n * @param  {Object}  params                                     参数对象，必须\r\n *     @param  {String}  params.Bucket                          Bucket名称，必须\r\n *     @param  {String}  params.Region                          地域名称，必须\r\n *     @param  {String}  params.Key                             object名称，必须\r\n *     @param  {String}  params.UploadId                        object名称，必须\r\n *     @param  {String}  params.CacheControl                    RFC 2616 中定义的缓存策略，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentDisposition              RFC 2616 中定义的文件名称，将作为 Object 元数据保存    ，非必须\r\n *     @param  {String}  params.ContentEncoding                 RFC 2616 中定义的编码格式，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ContentType                     RFC 2616 中定义的内容类型（MIME），将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.Expires                         RFC 2616 中定义的过期时间，将作为 Object 元数据保存，非必须\r\n *     @param  {String}  params.ACL                             允许用户自定义文件权限，非必须\r\n *     @param  {String}  params.GrantRead                       赋予被授权者读的权限 ，非必须\r\n *     @param  {String}  params.GrantWrite                      赋予被授权者写的权限 ，非必须\r\n *     @param  {String}  params.GrantFullControl                赋予被授权者读写权限 ，非必须\r\n *     @param  {String}  params.StorageClass                    设置Object的存储级别，枚举值：Standard，Standard_IA，Archive，非必须\r\n *     @param  {String}  params.ServerSideEncryption           支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n * @param  {Function}  callback                                 回调函数，必须\r\n * @return  {Object}  err                                       请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n * @return  {Object}  data                                      返回的数据\r\n */\nfunction multipartInit(params, callback) {\n\n  var self = this;\n  // 特殊处理 Cache-Control\n  var headers = params.Headers;\n  !headers['Cache-Control'] && (headers['Cache-Control'] = '');\n  util.getBodyMd5(params.Body && (params.UploadAddMetaMd5 || self.options.UploadAddMetaMd5), params.Body, function (md5) {\n    if (md5) params.Headers['x-cos-meta-md5'] = md5;\n    submitRequest.call(self, {\n      Action: 'name/cos:InitiateMultipartUpload',\n      method: 'POST',\n      Bucket: params.Bucket,\n      Region: params.Region,\n      Key: params.Key,\n      action: 'uploads',\n      headers: params.Headers },\n    function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      data = util.clone(data || {});\n      if (data && data.InitiateMultipartUploadResult) {\n        return callback(null, util.extend(data.InitiateMultipartUploadResult, {\n          statusCode: data.statusCode,\n          headers: data.headers }));\n\n      }\n      callback(null, data);\n    });\n  }, params.onHashProgress);\n}\n\n/**\r\n   * 分块上传\r\n   * @param  {Object}  params                                 参数对象，必须\r\n   *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n   *     @param  {String}  params.Region                      地域名称，必须\r\n   *     @param  {String}  params.Key                         object名称，必须\r\n   *     @param  {File || Blob || String}  params.Body        上传文件对象或字符串\r\n   *     @param  {String} params.ContentLength                RFC 2616 中定义的 HTTP 请求内容长度（字节），非必须\r\n   *     @param  {String} params.Expect                       当使用 Expect: 100-continue 时，在收到服务端确认后，才会发送请求内容，非必须\r\n   *     @param  {String} params.ServerSideEncryption         支持按照指定的加密算法进行服务端数据加密，格式 x-cos-server-side-encryption: \"AES256\"，非必须\r\n   *     @param  {String} params.ContentSha1                  RFC 3174 中定义的 160-bit 内容 SHA-1 算法校验值，非必须\r\n   * @param  {Function}  callback                             回调函数，必须\r\n   *     @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   *     @return  {Object}  data                              返回的数据\r\n   *     @return  {Object}  data.ETag                         返回的文件分块 sha1 值\r\n   */\nfunction multipartUpload(params, callback) {\n\n  var self = this;\n  util.getFileSize('multipartUpload', params, function () {\n    util.getBodyMd5(self.options.UploadCheckContentMd5, params.Body, function (md5) {\n      if (md5) params.Headers['Content-MD5'] = util.binaryBase64(md5);\n      submitRequest.call(self, {\n        Action: 'name/cos:UploadPart',\n        TaskId: params.TaskId,\n        method: 'PUT',\n        Bucket: params.Bucket,\n        Region: params.Region,\n        Key: params.Key,\n        qs: {\n          partNumber: params['PartNumber'],\n          uploadId: params['UploadId'] },\n\n        headers: params.Headers,\n        onProgress: params.onProgress,\n        body: params.Body || null },\n      function (err, data) {\n        if (err) {\n          return callback(err);\n        }\n        data['headers'] = data['headers'] || {};\n        callback(null, {\n          ETag: data['headers']['etag'] || '',\n          statusCode: data.statusCode,\n          headers: data.headers });\n\n      });\n    });\n  });\n\n}\n\n/**\r\n   * 完成分块上传\r\n   * @param  {Object}  params                             参数对象，必须\r\n   *     @param  {String}  params.Bucket                  Bucket名称，必须\r\n   *     @param  {String}  params.Region                  地域名称，必须\r\n   *     @param  {String}  params.Key                     object名称，必须\r\n   *     @param  {Array}   params.Parts                   分块信息列表，必须\r\n   *     @param  {String}  params.Parts[i].PartNumber     块编号，必须\r\n   *     @param  {String}  params.Parts[i].ETag           分块的 sha1 校验值\r\n   * @param  {Function}  callback                         回调函数，必须\r\n   * @return  {Object}  err                               请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                              返回的数据\r\n   *     @return  {Object}  data.CompleteMultipartUpload  完成分块上传后的文件信息，包括Location, Bucket, Key 和 ETag\r\n   */\nfunction multipartComplete(params, callback) {\n  var self = this;\n\n  var UploadId = params.UploadId;\n\n  var Parts = params['Parts'];\n\n  for (var i = 0, len = Parts.length; i < len; i++) {\n    if (Parts[i]['ETag'].indexOf('\"') === 0) {\n      continue;\n    }\n    Parts[i]['ETag'] = '\"' + Parts[i]['ETag'] + '\"';\n  }\n\n  var xml = util.json2xml({ CompleteMultipartUpload: { Part: Parts } });\n\n  var headers = params.Headers;\n  headers['Content-Type'] = 'application/xml';\n  headers['Content-MD5'] = util.binaryBase64(util.md5(xml));\n\n  submitRequest.call(this, {\n    Action: 'name/cos:CompleteMultipartUpload',\n    method: 'POST',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    qs: {\n      uploadId: UploadId },\n\n    body: xml,\n    headers: headers },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var url = getUrl({\n      ForcePathStyle: self.options.ForcePathStyle,\n      protocol: self.options.Protocol,\n      domain: self.options.Domain,\n      bucket: params.Bucket,\n      region: params.Region,\n      object: params.Key,\n      isLocation: true });\n\n    var CompleteMultipartUploadResult = data.CompleteMultipartUploadResult || {};\n    var result = util.extend(CompleteMultipartUploadResult, {\n      Location: url,\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 分块上传任务列表查询\r\n   * @param  {Object}  params                                 参数对象，必须\r\n   *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n   *     @param  {String}  params.Region                      地域名称，必须\r\n   *     @param  {String}  params.Delimiter                   定界符为一个符号，如果有Prefix，则将Prefix到delimiter之间的相同路径归为一类，定义为Common Prefix，然后列出所有Common Prefix。如果没有Prefix，则从路径起点开始，非必须\r\n   *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\r\n   *     @param  {String}  params.Prefix                      前缀匹配，用来规定返回的文件前缀地址，非必须\r\n   *     @param  {String}  params.MaxUploads                  单次返回最大的条目数量，默认1000，非必须\r\n   *     @param  {String}  params.KeyMarker                   与upload-id-marker一起使用 </Br>当upload-id-marker未被指定时，ObjectName字母顺序大于key-marker的条目将被列出 </Br>当upload-id-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\r\n   *     @param  {String}  params.UploadIdMarker              与key-marker一起使用 </Br>当key-marker未被指定时，upload-id-marker将被忽略 </Br>当key-marker被指定时，ObjectName字母顺序大于key-marker的条目被列出，ObjectName字母顺序等于key-marker同时UploadId大于upload-id-marker的条目将被列出，非必须\r\n   * @param  {Function}  callback                             回调函数，必须\r\n   * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                                  返回的数据\r\n   *     @return  {Object}  data.ListMultipartUploadsResult   分块上传任务信息\r\n   */\nfunction multipartList(params, callback) {\n  var reqParams = {};\n\n  reqParams['delimiter'] = params['Delimiter'];\n  reqParams['encoding-type'] = params['EncodingType'];\n  reqParams['prefix'] = params['Prefix'] || '';\n\n  reqParams['max-uploads'] = params['MaxUploads'];\n\n  reqParams['key-marker'] = params['KeyMarker'];\n  reqParams['upload-id-marker'] = params['UploadIdMarker'];\n\n  reqParams = util.clearKey(reqParams);\n\n  submitRequest.call(this, {\n    Action: 'name/cos:ListMultipartUploads',\n    ResourceKey: reqParams['prefix'],\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    headers: params.Headers,\n    qs: reqParams,\n    action: 'uploads' },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (data && data.ListMultipartUploadsResult) {\n      var Upload = data.ListMultipartUploadsResult.Upload || [];\n\n      var CommonPrefixes = data.ListMultipartUploadsResult.CommonPrefixes || [];\n\n      CommonPrefixes = util.isArray(CommonPrefixes) ? CommonPrefixes : [CommonPrefixes];\n      Upload = util.isArray(Upload) ? Upload : [Upload];\n\n      data.ListMultipartUploadsResult.Upload = Upload;\n      data.ListMultipartUploadsResult.CommonPrefixes = CommonPrefixes;\n    }\n    var result = util.clone(data.ListMultipartUploadsResult || {});\n    util.extend(result, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 上传的分块列表查询\r\n   * @param  {Object}  params                                 参数对象，必须\r\n   *     @param  {String}  params.Bucket                      Bucket名称，必须\r\n   *     @param  {String}  params.Region                      地域名称，必须\r\n   *     @param  {String}  params.Key                         object名称，必须\r\n   *     @param  {String}  params.UploadId                    标示本次分块上传的ID，必须\r\n   *     @param  {String}  params.EncodingType                规定返回值的编码方式，非必须\r\n   *     @param  {String}  params.MaxParts                    单次返回最大的条目数量，默认1000，非必须\r\n   *     @param  {String}  params.PartNumberMarker            默认以UTF-8二进制顺序列出条目，所有列出条目从marker开始，非必须\r\n   * @param  {Function}  callback                             回调函数，必须\r\n   * @return  {Object}  err                                   请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   * @return  {Object}  data                                  返回的数据\r\n   *     @return  {Object}  data.ListMultipartUploadsResult   分块信息\r\n   */\nfunction multipartListPart(params, callback) {\n  var reqParams = {};\n\n  reqParams['uploadId'] = params['UploadId'];\n  reqParams['encoding-type'] = params['EncodingType'];\n  reqParams['max-parts'] = params['MaxParts'];\n  reqParams['part-number-marker'] = params['PartNumberMarker'];\n\n  submitRequest.call(this, {\n    Action: 'name/cos:ListParts',\n    method: 'GET',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: params.Headers,\n    qs: reqParams },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    var ListPartsResult = data.ListPartsResult || {};\n    var Part = ListPartsResult.Part || [];\n    Part = util.isArray(Part) ? Part : [Part];\n\n    ListPartsResult.Part = Part;\n    var result = util.clone(ListPartsResult);\n    util.extend(result, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n    callback(null, result);\n  });\n}\n\n/**\r\n   * 抛弃分块上传\r\n   * @param  {Object}  params                 参数对象，必须\r\n   *     @param  {String}  params.Bucket      Bucket名称，必须\r\n   *     @param  {String}  params.Region      地域名称，必须\r\n   *     @param  {String}  params.Key         object名称，必须\r\n   *     @param  {String}  params.UploadId    标示本次分块上传的ID，必须\r\n   * @param  {Function}  callback             回调函数，必须\r\n   *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   *     @return  {Object}    data            返回的数据\r\n   */\nfunction multipartAbort(params, callback) {\n  var reqParams = {};\n\n  reqParams['uploadId'] = params['UploadId'];\n  submitRequest.call(this, {\n    Action: 'name/cos:AbortMultipartUpload',\n    method: 'DELETE',\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    headers: params.Headers,\n    qs: reqParams },\n  function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, {\n      statusCode: data.statusCode,\n      headers: data.headers });\n\n  });\n}\n\n/**\r\n   * 获取签名\r\n   * @param  {Object}  params             参数对象，必须\r\n   *     @param  {String}  params.Method  请求方法，必须\r\n   *     @param  {String}  params.Key     object名称，必须\r\n   *     @param  {String}  params.Expires 名超时时间，单位秒，可选\r\n   * @return  {String}  data              返回签名字符串\r\n   */\nfunction getAuth(params) {\n  var self = this;\n  return util.getAuth({\n    SecretId: params.SecretId || this.options.SecretId || '',\n    SecretKey: params.SecretKey || this.options.SecretKey || '',\n    Method: params.Method,\n    Key: params.Key,\n    Query: params.Query,\n    Headers: params.Headers,\n    Expires: params.Expires,\n    UseRawKey: self.options.UseRawKey,\n    SystemClockOffset: self.options.SystemClockOffset });\n\n}\n\n/**\r\n   * 获取文件下载链接\r\n   * @param  {Object}  params                 参数对象，必须\r\n   *     @param  {String}  params.Bucket      Bucket名称，必须\r\n   *     @param  {String}  params.Region      地域名称，必须\r\n   *     @param  {String}  params.Key         object名称，必须\r\n   *     @param  {String}  params.Method      请求的方法，可选\r\n   *     @param  {String}  params.Expires     签名超时时间，单位秒，可选\r\n   * @param  {Function}  callback             回调函数，必须\r\n   *     @return  {Object}    err             请求失败的错误，如果请求成功，则为空。https://cloud.tencent.com/document/product/436/7730\r\n   *     @return  {Object}    data            返回的数据\r\n   */\nfunction getObjectUrl(params, callback) {\n  var self = this;\n  var url = getUrl({\n    ForcePathStyle: self.options.ForcePathStyle,\n    protocol: params.Protocol || self.options.Protocol,\n    domain: self.options.Domain,\n    bucket: params.Bucket,\n    region: params.Region,\n    object: params.Key });\n\n  if (params.Sign !== undefined && !params.Sign) {\n    callback(null, { Url: url });\n    return url;\n  }\n  var AuthData = getAuthorizationAsync.call(this, {\n    Action: (params.Method || '').toUpperCase() === 'PUT' ? 'name/cos:PutObject' : 'name/cos:GetObject',\n    Bucket: params.Bucket || '',\n    Region: params.Region || '',\n    Method: params.Method || 'get',\n    Key: params.Key,\n    Expires: params.Expires },\n  function (err, AuthData) {\n    if (!callback) return;\n    if (err) {\n      callback(err);\n      return;\n    }\n    var signUrl = url;\n    signUrl += '?' + (AuthData.Authorization.indexOf('q-signature') > -1 ?\n    AuthData.Authorization : 'sign=' + encodeURIComponent(AuthData.Authorization));\n    AuthData.XCosSecurityToken && (signUrl += '&x-cos-security-token=' + AuthData.XCosSecurityToken);\n    AuthData.ClientIP && (signUrl += '&clientIP=' + AuthData.ClientIP);\n    AuthData.ClientUA && (signUrl += '&clientUA=' + AuthData.ClientUA);\n    AuthData.Token && (signUrl += '&token=' + AuthData.Token);\n    setTimeout(function () {\n      callback(null, { Url: signUrl });\n    });\n  });\n  if (AuthData) {\n    return url + '?' + AuthData.Authorization + (\n    AuthData.XCosSecurityToken ? '&x-cos-security-token=' + AuthData.XCosSecurityToken : '');\n  } else {\n    return url;\n  }\n}\n\n\n/**\r\n   * 私有方法\r\n   */\nfunction decodeAcl(AccessControlPolicy) {\n  var result = {\n    GrantFullControl: [],\n    GrantWrite: [],\n    GrantRead: [],\n    GrantReadAcp: [],\n    GrantWriteAcp: [],\n    ACL: '' };\n\n  var GrantMap = {\n    'FULL_CONTROL': 'GrantFullControl',\n    'WRITE': 'GrantWrite',\n    'READ': 'GrantRead',\n    'READ_ACP': 'GrantReadAcp',\n    'WRITE_ACP': 'GrantWriteAcp' };\n\n  var AccessControlList = AccessControlPolicy && AccessControlPolicy.AccessControlList || {};\n  var Grant = AccessControlList.Grant;\n  if (Grant) {\n    Grant = util.isArray(Grant) ? Grant : [Grant];\n  }\n  var PublicAcl = { READ: 0, WRITE: 0, FULL_CONTROL: 0 };\n  Grant && Grant.length && util.each(Grant, function (item) {\n    if (item.Grantee.ID === 'qcs::cam::anyone:anyone' || item.Grantee.URI === 'http://cam.qcloud.com/groups/global/AllUsers') {\n      PublicAcl[item.Permission] = 1;\n    } else if (item.Grantee.ID !== AccessControlPolicy.Owner.ID) {\n      result[GrantMap[item.Permission]].push('id=\"' + item.Grantee.ID + '\"');\n    }\n  });\n  if (PublicAcl.FULL_CONTROL || PublicAcl.WRITE && PublicAcl.READ) {\n    result.ACL = 'public-read-write';\n  } else if (PublicAcl.READ) {\n    result.ACL = 'public-read';\n  } else {\n    result.ACL = 'private';\n  }\n  util.each(GrantMap, function (item) {\n    result[item] = uniqGrant(result[item].join(','));\n  });\n  return result;\n}\n\n// Grant 去重\nfunction uniqGrant(str) {\n  var arr = str.split(',');\n  var exist = {};\n  var i, item;\n  for (i = 0; i < arr.length;) {\n    item = arr[i].trim();\n    if (exist[item]) {\n      arr.splice(i, 1);\n    } else {\n      exist[item] = true;\n      arr[i] = item;\n      i++;\n    }\n  }\n  return arr.join(',');\n}\n\n// 生成操作 url\nfunction getUrl(params) {\n  var longBucket = params.bucket;\n  var shortBucket = longBucket.substr(0, longBucket.lastIndexOf('-'));\n  var appId = longBucket.substr(longBucket.lastIndexOf('-') + 1);\n  var domain = params.domain;\n  var region = params.region;\n  var object = params.object;\n  var protocol = params.protocol || (util.isBrowser && location.protocol === 'http:' ? 'http:' : 'https:');\n  if (!domain) {\n    if (['cn-south', 'cn-south-2', 'cn-north', 'cn-east', 'cn-southwest', 'sg'].indexOf(region) > -1) {\n      domain = '{Region}.myqcloud.com';\n    } else {\n      domain = 'cos.{Region}.myqcloud.com';\n    }\n    if (!params.ForcePathStyle) {\n      domain = '{Bucket}.' + domain;\n    }\n  }\n  domain = domain.replace(/\\{\\{AppId\\}\\}/ig, appId).\n  replace(/\\{\\{Bucket\\}\\}/ig, shortBucket).\n  replace(/\\{\\{Region\\}\\}/ig, region).\n  replace(/\\{\\{.*?\\}\\}/ig, '');\n  domain = domain.replace(/\\{AppId\\}/ig, appId).\n  replace(/\\{BucketName\\}/ig, shortBucket).\n  replace(/\\{Bucket\\}/ig, longBucket).\n  replace(/\\{Region\\}/ig, region).\n  replace(/\\{.*?\\}/ig, '');\n  if (!/^[a-zA-Z]+:\\/\\//.test(domain)) {\n    domain = protocol + '//' + domain;\n  }\n\n  // 去掉域名最后的斜杆\n  if (domain.slice(-1) === '/') {\n    domain = domain.slice(0, -1);\n  }\n  var url = domain;\n\n  if (params.ForcePathStyle) {\n    url += '/' + longBucket;\n  }\n  url += '/';\n  if (object) {\n    url += util.camSafeUrlEncode(object).replace(/%2F/g, '/');\n  }\n\n  if (params.isLocation) {\n    url = url.replace(/^https?:\\/\\//, '');\n  }\n  return url;\n}\n\n// 异步获取签名\nfunction getAuthorizationAsync(params, callback) {\n\n  var headers = util.clone(params.Headers);\n  delete headers['Content-Type'];\n  delete headers['Cache-Control'];\n  util.each(headers, function (v, k) {\n    v === '' && delete headers[k];\n  });\n\n  var cb = function cb(AuthData) {\n\n    // 检查签名格式\n    var formatAllow = false;\n    var auth = AuthData.Authorization;\n    if (auth) {\n      if (auth.indexOf(' ') > -1) {\n        formatAllow = false;\n      } else if (auth.indexOf('q-sign-algorithm=') > -1 &&\n      auth.indexOf('q-ak=') > -1 &&\n      auth.indexOf('q-sign-time=') > -1 &&\n      auth.indexOf('q-key-time=') > -1 &&\n      auth.indexOf('q-url-param-list=') > -1) {\n        formatAllow = true;\n      } else {\n        try {\n          auth = atob(auth);\n          if (auth.indexOf('a=') > -1 &&\n          auth.indexOf('k=') > -1 &&\n          auth.indexOf('t=') > -1 &&\n          auth.indexOf('r=') > -1 &&\n          auth.indexOf('b=') > -1) {\n            formatAllow = true;\n          }\n        } catch (e) {}\n      }\n    }\n    if (formatAllow) {\n      callback && callback(null, AuthData);\n    } else {\n      callback && callback('authorization error');\n    }\n  };\n\n  var self = this;\n  var Bucket = params.Bucket || '';\n  var Region = params.Region || '';\n\n  // PathName\n  var KeyName = params.Key || '';\n  if (self.options.ForcePathStyle && Bucket) {\n    KeyName = Bucket + '/' + KeyName;\n  }\n  var Pathname = '/' + KeyName;\n\n  // Action、ResourceKey\n  var StsData = {};\n  var Scope = params.Scope;\n  if (!Scope) {\n    var Action = params.Action || '';\n    var ResourceKey = params.ResourceKey || params.Key || '';\n    Scope = params.Scope || [{\n      action: Action,\n      bucket: Bucket,\n      region: Region,\n      prefix: ResourceKey }];\n\n  }\n  var ScopeKey = util.md5(JSON.stringify(Scope));\n\n  // STS\n  self._StsCache = self._StsCache || [];\n  (function () {\n    var i, AuthData;\n    for (i = self._StsCache.length - 1; i >= 0; i--) {\n      AuthData = self._StsCache[i];\n      var compareTime = Math.round(util.getSkewTime(self.options.SystemClockOffset) / 1000) + 30;\n      if (AuthData.StartTime && compareTime < AuthData.StartTime || compareTime >= AuthData.ExpiredTime) {\n        self._StsCache.splice(i, 1);\n        continue;\n      }\n      if (!AuthData.ScopeLimit || AuthData.ScopeLimit && AuthData.ScopeKey === ScopeKey) {\n        StsData = AuthData;\n        break;\n      }\n    }\n  })();\n\n  var calcAuthByTmpKey = function calcAuthByTmpKey() {\n    var KeyTime = StsData.StartTime && StsData.ExpiredTime ? StsData.StartTime + ';' + StsData.ExpiredTime : '';\n    var Authorization = util.getAuth({\n      SecretId: StsData.TmpSecretId,\n      SecretKey: StsData.TmpSecretKey,\n      Method: params.Method,\n      Pathname: Pathname,\n      Query: params.Query,\n      Headers: headers,\n      Expires: params.Expires,\n      UseRawKey: self.options.UseRawKey,\n      SystemClockOffset: self.options.SystemClockOffset,\n      KeyTime: KeyTime });\n\n    var AuthData = {\n      Authorization: Authorization,\n      XCosSecurityToken: StsData.XCosSecurityToken || '',\n      Token: StsData.Token || '',\n      ClientIP: StsData.ClientIP || '',\n      ClientUA: StsData.ClientUA || '' };\n\n    cb(AuthData);\n  };\n\n  // 先判断是否有临时密钥\n  if (StsData.ExpiredTime && StsData.ExpiredTime - util.getSkewTime(self.options.SystemClockOffset) / 1000 > 60) {// 如果缓存的临时密钥有效，并还有超过60秒有效期就直接使用\n    calcAuthByTmpKey();\n  } else if (self.options.getAuthorization) {// 外部计算签名或获取临时密钥\n    self.options.getAuthorization.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Method: params.Method,\n      Key: KeyName,\n      Pathname: Pathname,\n      Query: params.Query,\n      Headers: headers,\n      Scope: Scope },\n    function (AuthData) {\n      if (typeof AuthData === 'string') {\n        AuthData = { Authorization: AuthData };\n      }\n      if (AuthData.TmpSecretId &&\n      AuthData.TmpSecretKey &&\n      AuthData.XCosSecurityToken &&\n      AuthData.ExpiredTime) {\n        StsData = AuthData || {};\n        StsData.Scope = Scope;\n        StsData.ScopeKey = ScopeKey;\n        self._StsCache.push(StsData);\n        calcAuthByTmpKey();\n      } else {\n        cb(AuthData);\n      }\n    });\n  } else if (self.options.getSTS) {// 外部获取临时密钥\n    self.options.getSTS.call(self, {\n      Bucket: Bucket,\n      Region: Region },\n    function (data) {\n      StsData = data || {};\n      StsData.Scope = Scope;\n      StsData.ScopeKey = ScopeKey;\n      StsData.TmpSecretId = StsData.SecretId;\n      StsData.TmpSecretKey = StsData.SecretKey;\n      self._StsCache.push(StsData);\n      calcAuthByTmpKey();\n    });\n  } else {// 内部计算获取签名\n    return function () {\n      var Authorization = util.getAuth({\n        SecretId: params.SecretId || self.options.SecretId,\n        SecretKey: params.SecretKey || self.options.SecretKey,\n        Method: params.Method,\n        Pathname: Pathname,\n        Query: params.Query,\n        Headers: headers,\n        Expires: params.Expires,\n        UseRawKey: self.options.UseRawKey,\n        SystemClockOffset: self.options.SystemClockOffset });\n\n      var AuthData = {\n        Authorization: Authorization,\n        XCosSecurityToken: self.options.XCosSecurityToken };\n\n      cb(AuthData);\n      return AuthData;\n    }();\n  }\n  return '';\n}\n\n// 调整时间偏差\nfunction allowRetry(err) {\n  var allowRetry = false;\n  var isTimeError = false;\n  var serverDate = err.headers && (err.headers.date || err.headers.Date) || err.error && err.error.ServerTime;\n  try {\n    var errorCode = err.error.Code;\n    var errorMessage = err.error.Message;\n    if (errorCode === 'RequestTimeTooSkewed' ||\n    errorCode === 'AccessDenied' && errorMessage === 'Request has expired') {\n      isTimeError = true;\n    }\n  } catch (e) {\n  }\n  if (err) {\n    if (isTimeError && serverDate) {\n      var serverTime = Date.parse(serverDate);\n      if (this.options.CorrectClockSkew && Math.abs(util.getSkewTime(this.options.SystemClockOffset) - serverTime) >= 30000) {\n        __f__(\"error\", 'error: Local time is too skewed.', \" at cos-js-sdk-v5/src/base.js:2397\");\n        this.options.SystemClockOffset = serverTime - Date.now();\n        allowRetry = true;\n      }\n    } else if (Math.round(err.statusCode / 100) === 5) {\n      allowRetry = true;\n    }\n  }\n  return allowRetry;\n}\n\n// 获取签名并发起请求\nfunction submitRequest(params, callback) {\n  var self = this;\n\n  // 处理 headers\n  !params.headers && (params.headers = {});\n\n  // 处理 query\n  !params.qs && (params.qs = {});\n  params.VersionId && (params.qs.versionId = params.VersionId);\n  params.qs = util.clearKey(params.qs);\n\n  // 清理 undefined 和 null 字段\n  params.headers && (params.headers = util.clearKey(params.headers));\n  params.qs && (params.qs = util.clearKey(params.qs));\n\n  var Query = util.clone(params.qs);\n  params.action && (Query[params.action] = '');\n\n  var next = function next(tryTimes) {\n    var oldClockOffset = self.options.SystemClockOffset;\n    getAuthorizationAsync.call(self, {\n      Bucket: params.Bucket || '',\n      Region: params.Region || '',\n      Method: params.method,\n      Key: params.Key,\n      Query: Query,\n      Headers: params.headers,\n      Action: params.Action,\n      ResourceKey: params.ResourceKey,\n      Scope: params.Scope },\n    function (err, AuthData) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      params.AuthData = AuthData;\n      _submitRequest.call(self, params, function (err, data) {\n        if (err && tryTimes < 2 && (oldClockOffset !== self.options.SystemClockOffset || allowRetry.call(self, err))) {\n          if (params.headers) {\n            delete params.headers.Authorization;\n            delete params.headers['token'];\n            delete params.headers['clientIP'];\n            delete params.headers['clientUA'];\n            delete params.headers['x-cos-security-token'];\n          }\n          next(tryTimes + 1);\n        } else {\n          callback(err, data);\n        }\n      });\n    });\n  };\n  next(1);\n\n}\n\n// 发起请求\nfunction _submitRequest(params, callback) {\n  var self = this;\n  var TaskId = params.TaskId;\n  if (TaskId && !self._isRunningTask(TaskId)) return;\n\n  var bucket = params.Bucket;\n  var region = params.Region;\n  var object = params.Key;\n  var method = params.method || 'GET';\n  var url = params.url;\n  var body = params.body;\n  var json = params.json;\n  var rawBody = params.rawBody;\n\n  // url\n  url = url || getUrl({\n    ForcePathStyle: self.options.ForcePathStyle,\n    protocol: self.options.Protocol,\n    domain: self.options.Domain,\n    bucket: bucket,\n    region: region,\n    object: object });\n\n  if (params.action) {\n    url = url + '?' + params.action;\n  }\n\n  var opt = {\n    method: method,\n    url: url,\n    headers: params.headers,\n    qs: params.qs,\n    body: body,\n    json: json };\n\n\n  // 获取签名\n  opt.headers.Authorization = params.AuthData.Authorization;\n  params.AuthData.Token && (opt.headers['token'] = params.AuthData.Token);\n  params.AuthData.ClientIP && (opt.headers['clientIP'] = params.AuthData.ClientIP);\n  params.AuthData.ClientUA && (opt.headers['clientUA'] = params.AuthData.ClientUA);\n  params.AuthData.XCosSecurityToken && (opt.headers['x-cos-security-token'] = params.AuthData.XCosSecurityToken);\n\n  // 清理 undefined 和 null 字段\n  opt.headers && (opt.headers = util.clearKey(opt.headers));\n  opt = util.clearKey(opt);\n\n  // progress\n  if (params.onProgress && typeof params.onProgress === 'function') {\n    var contentLength = body && (body.size || body.length) || 0;\n    opt.onProgress = function (e) {\n      if (TaskId && !self._isRunningTask(TaskId)) return;\n      var loaded = e ? e.loaded : 0;\n      params.onProgress({ loaded: loaded, total: contentLength });\n    };\n  }\n  if (this.options.Timeout) {\n    opt.timeout = this.options.Timeout;\n  }\n\n  self.emit('before-send', opt);\n  var sender = REQUEST(opt, function (err, response, body) {\n    if (err === 'abort') return;\n\n    // 返回内容添加 状态码 和 headers\n    var hasReturned;\n    var cb = function cb(err, data) {\n      TaskId && self.off('inner-kill-task', killTask);\n      if (hasReturned) return;\n      hasReturned = true;\n      var attrs = {};\n      response && response.statusCode && (attrs.statusCode = response.statusCode);\n      response && response.headers && (attrs.headers = response.headers);\n\n      if (err) {\n        err = util.extend(err || {}, attrs);\n        callback(err, null);\n      } else {\n        data = util.extend(data || {}, attrs);\n        callback(null, data);\n      }\n      sender = null;\n    };\n\n    // 请求错误，发生网络错误\n    if (err) {\n      cb({ error: err });\n      return;\n    }\n\n    var jsonRes;\n\n    // 不对 body 进行转换，body 直接挂载返回\n    if (rawBody) {\n      jsonRes = {};\n      jsonRes.body = body;\n    } else {\n      try {\n        jsonRes = body && body.indexOf('<') > -1 && body.indexOf('>') > -1 && util.xml2json(body) || {};\n      } catch (e) {\n        jsonRes = body || {};\n      }\n    }\n\n    // 请求返回码不为 200\n    var statusCode = response.statusCode;\n    var statusSuccess = Math.floor(statusCode / 100) === 2; // 200 202 204 206\n    if (!statusSuccess) {\n      cb({ error: jsonRes.Error || jsonRes });\n      return;\n    }\n\n\n    if (jsonRes.Error) {\n      cb({ error: jsonRes.Error });\n      return;\n    }\n    cb(null, jsonRes);\n  });\n\n  // kill task\n  var killTask = function killTask(data) {\n    if (data.TaskId === TaskId) {\n      sender && sender.abort && sender.abort();\n      self.off('inner-kill-task', killTask);\n    }\n  };\n  TaskId && self.on('inner-kill-task', killTask);\n\n}\n\n\nvar API_MAP = {\n  // Bucket 相关方法\n  getService: getService, // Bucket\n  putBucket: putBucket,\n  headBucket: headBucket, // Bucket\n  getBucket: getBucket,\n  deleteBucket: deleteBucket,\n  putBucketAcl: putBucketAcl, // BucketACL\n  getBucketAcl: getBucketAcl,\n  putBucketCors: putBucketCors, // BucketCors\n  getBucketCors: getBucketCors,\n  deleteBucketCors: deleteBucketCors,\n  getBucketLocation: getBucketLocation, // BucketLocation\n  getBucketPolicy: getBucketPolicy, // BucketPolicy\n  putBucketPolicy: putBucketPolicy,\n  deleteBucketPolicy: deleteBucketPolicy,\n  putBucketTagging: putBucketTagging, // BucketTagging\n  getBucketTagging: getBucketTagging,\n  deleteBucketTagging: deleteBucketTagging,\n  putBucketLifecycle: putBucketLifecycle, // BucketLifecycle\n  getBucketLifecycle: getBucketLifecycle,\n  deleteBucketLifecycle: deleteBucketLifecycle,\n  putBucketVersioning: putBucketVersioning, // BucketVersioning\n  getBucketVersioning: getBucketVersioning,\n  putBucketReplication: putBucketReplication, // BucketReplication\n  getBucketReplication: getBucketReplication,\n  deleteBucketReplication: deleteBucketReplication,\n  putBucketWebsite: putBucketWebsite, // BucketWebsite\n  getBucketWebsite: getBucketWebsite,\n  deleteBucketWebsite: deleteBucketWebsite,\n\n  // Object 相关方法\n  getObject: getObject,\n  headObject: headObject,\n  listObjectVersions: listObjectVersions,\n  putObject: putObject,\n  deleteObject: deleteObject,\n  getObjectAcl: getObjectAcl,\n  putObjectAcl: putObjectAcl,\n  optionsObject: optionsObject,\n  putObjectCopy: putObjectCopy,\n  deleteMultipleObject: deleteMultipleObject,\n  restoreObject: restoreObject,\n\n  // 分块上传相关方法\n  uploadPartCopy: uploadPartCopy,\n  multipartInit: multipartInit,\n  multipartUpload: multipartUpload,\n  multipartComplete: multipartComplete,\n  multipartList: multipartList,\n  multipartListPart: multipartListPart,\n  multipartAbort: multipartAbort,\n\n  // 工具方法\n  getObjectUrl: getObjectUrl,\n  getAuth: getAuth };\n\n\nfunction warnOldApi(apiName, fn, proto) {\n  util.each(['Cors', 'Acl'], function (suffix) {\n    if (apiName.slice(-suffix.length) === suffix) {\n      var oldName = apiName.slice(0, -suffix.length) + suffix.toUpperCase();\n      var apiFn = util.apiWrapper(apiName, fn);\n      var warned = false;\n      proto[oldName] = function () {\n        !warned && __f__(\"warn\", 'warning: cos.' + oldName + ' has been deprecated. Please Use cos.' + apiName + ' instead.', \" at cos-js-sdk-v5/src/base.js:2663\");\n        warned = true;\n        apiFn.apply(this, arguments);\n      };\n    }\n  });\n}\n\nmodule.exports.init = function (COS, task) {\n  task.transferToTaskMethod(API_MAP, 'putObject');\n  util.each(API_MAP, function (fn, apiName) {\n    COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n    warnOldApi(apiName, fn, COS.prototype);\n  });\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/*!***********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/lib/request.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var $ = function () {\n  var deletedIds = [];\n\n  var _slice = deletedIds.slice;\n\n  var concat = deletedIds.concat;\n\n  var push = deletedIds.push;\n\n  var indexOf = deletedIds.indexOf;\n\n  var class2type = {};\n\n  var toString = class2type.toString;\n\n  var hasOwn = class2type.hasOwnProperty;\n\n  var support = {};\n\n\n  var\n  version = \"1.11.1 -css,-css/addGetHookIf,-css/curCSS,-css/defaultDisplay,-css/hiddenVisibleSelectors,-css/support,-css/swap,-css/var/cssExpand,-css/var/isHidden,-css/var/rmargin,-css/var/rnumnonpx,-effects,-effects/Tween,-effects/animatedSelector,-effects/support,-dimensions,-offset,-deprecated,-event-alias,-wrap\",\n\n  // Define a local copy of jQuery\n  jQuery = function jQuery(selector, context) {\n    // The jQuery object is actually just the init constructor 'enhanced'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  },\n\n  // Support: Android<4.1, IE<9\n  // Make sure we trim BOM and NBSP\n  rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n  // Matches dashed string for camelizing\n  rmsPrefix = /^-ms-/,\n  rdashAlpha = /-([\\da-z])/gi,\n\n  // Used by jQuery.camelCase as callback to replace()\n  fcamelCase = function fcamelCase(all, letter) {\n    return letter.toUpperCase();\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n\n    constructor: jQuery,\n\n    // Start with an empty selector\n    selector: \"\",\n\n    // The default length of a jQuery object is 0\n    length: 0,\n\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      return num != null ?\n\n      // Return just the one element from the set\n      num < 0 ? this[num + this.length] : this[num] :\n\n      // Return all the elements in a clean array\n      _slice.call(this);\n    },\n\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems);\n\n      // Add the old object onto the stack (as a reference)\n      ret.prevObject = this;\n      ret.context = this.context;\n\n      // Return the newly-formed element set\n      return ret;\n    },\n\n    // Execute a callback for every element in the matched set.\n    // (You can seed the arguments with an array of args, but this is\n    // only used internally.)\n    each: function each(callback, args) {\n      return jQuery.each(this, callback, args);\n    },\n\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n\n    first: function first() {\n      return this.eq(0);\n    },\n\n    last: function last() {\n      return this.eq(-1);\n    },\n\n    eq: function eq(i) {\n      var len = this.length,\n      j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n\n    end: function end() {\n      return this.prevObject || this.constructor(null);\n    },\n\n    // For internal use only.\n    // Behaves like an Array's method, not like a jQuery method.\n    push: push,\n    sort: deletedIds.sort,\n    splice: deletedIds.splice };\n\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var src,copyIsArray,copy,name,options,clone,\n    target = arguments[0] || {},\n    i = 1,\n    length = arguments.length,\n    deep = false;\n\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n      deep = target;\n\n      // skip the boolean and the target\n      target = arguments[i] || {};\n      i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n      target = {};\n    }\n\n    // extend jQuery itself if only one argument is passed\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          src = target[name];\n          copy = options[name];\n\n          // Prevent never-ending loop\n          if (target === copy) {\n            continue;\n          }\n\n          // Recurse if we're merging plain objects or arrays\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && jQuery.isArray(src) ? src : [];\n\n            } else {\n              clone = src && jQuery.isPlainObject(src) ? src : {};\n            }\n\n            // Never move original objects, clone them\n            target[name] = jQuery.extend(deep, clone, copy);\n\n            // Don't bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n\n    // Return the modified object\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n\n    noop: function noop() {\n    },\n\n    // See test/unit/core.js for details concerning isFunction.\n    // Since version 1.3, DOM methods and functions like alert\n    // aren't supported. They return false on IE (#2968).\n    isFunction: function isFunction(obj) {\n      return jQuery.type(obj) === \"function\";\n    },\n\n    isArray: Array.isArray || function (obj) {\n      return jQuery.type(obj) === \"array\";\n    },\n\n    isWindow: function isWindow(obj) {\n      /* jshint eqeqeq: false */\n      return obj != null && obj == obj.window;\n    },\n\n    isNumeric: function isNumeric(obj) {\n      // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n      // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n      // subtraction forces infinities to NaN\n      return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;\n    },\n\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n      for (name in obj) {\n        return false;\n      }\n      return true;\n    },\n\n    isPlainObject: function isPlainObject(obj) {\n      var key;\n\n      // Must be an Object.\n      // Because of IE, we also have to check the presence of the constructor property.\n      // Make sure that DOM nodes and window objects don't pass through, as well\n      if (!obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow(obj)) {\n        return false;\n      }\n\n      try {\n        // Not own constructor property must be Object\n        if (obj.constructor &&\n        !hasOwn.call(obj, \"constructor\") &&\n        !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n          return false;\n        }\n      } catch (e) {\n        // IE8,9 Will throw exceptions on certain host objects #9897\n        return false;\n      }\n\n      // Support: IE<9\n      // Handle iteration over inherited properties before own properties.\n      if (support.ownLast) {\n        for (key in obj) {\n          return hasOwn.call(obj, key);\n        }\n      }\n\n      // Own properties are enumerated firstly, so to speed up,\n      // if last one is own, then all properties are own.\n      for (key in obj) {\n      }\n\n      return key === undefined || hasOwn.call(obj, key);\n    },\n\n    type: function type(obj) {\n      if (obj == null) {\n        return obj + \"\";\n      }\n      return typeof obj === \"object\" || typeof obj === \"function\" ?\n      class2type[toString.call(obj)] || \"object\" :\n      typeof obj;\n    },\n\n    // Evaluates a script in a global context\n    // Workarounds based on findings by Jim Driscoll\n    // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n    globalEval: function globalEval(data) {\n      if (data && jQuery.trim(data)) {\n        // We use execScript on Internet Explorer\n        // We use an anonymous function so that context is window\n        // rather than jQuery in Firefox\n        (window.execScript || function (data) {\n          window[\"eval\"].call(window, data);\n        })(data);\n      }\n    },\n\n    // Convert dashed to camelCase; used by the css and data modules\n    // Microsoft forgot to hump their vendor prefix (#9572)\n    camelCase: function camelCase(string) {\n      return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n    },\n\n    nodeName: function nodeName(elem, name) {\n      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n    },\n\n    // args is for internal usage only\n    each: function each(obj, callback, args) {\n      var value,\n      i = 0,\n      length = obj.length,\n      isArray = isArraylike(obj);\n\n      if (args) {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.apply(obj[i], args);\n\n            if (value === false) {\n              break;\n            }\n          }\n        }\n\n        // A special, fast, case for the most common use of each\n      } else {\n        if (isArray) {\n          for (; i < length; i++) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        } else {\n          for (i in obj) {\n            value = callback.call(obj[i], i, obj[i]);\n\n            if (value === false) {\n              break;\n            }\n          }\n        }\n      }\n\n      return obj;\n    },\n\n    // Support: Android<4.1, IE<9\n    trim: function trim(text) {\n      return text == null ?\n      \"\" :\n      (text + \"\").replace(rtrim, \"\");\n    },\n\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArraylike(Object(arr))) {\n          jQuery.merge(ret,\n          typeof arr === \"string\" ?\n          [arr] : arr);\n\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n\n    inArray: function inArray(elem, arr, i) {\n      var len;\n\n      if (arr) {\n        if (indexOf) {\n          return indexOf.call(arr, elem, i);\n        }\n\n        len = arr.length;\n        i = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n\n        for (; i < len; i++) {\n          // Skip accessing in sparse arrays\n          if (i in arr && arr[i] === elem) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    },\n\n    merge: function merge(first, second) {\n      var len = +second.length,\n      j = 0,\n      i = first.length;\n\n      while (j < len) {\n        first[i++] = second[j++];\n      }\n\n      // Support: IE<9\n      // Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)\n      if (len !== len) {\n        while (second[j] !== undefined) {\n          first[i++] = second[j++];\n        }\n      }\n\n      first.length = i;\n\n      return first;\n    },\n\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n      matches = [],\n      i = 0,\n      length = elems.length,\n      callbackExpect = !invert;\n\n      // Go through the array, only saving the items\n      // that pass the validator function\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var value,\n      i = 0,\n      length = elems.length,\n      isArray = isArraylike(elems),\n      ret = [];\n\n      // Go through the array, translating each of the items to their new values\n      if (isArray) {\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n\n        // Go through every key on the object,\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      }\n\n      // Flatten any nested arrays\n      return concat.apply([], ret);\n    },\n\n    // A global GUID counter for objects\n    guid: 1,\n\n    // Bind a function to a context, optionally partially applying any\n    // arguments.\n    proxy: function proxy(fn, context) {\n      var args, proxy, tmp;\n\n      if (typeof context === \"string\") {\n        tmp = fn[context];\n        context = fn;\n        fn = tmp;\n      }\n\n      // Quick check to determine if target is callable, in the spec\n      // this throws a TypeError, but we will just return undefined.\n      if (!jQuery.isFunction(fn)) {\n        return undefined;\n      }\n\n      // Simulated bind\n      args = _slice.call(arguments, 2);\n      proxy = function proxy() {\n        return fn.apply(context || this, args.concat(_slice.call(arguments)));\n      };\n\n      // Set the guid of unique handler to the same of original handler, so it can be removed\n      proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n      return proxy;\n    },\n\n    now: function now() {\n      return +new Date();\n    },\n\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support });\n\n\n  // Populate the class2type map\n  jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function (i, name) {\n    class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n  });\n\n  function isArraylike(obj) {\n    var length = obj.length,\n    type = jQuery.type(obj);\n\n    if (type === \"function\" || jQuery.isWindow(obj)) {\n      return false;\n    }\n\n    if (obj.nodeType === 1 && length) {\n      return true;\n    }\n\n    return type === \"array\" || length === 0 ||\n    typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n\n\n  // Initialize a jQuery object\n\n\n  // A central reference to the root jQuery(document)\n  var rootjQuery,\n\n  // Use the correct document accordingly with window argument (sandbox)\n  document = window.document,\n\n  // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n  init = jQuery.fn.init = function (selector, context) {\n    var match, elem;\n\n    // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n    if (!selector) {\n      return this;\n    }\n\n    // Handle HTML strings\n    if (typeof selector === \"string\") {\n      if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n\n      } else {\n        match = rquickExpr.exec(selector);\n      }\n\n      // Match html or make sure no context is specified for #id\n      if (match && (match[1] || !context)) {\n\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context;\n\n          // scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n          jQuery.merge(this, jQuery.parseHTML(\n          match[1],\n          context && context.nodeType ? context.ownerDocument || context : document,\n          true));\n\n\n          // HANDLE: $(html, props)\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (jQuery.isFunction(this[match])) {\n                this[match](context[match]);\n\n                // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this;\n\n          // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          // Check parentNode to catch when Blackberry 4.6 returns\n          // nodes that are no longer in the document #6963\n          if (elem && elem.parentNode) {\n            // Handle the case where IE and Opera return items\n            // by name instead of ID\n            if (elem.id !== match[2]) {\n              return rootjQuery.find(selector);\n            }\n\n            // Otherwise, we inject the element directly into the jQuery object\n            this.length = 1;\n            this[0] = elem;\n          }\n\n          this.context = document;\n          this.selector = selector;\n          return this;\n        }\n\n        // HANDLE: $(expr, $(...))\n      } else if (!context || context.jquery) {\n        return (context || rootjQuery).find(selector);\n\n        // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      }\n\n      // HANDLE: $(DOMElement)\n    } else if (selector.nodeType) {\n      this.context = this[0] = selector;\n      this.length = 1;\n      return this;\n\n      // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (jQuery.isFunction(selector)) {\n      return typeof rootjQuery.ready !== \"undefined\" ?\n      rootjQuery.ready(selector) :\n      // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    if (selector.selector !== undefined) {\n      this.selector = selector.selector;\n      this.context = selector.context;\n    }\n\n    return jQuery.makeArray(selector, this);\n  };\n\n  // Give the init function the jQuery prototype for later instantiation\n  init.prototype = jQuery.fn;\n\n  // Initialize central reference\n  rootjQuery = jQuery(document);\n\n\n  var rnotwhite = /\\S+/g;\n\n  // String to Object options format cache\n  var optionsCache = {};\n\n  // Convert String-formatted options into Object-formatted ones and store in cache\n  function createOptions(options) {\n    var object = optionsCache[options] = {};\n    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n\n  /*\r\n     * Create a callback list using the following parameters:\r\n     *\r\n     *\toptions: an optional list of space-separated options that will change how\r\n     *\t\t\tthe callback list behaves or a more traditional option object\r\n     *\r\n     * By default a callback list will act like an event callback list and can be\r\n     * \"fired\" multiple times.\r\n     *\r\n     * Possible options:\r\n     *\r\n     *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n     *\r\n     *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n     *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n     *\t\t\t\t\tvalues (like a Deferred)\r\n     *\r\n     *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n     *\r\n     *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n     *\r\n     */\n  jQuery.Callbacks = function (options) {\n\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === \"string\" ?\n    optionsCache[options] || createOptions(options) :\n    jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n    // Last fire value (for non-forgettable lists)\n    memory,\n    // Flag to know if list was already fired\n    _fired,\n    // End of the loop when firing\n    firingLength,\n    // Index of currently firing callback (modified by remove if needed)\n    firingIndex,\n    // First callback to fire (used internally by add and fireWith)\n    firingStart,\n    // Actual callback list\n    list = [],\n    // Stack of fire calls for repeatable lists\n    stack = !options.once && [],\n    // Fire callbacks\n    fire = function fire(data) {\n      memory = options.memory && data;\n      _fired = true;\n      firingIndex = firingStart || 0;\n      firingStart = 0;\n      firingLength = list.length;\n      firing = true;\n      for (; list && firingIndex < firingLength; firingIndex++) {\n        if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n          memory = false; // To prevent further calls using add\n          break;\n        }\n      }\n      firing = false;\n      if (list) {\n        if (stack) {\n          if (stack.length) {\n            fire(stack.shift());\n          }\n        } else if (memory) {\n          list = [];\n        } else {\n          self.disable();\n        }\n      }\n    },\n    // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function add() {\n        if (list) {\n          // First, we save the current length\n          var start = list.length;\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              var type = jQuery.type(arg);\n              if (type === \"function\") {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && type !== \"string\") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n          // Do we need to add the callbacks to the\n          // current firing batch?\n          if (firing) {\n            firingLength = list.length;\n            // With memory, if we're not firing then\n            // we should call right away\n          } else if (memory) {\n            firingStart = start;\n            fire(memory);\n          }\n        }\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function remove() {\n        if (list) {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1);\n              // Handle firing indexes\n              if (firing) {\n                if (index <= firingLength) {\n                  firingLength--;\n                }\n                if (index <= firingIndex) {\n                  firingIndex--;\n                }\n              }\n            }\n          });\n        }\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function has(fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);\n      },\n      // Remove all callbacks from the list\n      empty: function empty() {\n        list = [];\n        firingLength = 0;\n        return this;\n      },\n      // Have the list do nothing anymore\n      disable: function disable() {\n        list = stack = memory = undefined;\n        return this;\n      },\n      // Is it disabled?\n      disabled: function disabled() {\n        return !list;\n      },\n      // Lock the list in its current state\n      lock: function lock() {\n        stack = undefined;\n        if (!memory) {\n          self.disable();\n        }\n        return this;\n      },\n      // Is it locked?\n      locked: function locked() {\n        return !stack;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function fireWith(context, args) {\n        if (list && (!_fired || stack)) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          if (firing) {\n            stack.push(args);\n          } else {\n            fire(args);\n          }\n        }\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function fire() {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function fired() {\n        return !!_fired;\n      } };\n\n\n    return self;\n  };\n\n\n  jQuery.extend({\n\n    Deferred: function Deferred(func) {\n      var tuples = [\n      // action, add listener, listener list, final state\n      [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\"],\n      [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\"],\n      [\"notify\", \"progress\", jQuery.Callbacks(\"memory\")]],\n\n      _state = \"pending\",\n      _promise = {\n        state: function state() {\n          return _state;\n        },\n        always: function always() {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        then: function then() /* fnDone, fnFail, fnProgress */{\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (i, tuple) {\n              var fn = jQuery.isFunction(fns[i]) && fns[i];\n              // deferred[ done | fail | progress ] for forwarding actions to newDefer\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n                if (returned && jQuery.isFunction(returned.promise)) {\n                  returned.promise().\n                  done(newDefer.resolve).\n                  fail(newDefer.reject).\n                  progress(newDefer.notify);\n                } else {\n                  newDefer[tuple[0] + \"With\"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function promise(obj) {\n          return obj != null ? jQuery.extend(obj, _promise) : _promise;\n        } },\n\n      deferred = {};\n\n      // Keep pipe for back-compat\n      _promise.pipe = _promise.then;\n\n      // Add list-specific methods\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n        stateString = tuple[3];\n\n        // promise[ done | fail | progress ] = list.add\n        _promise[tuple[1]] = list.add;\n\n        // Handle state\n        if (stateString) {\n          list.add(function () {\n            // state = [ resolved | rejected ]\n            _state = stateString;\n\n            // [ reject_list | resolve_list ].disable; progress_list.lock\n          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n        }\n\n        // deferred[ resolve | reject | notify ]\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + \"With\"](this === deferred ? _promise : this, arguments);\n          return this;\n        };\n        deferred[tuple[0] + \"With\"] = list.fireWith;\n      });\n\n      // Make the deferred a promise\n      _promise.promise(deferred);\n\n      // Call given func if any\n      if (func) {\n        func.call(deferred, deferred);\n      }\n\n      // All done!\n      return deferred;\n    },\n\n    // Deferred helper\n    when: function when(subordinate /* , ..., subordinateN */) {\n      var i = 0,\n      resolveValues = _slice.call(arguments),\n      length = resolveValues.length,\n\n      // the count of uncompleted subordinates\n      remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,\n\n      // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n      deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n      // Update function for both resolve and progress values\n      updateFunc = function updateFunc(i, contexts, values) {\n        return function (value) {\n          contexts[i] = this;\n          values[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n          if (values === progressValues) {\n            deferred.notifyWith(contexts, values);\n\n          } else if (! --remaining) {\n            deferred.resolveWith(contexts, values);\n          }\n        };\n      },\n\n      progressValues,progressContexts,resolveContexts;\n\n      // add listeners to Deferred subordinates; treat others as resolved\n      if (length > 1) {\n        progressValues = new Array(length);\n        progressContexts = new Array(length);\n        resolveContexts = new Array(length);\n        for (; i < length; i++) {\n          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {\n            resolveValues[i].promise().\n            done(updateFunc(i, resolveContexts, resolveValues)).\n            fail(deferred.reject).\n            progress(updateFunc(i, progressContexts, progressValues));\n          } else {\n            --remaining;\n          }\n        }\n      }\n\n      // if we're not waiting on anything, resolve the master\n      if (!remaining) {\n        deferred.resolveWith(resolveContexts, resolveValues);\n      }\n\n      return deferred.promise();\n    } });\n\n\n\n  // The deferred used on DOM ready\n  var readyList;\n\n  jQuery.fn.ready = function (fn) {\n    // Add the callback\n    jQuery.ready.promise().done(fn);\n\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n\n    // Hold (or release) the ready event\n    holdReady: function holdReady(hold) {\n      if (hold) {\n        jQuery.readyWait++;\n      } else {\n        jQuery.ready(true);\n      }\n    },\n\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n\n      // Abort if there are pending holds or we're already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      }\n\n      // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n      if (!document.body) {\n        return setTimeout(jQuery.ready);\n      }\n\n      // Remember that the DOM is ready\n      jQuery.isReady = true;\n\n      // If a normal DOM Ready event fired, decrement, and wait if need be\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      }\n\n      // If there are functions bound, to execute\n      readyList.resolveWith(document, [jQuery]);\n\n      // Trigger any bound ready events\n      if (jQuery.fn.triggerHandler) {\n        jQuery(document).triggerHandler(\"ready\");\n        jQuery(document).off(\"ready\");\n      }\n    } });\n\n\n  /**\r\n           * Clean-up method for dom ready events\r\n           */\n  function detach() {\n    if (document.addEventListener) {\n      document.removeEventListener(\"DOMContentLoaded\", completed, false);\n      window.removeEventListener(\"load\", completed, false);\n\n    } else {\n      document.detachEvent(\"onreadystatechange\", completed);\n      window.detachEvent(\"onload\", completed);\n    }\n  }\n\n  /**\r\n     * The ready event handler and self cleanup method\r\n     */\n  function completed() {\n    // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n    if (document.addEventListener || event.type === \"load\" || document.readyState === \"complete\") {\n      detach();\n      jQuery.ready();\n    }\n  }\n\n  jQuery.ready.promise = function (obj) {\n    if (!readyList) {\n\n      readyList = jQuery.Deferred();\n\n      // Catch cases where $(document).ready() is called after the browser event has already occurred.\n      // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n      if (document.readyState === \"complete\") {\n        // Handle it asynchronously to allow scripts the opportunity to delay ready\n        setTimeout(jQuery.ready);\n\n        // Standards-based browsers support DOMContentLoaded\n      } else if (document.addEventListener) {\n        // Use the handy event callback\n        document.addEventListener(\"DOMContentLoaded\", completed, false);\n\n        // A fallback to window.onload, that will always work\n        window.addEventListener(\"load\", completed, false);\n\n        // If IE event model is used\n      } else {\n        // Ensure firing before onload, maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", completed);\n\n        // A fallback to window.onload, that will always work\n        window.attachEvent(\"onload\", completed);\n\n        // If IE and not a frame\n        // continually check to see if the document is ready\n        var top = false;\n\n        try {\n          top = window.frameElement == null && document.documentElement;\n        } catch (e) {\n        }\n\n        if (top && top.doScroll) {\n          (function doScrollCheck() {\n            if (!jQuery.isReady) {\n\n              try {\n                // Use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                top.doScroll(\"left\");\n              } catch (e) {\n                return setTimeout(doScrollCheck, 50);\n              }\n\n              // detach all dom ready events\n              detach();\n\n              // and execute any waiting functions\n              jQuery.ready();\n            }\n          })();\n        }\n      }\n    }\n    return readyList.promise(obj);\n  };\n\n\n  var strundefined = typeof undefined;\n\n\n  // Support: IE<9\n  // Iteration over object's inherited properties before its own\n  var i;\n  for (i in jQuery(support)) {\n    break;\n  }\n  support.ownLast = i !== \"0\";\n\n  // Note: most support tests are defined in their respective modules.\n  // false until the test is run\n  support.inlineBlockNeedsLayout = false;\n\n\n  // Execute ASAP in case we need to set body.style.zoom\n  jQuery(function () {\n    // Minified: var a,b,c,d\n    var val, div, body, container;\n\n    body = document.getElementsByTagName(\"body\")[0];\n    if (!body || !body.style) {\n      // Return for frameset docs that don't have a body\n      return;\n    }\n\n    // Setup\n    div = document.createElement(\"div\");\n    container = document.createElement(\"div\");\n    container.style.cssText = \"position:absolute;border:0;width:0;height:0;top:0;left:-9999px\";\n    body.appendChild(container).appendChild(div);\n\n    if (typeof div.style.zoom !== strundefined) {\n      // Support: IE<8\n      // Check if natively block-level elements act like inline-block\n      // elements when setting their display to 'inline' and giving\n      // them layout\n      div.style.cssText = \"display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1\";\n\n      support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;\n      if (val) {\n        // Prevent IE 6 from affecting layout for positioned elements #11048\n        // Prevent IE from shrinking the body in IE 7 mode #12869\n        // Support: IE<8\n        body.style.zoom = 1;\n      }\n    }\n\n    body.removeChild(container);\n  });\n\n\n  (function () {\n    var div = document.createElement(\"div\");\n\n    // Execute the test only if not already executed in another module.\n    if (support.deleteExpando == null) {\n      // Support: IE<9\n      support.deleteExpando = true;\n      try {\n        delete div.test;\n      } catch (e) {\n        support.deleteExpando = false;\n      }\n    }\n\n    // Null elements to avoid leaks in IE.\n    div = null;\n  })();\n\n\n  /**\r\n         * Determines whether an object can have data\r\n         */\n  jQuery.acceptData = function (elem) {\n    var noData = jQuery.noData[(elem.nodeName + \" \").toLowerCase()],\n    nodeType = +elem.nodeType || 1;\n\n    // Do not set data on non-element DOM nodes because it will not be cleared (#8335).\n    return nodeType !== 1 && nodeType !== 9 ?\n    false :\n\n    // Nodes accept data unless otherwise specified; rejection can be conditional\n    !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n  };\n\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n  rmultiDash = /([A-Z])/g;\n\n  function dataAttr(elem, key, data) {\n    // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n    if (data === undefined && elem.nodeType === 1) {\n\n      var name = \"data-\" + key.replace(rmultiDash, \"-$1\").toLowerCase();\n\n      data = elem.getAttribute(name);\n\n      if (typeof data === \"string\") {\n        try {\n          data = data === \"true\" ? true :\n          data === \"false\" ? false :\n          data === \"null\" ? null :\n          // Only convert to a number if it doesn't change the string\n          +data + \"\" === data ? +data :\n          rbrace.test(data) ? jQuery.parseJSON(data) :\n          data;\n        } catch (e) {\n        }\n\n        // Make sure we set the data so it isn't changed later\n        jQuery.data(elem, key, data);\n\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  // checks a cache object for emptiness\n  function isEmptyDataObject(obj) {\n    var name;\n    for (name in obj) {\n\n      // if the public data object is empty, the private is still empty\n      if (name === \"data\" && jQuery.isEmptyObject(obj[name])) {\n        continue;\n      }\n      if (name !== \"toJSON\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function internalData(elem, name, data, pvt /* Internal Use Only */) {\n    if (!jQuery.acceptData(elem)) {\n      return;\n    }\n\n    var ret,thisCache,\n    internalKey = jQuery.expando,\n\n    // We have to handle DOM nodes and JS objects differently because IE6-7\n    // can't GC object references properly across the DOM-JS boundary\n    isNode = elem.nodeType,\n\n    // Only DOM nodes need the global jQuery cache; JS object data is\n    // attached directly to the object so GC can occur automatically\n    cache = isNode ? jQuery.cache : elem,\n\n    // Only defining an ID for JS objects if its cache already exists allows\n    // the code to shortcut on the same path as a DOM node with no cache\n    id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;\n\n    // Avoid doing any more work than we need to when trying to get data on an\n    // object that has no data at all\n    if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === \"string\") {\n      return;\n    }\n\n    if (!id) {\n      // Only DOM nodes need a new unique ID for each element since their data\n      // ends up in the global cache\n      if (isNode) {\n        id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;\n      } else {\n        id = internalKey;\n      }\n    }\n\n    if (!cache[id]) {\n      // Avoid exposing jQuery metadata on plain JS objects when the object\n      // is serialized using JSON.stringify\n      cache[id] = isNode ? {} : { toJSON: jQuery.noop };\n    }\n\n    // An object can be passed to jQuery.data instead of a key/value pair; this gets\n    // shallow copied over onto the existing cache\n    if (typeof name === \"object\" || typeof name === \"function\") {\n      if (pvt) {\n        cache[id] = jQuery.extend(cache[id], name);\n      } else {\n        cache[id].data = jQuery.extend(cache[id].data, name);\n      }\n    }\n\n    thisCache = cache[id];\n\n    // jQuery data() is stored in a separate object inside the object's internal data\n    // cache in order to avoid key collisions between internal data and user-defined\n    // data.\n    if (!pvt) {\n      if (!thisCache.data) {\n        thisCache.data = {};\n      }\n\n      thisCache = thisCache.data;\n    }\n\n    if (data !== undefined) {\n      thisCache[jQuery.camelCase(name)] = data;\n    }\n\n    // Check for both converted-to-camel and non-converted data property names\n    // If a data property was specified\n    if (typeof name === \"string\") {\n\n      // First Try to find as-is property data\n      ret = thisCache[name];\n\n      // Test for null|undefined property data\n      if (ret == null) {\n\n        // Try to find the camelCased property\n        ret = thisCache[jQuery.camelCase(name)];\n      }\n    } else {\n      ret = thisCache;\n    }\n\n    return ret;\n  }\n\n  function internalRemoveData(elem, name, pvt) {\n    if (!jQuery.acceptData(elem)) {\n      return;\n    }\n\n    var thisCache,i,\n    isNode = elem.nodeType,\n\n    // See jQuery.data for more information\n    cache = isNode ? jQuery.cache : elem,\n    id = isNode ? elem[jQuery.expando] : jQuery.expando;\n\n    // If there is already no cache entry for this object, there is no\n    // purpose in continuing\n    if (!cache[id]) {\n      return;\n    }\n\n    if (name) {\n\n      thisCache = pvt ? cache[id] : cache[id].data;\n\n      if (thisCache) {\n\n        // Support array or space separated string names for data keys\n        if (!jQuery.isArray(name)) {\n\n          // try the string as a key before any manipulation\n          if (name in thisCache) {\n            name = [name];\n          } else {\n\n            // split the camel cased version by spaces unless a key with the spaces exists\n            name = jQuery.camelCase(name);\n            if (name in thisCache) {\n              name = [name];\n            } else {\n              name = name.split(\" \");\n            }\n          }\n        } else {\n          // If \"name\" is an array of keys...\n          // When data is initially created, via (\"key\", \"val\") signature,\n          // keys will be converted to camelCase.\n          // Since there is no way to tell _how_ a key was added, remove\n          // both plain key and camelCase key. #12786\n          // This will only penalize the array argument path.\n          name = name.concat(jQuery.map(name, jQuery.camelCase));\n        }\n\n        i = name.length;\n        while (i--) {\n          delete thisCache[name[i]];\n        }\n\n        // If there is no data left in the cache, we want to continue\n        // and let the cache object itself get destroyed\n        if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {\n          return;\n        }\n      }\n    }\n\n    // See jQuery.data for more information\n    if (!pvt) {\n      delete cache[id].data;\n\n      // Don't destroy the parent cache unless the internal data object\n      // had been the only thing left in it\n      if (!isEmptyDataObject(cache[id])) {\n        return;\n      }\n    }\n\n    // Destroy the cache\n    if (isNode) {\n      jQuery.cleanData([elem], true);\n\n      // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n      /* jshint eqeqeq: false */\n    } else if (support.deleteExpando || cache != cache.window) {\n      /* jshint eqeqeq: true */\n      delete cache[id];\n\n      // When all else fails, null\n    } else {\n      cache[id] = null;\n    }\n  }\n\n  jQuery.extend({\n    cache: {},\n\n    // The following elements (space-suffixed to avoid Object.prototype collisions)\n    // throw uncatchable exceptions if you attempt to set expando properties\n    noData: {\n      \"applet \": true,\n      \"embed \": true,\n      // ...but Flash objects (which have this classid) *can* handle expandos\n      \"object \": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" },\n\n\n    hasData: function hasData(elem) {\n      elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];\n      return !!elem && !isEmptyDataObject(elem);\n    },\n\n    data: function data(elem, name, _data) {\n      return internalData(elem, name, _data);\n    },\n\n    removeData: function removeData(elem, name) {\n      return internalRemoveData(elem, name);\n    },\n\n    // For internal use only.\n    _data: function _data(elem, name, data) {\n      return internalData(elem, name, data, true);\n    },\n\n    _removeData: function _removeData(elem, name) {\n      return internalRemoveData(elem, name, true);\n    } });\n\n\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,name,data,\n      elem = this[0],\n      attrs = elem && elem.attributes;\n\n      // Special expections of .data basically thwart jQuery.access,\n      // so implement the relevant behavior ourselves\n\n      // Gets all values\n      if (key === undefined) {\n        if (this.length) {\n          data = jQuery.data(elem);\n\n          if (elem.nodeType === 1 && !jQuery._data(elem, \"parsedAttrs\")) {\n            i = attrs.length;\n            while (i--) {\n\n              // Support: IE11+\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n                if (name.indexOf(\"data-\") === 0) {\n                  name = jQuery.camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n            jQuery._data(elem, \"parsedAttrs\", true);\n          }\n        }\n\n        return data;\n      }\n\n      // Sets multiple values\n      if (typeof key === \"object\") {\n        return this.each(function () {\n          jQuery.data(this, key);\n        });\n      }\n\n      return arguments.length > 1 ?\n\n      // Sets one value\n      this.each(function () {\n        jQuery.data(this, key, value);\n      }) :\n\n      // Gets one value\n      // Try to fetch any internally stored data first\n      elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;\n    },\n\n    removeData: function removeData(key) {\n      return this.each(function () {\n        jQuery.removeData(this, key);\n      });\n    } });\n\n\n\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || \"fx\") + \"queue\";\n        queue = jQuery._data(elem, type);\n\n        // Speed up dequeue by getting out quickly if this is just a lookup\n        if (data) {\n          if (!queue || jQuery.isArray(data)) {\n            queue = jQuery._data(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n        return queue || [];\n      }\n    },\n\n    dequeue: function dequeue(elem, type) {\n      type = type || \"fx\";\n\n      var queue = jQuery.queue(elem, type),\n      startLength = queue.length,\n      fn = queue.shift(),\n      hooks = jQuery._queueHooks(elem, type),\n      next = function next() {\n        jQuery.dequeue(elem, type);\n      };\n\n      // If the fx queue is dequeued, always remove the progress sentinel\n      if (fn === \"inprogress\") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === \"fx\") {\n          queue.unshift(\"inprogress\");\n        }\n\n        // clear up the last queue stop function\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n\n    // not intended for public consumption - generates a queueHooks object, or returns the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + \"queueHooks\";\n      return jQuery._data(elem, key) || jQuery._data(elem, key, {\n        empty: jQuery.Callbacks(\"once memory\").add(function () {\n          jQuery._removeData(elem, type + \"queue\");\n          jQuery._removeData(elem, key);\n        }) });\n\n    } });\n\n\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n\n      if (typeof type !== \"string\") {\n        data = type;\n        type = \"fx\";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ?\n      this :\n      this.each(function () {\n        var queue = jQuery.queue(this, type, data);\n\n        // ensure a hooks for this queue\n        jQuery._queueHooks(this, type);\n\n        if (type === \"fx\" && queue[0] !== \"inprogress\") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || \"fx\", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n      count = 1,\n      defer = jQuery.Deferred(),\n      elements = this,\n      i = this.length,\n      resolve = function resolve() {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== \"string\") {\n        obj = type;\n        type = undefined;\n      }\n      type = type || \"fx\";\n\n      while (i--) {\n        tmp = jQuery._data(elements[i], type + \"queueHooks\");\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n      resolve();\n      return defer.promise(obj);\n    } });\n\n\n\n  /*\r\n           * Helper functions for managing events -- not part of the public interface.\r\n           * Props to Dean Edwards' addEvent library for many of the ideas.\r\n           */\n  jQuery.event = {\n\n    global: {},\n\n    add: function add(elem, types, handler, data, selector) {\n      var tmp,events,t,handleObjIn,\n      special,eventHandle,handleObj,\n      handlers,type,namespaces,origType,\n      elemData = jQuery._data(elem);\n\n      // Don't attach events to noData or text/comment nodes (but allow plain objects)\n      if (!elemData) {\n        return;\n      }\n\n      // Caller can pass in an object of custom data in lieu of the handler\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      }\n\n      // Make sure that the handler has a unique ID, used to find/remove it later\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      }\n\n      // Init the element's event structure and main handler, if this is the first\n      if (!(events = elemData.events)) {\n        events = elemData.events = {};\n      }\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?\n          jQuery.event.dispatch.apply(eventHandle.elem, arguments) :\n          undefined;\n        };\n        // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n        eventHandle.elem = elem;\n      }\n\n      // Handle multiple events separated by a space\n      types = (types || \"\").match(rnotwhite) || [\"\"];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort();\n\n        // There *must* be a type, no attaching namespace-only handlers\n        if (!type) {\n          continue;\n        }\n\n        // If event changes its type, use the special event handlers for the changed type\n        special = jQuery.event.special[type] || {};\n\n        // If selector defined, determine special event api type, otherwise given type\n        type = (selector ? special.delegateType : special.bindType) || type;\n\n        // Update special based on newly reset type\n        special = jQuery.event.special[type] || {};\n\n        // handleObj is passed to all event handlers\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(\".\") },\n        handleObjIn);\n\n        // Init the event handler queue if we're the first\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0;\n\n          // Only use addEventListener/attachEvent if the special events handler returns false\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            // Bind the global event handler to the element\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle, false);\n\n            } else if (elem.attachEvent) {\n              elem.attachEvent(\"on\" + type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        }\n\n        // Add to the element's handler list, delegates in front\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        }\n\n        // Keep track of which events have ever been used, for event optimization\n        jQuery.event.global[type] = true;\n      }\n\n      // Nullify elem to prevent memory leaks in IE\n      elem = null;\n    },\n\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,handleObj,tmp,\n      origCount,t,events,\n      special,handlers,type,\n      namespaces,origType,\n      elemData = jQuery.hasData(elem) && jQuery._data(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      }\n\n      // Once for each type.namespace in types; type may be omitted\n      types = (types || \"\").match(rnotwhite) || [\"\"];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || \"\").split(\".\").sort();\n\n        // Unbind all events (on this namespace, if provided) for the element\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n        // Remove matching events\n        origCount = j = handlers.length;\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (\n          !handler || handler.guid === handleObj.guid) && (\n          !tmp || tmp.test(handleObj.namespace)) && (\n          !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        }\n\n        // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      }\n\n      // Remove the expando if it's no longer used\n      if (jQuery.isEmptyObject(events)) {\n        delete elemData.handle;\n\n        // removeData also checks for emptiness and clears the expando if empty\n        // so use it instead of delete\n        jQuery._removeData(elem, \"events\");\n      }\n    },\n\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var handle,ontype,cur,\n      bubbleType,special,tmp,i,\n      eventPath = [elem || document],\n      type = hasOwn.call(event, \"type\") ? event.type : event,\n      namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n      cur = tmp = elem = elem || document;\n\n      // Don't do events on text and comment nodes\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      }\n\n      // focus/blur morphs to focusin/out; ensure we're not firing them right now\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(\".\") >= 0) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(\".\");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n      ontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n      // Caller can pass in a jQuery.Event object, Object, or just an event type string\n      event = event[jQuery.expando] ?\n      event :\n      new jQuery.Event(type, typeof event === \"object\" && event);\n\n      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(\".\");\n      event.namespace_re = event.namespace ?\n      new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") :\n      null;\n\n      // Clean up the event in case it is being reused\n      event.result = undefined;\n      if (!event.target) {\n        event.target = elem;\n      }\n\n      // Clone any incoming data and prepend the event, creating the handler arg list\n      data = data == null ?\n      [event] :\n      jQuery.makeArray(data, [event]);\n\n      // Allow special events to draw outside the lines\n      special = jQuery.event.special[type] || {};\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      }\n\n      // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n        bubbleType = special.delegateType || type;\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        }\n\n        // Only add window if we got to document (e.g., not plain obj or detached DOM)\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      }\n\n      // Fire handlers on the event path\n      i = 0;\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n        event.type = i > 1 ?\n        bubbleType :\n        special.bindType || type;\n\n        // jQuery handler\n        handle = (jQuery._data(cur, \"events\") || {})[event.type] && jQuery._data(cur, \"handle\");\n        if (handle) {\n          handle.apply(cur, data);\n        }\n\n        // Native handler\n        handle = ontype && cur[ontype];\n        if (handle && handle.apply && jQuery.acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n      event.type = type;\n\n      // If nobody prevented the default action, do it now\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) &&\n        jQuery.acceptData(elem)) {\n\n          // Call a native DOM method on the target with the same name name as the event.\n          // Can't use an .isFunction() check here because IE6/7 fails that test.\n          // Don't do default actions on window, that's where global variables be (#6170)\n          if (ontype && elem[type] && !jQuery.isWindow(elem)) {\n\n            // Don't re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            }\n\n            // Prevent re-triggering of the same event, since we already bubbled it above\n            jQuery.event.triggered = type;\n            try {\n              elem[type]();\n            } catch (e) {\n              // IE<9 dies on focus/blur to hidden element (#1486,#12518)\n              // only reproducible on winXP IE8 native, not IE9 in IE8 mode\n            }\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n\n    dispatch: function dispatch(event) {\n\n      // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(event);\n\n      var i,ret,handleObj,matched,j,\n      handlerQueue = [],\n      args = _slice.call(arguments),\n      handlers = (jQuery._data(this, \"events\") || {})[event.type] || [],\n      special = jQuery.event.special[event.type] || {};\n\n      // Use the fix-ed jQuery.Event rather than the (read-only) native event\n      args[0] = event;\n      event.delegateTarget = this;\n\n      // Call the preDispatch hook for the mapped type, and let it bail if desired\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      }\n\n      // Determine handlers\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n      // Run delegates first; they may want to stop propagation beneath us\n      i = 0;\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n\n        j = 0;\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n          // Triggered event must either 1) have no namespace, or\n          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {\n\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).\n            apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      }\n\n      // Call the postDispatch hook for the mapped type\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n\n    handlers: function handlers(event, _handlers) {\n      var sel,handleObj,matches,i,\n      handlerQueue = [],\n      delegateCount = _handlers.delegateCount,\n      cur = event.target;\n\n      // Find delegate handlers\n      // Black-hole SVG <use> instance trees (#13180)\n      // Avoid non-left-click bubbling in Firefox (#3861)\n      if (delegateCount && cur.nodeType && (!event.button || event.type !== \"click\")) {\n\n        /* jshint eqeqeq: false */\n        for (; cur != this; cur = cur.parentNode || this) {\n          /* jshint eqeqeq: true */\n\n          // Don't check non-elements (#13208)\n          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\")) {\n            matches = [];\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i];\n\n              // Don't conflict with Object.prototype properties (#13203)\n              sel = handleObj.selector + \" \";\n\n              if (matches[sel] === undefined) {\n                matches[sel] = handleObj.needsContext ?\n                jQuery(sel, this).index(cur) >= 0 :\n                jQuery.find(sel, this, null, [cur]).length;\n              }\n              if (matches[sel]) {\n                matches.push(handleObj);\n              }\n            }\n            if (matches.length) {\n              handlerQueue.push({ elem: cur, handlers: matches });\n            }\n          }\n        }\n      }\n\n      // Add the remaining (directly-bound) handlers\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });\n      }\n\n      return handlerQueue;\n    },\n\n    fix: function fix(event) {\n      if (event[jQuery.expando]) {\n        return event;\n      }\n\n      // Create a writable copy of the event object and normalize some properties\n      var i,prop,copy,\n      type = event.type,\n      originalEvent = event,\n      fixHook = this.fixHooks[type];\n\n      if (!fixHook) {\n        this.fixHooks[type] = fixHook =\n        rmouseEvent.test(type) ? this.mouseHooks :\n        rkeyEvent.test(type) ? this.keyHooks :\n        {};\n      }\n      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;\n\n      event = new jQuery.Event(originalEvent);\n\n      i = copy.length;\n      while (i--) {\n        prop = copy[i];\n        event[prop] = originalEvent[prop];\n      }\n\n      // Support: IE<9\n      // Fix target property (#1925)\n      if (!event.target) {\n        event.target = originalEvent.srcElement || document;\n      }\n\n      // Support: Chrome 23+, Safari?\n      // Target should not be a text node (#504, #13143)\n      if (event.target.nodeType === 3) {\n        event.target = event.target.parentNode;\n      }\n\n      // Support: IE<9\n      // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n      event.metaKey = !!event.metaKey;\n\n      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;\n    },\n\n    // Includes some event props shared by KeyEvent and MouseEvent\n    props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n    fixHooks: {},\n\n    keyHooks: {\n      props: \"char charCode key keyCode\".split(\" \"),\n      filter: function filter(event, original) {\n\n        // Add which for key events\n        if (event.which == null) {\n          event.which = original.charCode != null ? original.charCode : original.keyCode;\n        }\n\n        return event;\n      } },\n\n\n    mouseHooks: {\n      props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n      filter: function filter(event, original) {\n        var body,eventDoc,doc,\n        button = original.button,\n        fromElement = original.fromElement;\n\n        // Calculate pageX/Y if missing and clientX/Y available\n        if (event.pageX == null && original.clientX != null) {\n          eventDoc = event.target.ownerDocument || document;\n          doc = eventDoc.documentElement;\n          body = eventDoc.body;\n\n          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n        }\n\n        // Add relatedTarget, if necessary\n        if (!event.relatedTarget && fromElement) {\n          event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n        }\n\n        // Add which for click: 1 === left; 2 === middle; 3 === right\n        // Note: button is not normalized, so don't use it\n        if (!event.which && button !== undefined) {\n          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n        }\n\n        return event;\n      } },\n\n\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true },\n\n      focus: {\n        // Fire native event if possible so blur/focus sequence is correct\n        trigger: function trigger() {\n          if (this !== safeActiveElement() && this.focus) {\n            try {\n              this.focus();\n              return false;\n            } catch (e) {\n              // Support: IE<9\n              // If we error on focus to hidden element (#1486, #12518),\n              // let .trigger() run the handlers\n            }\n          }\n        },\n        delegateType: \"focusin\" },\n\n      blur: {\n        trigger: function trigger() {\n          if (this === safeActiveElement() && this.blur) {\n            this.blur();\n            return false;\n          }\n        },\n        delegateType: \"focusout\" },\n\n      click: {\n        // For checkbox, fire native event so checked state will be right\n        trigger: function trigger() {\n          if (jQuery.nodeName(this, \"input\") && this.type === \"checkbox\" && this.click) {\n            this.click();\n            return false;\n          }\n        },\n\n        // For cross-browser consistency, don't fire native .click() on links\n        _default: function _default(event) {\n          return jQuery.nodeName(event.target, \"a\");\n        } },\n\n\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n\n          // Support: Firefox 20+\n          // Firefox doesn't alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        } } },\n\n\n\n    simulate: function simulate(type, elem, event, bubble) {\n      // Piggyback on a donor event to simulate a different one.\n      // Fake originalEvent to avoid donor's stopPropagation, but if the\n      // simulated event prevents default then we do the same on the donor.\n      var e = jQuery.extend(\n      new jQuery.Event(),\n      event,\n      {\n        type: type,\n        isSimulated: true,\n        originalEvent: {} });\n\n\n      if (bubble) {\n        jQuery.event.trigger(e, null, elem);\n      } else {\n        jQuery.event.dispatch.call(elem, e);\n      }\n      if (e.isDefaultPrevented()) {\n        event.preventDefault();\n      }\n    } };\n\n\n  jQuery.removeEvent = document.removeEventListener ?\n  function (elem, type, handle) {\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle, false);\n    }\n  } :\n  function (elem, type, handle) {\n    var name = \"on\" + type;\n\n    if (elem.detachEvent) {\n\n      // #8545, #7054, preventing memory leaks for custom events in IE6-8\n      // detachEvent needed property on element, by name of that event, to properly expose it to GC\n      if (typeof elem[name] === strundefined) {\n        elem[name] = null;\n      }\n\n      elem.detachEvent(name, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the 'new' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    }\n\n    // Event object\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type;\n\n      // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n      this.isDefaultPrevented = src.defaultPrevented ||\n      src.defaultPrevented === undefined &&\n      // Support: IE < 9, Android < 4.0\n      src.returnValue === false ?\n      returnTrue :\n      returnFalse;\n\n      // Event type\n    } else {\n      this.type = src;\n    }\n\n    // Put explicitly provided properties onto the event object\n    if (props) {\n      jQuery.extend(this, props);\n    }\n\n    // Create a timestamp if incoming event doesn't have one\n    this.timeStamp = src && src.timeStamp || jQuery.now();\n\n    // Mark it as fixed\n    this[jQuery.expando] = true;\n  };\n\n  var rformElems = /^(?:input|select|textarea)$/i,\n  rkeyEvent = /^key/,\n  rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,\n  rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n  rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  }\n\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n  jQuery.Event.prototype = {\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n\n      this.isDefaultPrevented = returnTrue;\n      if (!e) {\n        return;\n      }\n\n      // If preventDefault exists, run it on the original event\n      if (e.preventDefault) {\n        e.preventDefault();\n\n        // Support: IE\n        // Otherwise set the returnValue property of the original event to false\n      } else {\n        e.returnValue = false;\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n\n      this.isPropagationStopped = returnTrue;\n      if (!e) {\n        return;\n      }\n      // If stopPropagation exists, run it on the original event\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      // Support: IE\n      // Set the cancelBubble property of the original event to true\n      e.cancelBubble = true;\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && e.stopImmediatePropagation) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    } };\n\n\n\n  // IE submit delegation\n  if (!support.submitBubbles) {\n\n    jQuery.event.special.submit = {\n      setup: function setup() {\n        // Only need this for delegated form submit events\n        if (jQuery.nodeName(this, \"form\")) {\n          return false;\n        }\n\n        // Lazy-add a submit handler when a descendant form may potentially be submitted\n        jQuery.event.add(this, \"click._submit keypress._submit\", function (e) {\n          // Node name check avoids a VML-related crash in IE (#9807)\n          var elem = e.target,\n          form = jQuery.nodeName(elem, \"input\") || jQuery.nodeName(elem, \"button\") ? elem.form : undefined;\n          if (form && !jQuery._data(form, \"submitBubbles\")) {\n            jQuery.event.add(form, \"submit._submit\", function (event) {\n              event._submit_bubble = true;\n            });\n            jQuery._data(form, \"submitBubbles\", true);\n          }\n        });\n        // return undefined since we don't need an event listener\n      },\n\n      postDispatch: function postDispatch(event) {\n        // If form was submitted by the user, bubble the event up the tree\n        if (event._submit_bubble) {\n          delete event._submit_bubble;\n          if (this.parentNode && !event.isTrigger) {\n            jQuery.event.simulate(\"submit\", this.parentNode, event, true);\n          }\n        }\n      },\n\n      teardown: function teardown() {\n        // Only need this for delegated form submit events\n        if (jQuery.nodeName(this, \"form\")) {\n          return false;\n        }\n\n        // Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n        jQuery.event.remove(this, \"._submit\");\n      } };\n\n  }\n\n  // IE change delegation and checkbox/radio fix\n  if (!support.changeBubbles) {\n\n    jQuery.event.special.change = {\n\n      setup: function setup() {\n\n        if (rformElems.test(this.nodeName)) {\n          // IE doesn't fire change on a check/radio until blur; trigger it on click\n          // after a propertychange. Eat the blur-change in special.change.handle.\n          // This still fires onchange a second time for check/radio after blur.\n          if (this.type === \"checkbox\" || this.type === \"radio\") {\n            jQuery.event.add(this, \"propertychange._change\", function (event) {\n              if (event.originalEvent.propertyName === \"checked\") {\n                this._just_changed = true;\n              }\n            });\n            jQuery.event.add(this, \"click._change\", function (event) {\n              if (this._just_changed && !event.isTrigger) {\n                this._just_changed = false;\n              }\n              // Allow triggered, simulated change events (#11500)\n              jQuery.event.simulate(\"change\", this, event, true);\n            });\n          }\n          return false;\n        }\n        // Delegated event; lazy-add a change handler on descendant inputs\n        jQuery.event.add(this, \"beforeactivate._change\", function (e) {\n          var elem = e.target;\n\n          if (rformElems.test(elem.nodeName) && !jQuery._data(elem, \"changeBubbles\")) {\n            jQuery.event.add(elem, \"change._change\", function (event) {\n              if (this.parentNode && !event.isSimulated && !event.isTrigger) {\n                jQuery.event.simulate(\"change\", this.parentNode, event, true);\n              }\n            });\n            jQuery._data(elem, \"changeBubbles\", true);\n          }\n        });\n      },\n\n      handle: function handle(event) {\n        var elem = event.target;\n\n        // Swallow native change events from checkbox/radio, we already triggered them above\n        if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== \"radio\" && elem.type !== \"checkbox\") {\n          return event.handleObj.handler.apply(this, arguments);\n        }\n      },\n\n      teardown: function teardown() {\n        jQuery.event.remove(this, \"._change\");\n\n        return !rformElems.test(this.nodeName);\n      } };\n\n  }\n\n  // Create \"bubbling\" focus and blur events\n  if (!support.focusinBubbles) {\n    jQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function handler(event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function setup() {\n          var doc = this.ownerDocument || this,\n          attaches = jQuery._data(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n          jQuery._data(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function teardown() {\n          var doc = this.ownerDocument || this,\n          attaches = jQuery._data(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            jQuery._removeData(doc, fix);\n          } else {\n            jQuery._data(doc, fix, attaches);\n          }\n        } };\n\n    });\n  }\n\n  jQuery.fn.extend({\n\n    on: function on(types, selector, data, fn, /*INTERNAL*/one) {\n      var type, origFn;\n\n      // Types can be a map of types/handlers\n      if (typeof types === \"object\") {\n        // ( types-Object, selector, data )\n        if (typeof selector !== \"string\") {\n          // ( types-Object, data )\n          data = data || selector;\n          selector = undefined;\n        }\n        for (type in types) {\n          this.on(type, selector, data, types[type], one);\n        }\n        return this;\n      }\n\n      if (data == null && fn == null) {\n        // ( types, fn )\n        fn = selector;\n        data = selector = undefined;\n      } else if (fn == null) {\n        if (typeof selector === \"string\") {\n          // ( types, selector, fn )\n          fn = data;\n          data = undefined;\n        } else {\n          // ( types, data, fn )\n          fn = data;\n          data = selector;\n          selector = undefined;\n        }\n      }\n      if (fn === false) {\n        fn = returnFalse;\n      } else if (!fn) {\n        return this;\n      }\n\n      if (one === 1) {\n        origFn = fn;\n        fn = function fn(event) {\n          // Can use an empty set, since event contains the info\n          jQuery().off(event);\n          return origFn.apply(this, arguments);\n        };\n        // Use same guid so caller can remove using origFn\n        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n      }\n      return this.each(function () {\n        jQuery.event.add(this, types, fn, data, selector);\n      });\n    },\n    one: function one(types, selector, data, fn) {\n      return this.on(types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(\n        handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,\n        handleObj.selector,\n        handleObj.handler);\n\n        return this;\n      }\n      if (typeof types === \"object\") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n        return this;\n      }\n      if (selector === false || typeof selector === \"function\") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n      if (fn === false) {\n        fn = returnFalse;\n      }\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    },\n\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    } });\n\n\n\n  // Based off of the plugin by Clint Helfers, with permission.\n  // http://blindsignals.com/index.php/2009/07/jquery-delay/\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || \"fx\";\n\n    return this.queue(type, function (next, hooks) {\n      var timeout = setTimeout(next, time);\n      hooks.stop = function () {\n        clearTimeout(timeout);\n      };\n    });\n  };\n\n\n  var nonce = jQuery.now();\n\n  var rquery = /\\?/;\n\n\n  var rvalidtokens = /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;\n\n  jQuery.parseJSON = function (data) {\n    // Attempt to parse using the native JSON parser first\n    if (window.JSON && window.JSON.parse) {\n      // Support: Android 2.3\n      // Workaround failure to string-cast null input\n      return window.JSON.parse(data + \"\");\n    }\n\n    var requireNonComma,\n    depth = null,\n    str = jQuery.trim(data + \"\");\n\n    // Guard against invalid (and possibly dangerous) input by ensuring that nothing remains\n    // after removing valid tokens\n    return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {\n\n      // Force termination if we see a misplaced comma\n      if (requireNonComma && comma) {\n        depth = 0;\n      }\n\n      // Perform no more replacements after returning to outermost depth\n      if (depth === 0) {\n        return token;\n      }\n\n      // Commas must not follow \"[\", \"{\", or \",\"\n      requireNonComma = open || comma;\n\n      // Determine new depth\n      // array/object open (\"[\" or \"{\"): depth += true - false (increment)\n      // array/object close (\"]\" or \"}\"): depth += false - true (decrement)\n      // other cases (\",\" or primitive): depth += true - true (numeric cast)\n      depth += !close - !open;\n\n      // Remove this token\n      return \"\";\n    })) ?\n    Function(\"return \" + str)() :\n    jQuery.error(\"Invalid JSON: \" + data);\n  };\n\n\n  // Cross-browser xml parsing\n  jQuery.parseXML = function (data) {\n    var xml, tmp;\n    if (!data || typeof data !== \"string\") {\n      return null;\n    }\n    try {\n      if (window.DOMParser) {// Standard\n        tmp = new DOMParser();\n        xml = tmp.parseFromString(data, \"text/xml\");\n      } else {// IE\n        xml = new ActiveXObject(\"Microsoft.XMLDOM\");\n        xml.async = \"false\";\n        xml.loadXML(data);\n      }\n    } catch (e) {\n      xml = undefined;\n    }\n    if (!xml || !xml.documentElement || xml.getElementsByTagName(\"parsererror\").length) {\n      jQuery.error(\"Invalid XML: \" + data);\n    }\n    return xml;\n  };\n\n\n  var\n  // Document location\n  ajaxLocParts,\n  ajaxLocation,\n\n  rhash = /#.*$/,\n  rts = /([?&])_=[^&]*/,\n  rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, // IE leaves an \\r character at EOL\n  // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n  rnoContent = /^(?:GET|HEAD)$/,\n  rprotocol = /^\\/\\//,\n  rurl = /^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n  /* Prefilters\r\n                                                                       * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n                                                                       * 2) These are called:\r\n                                                                       *    - BEFORE asking for a transport\r\n                                                                       *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n                                                                       * 3) key is the dataType\r\n                                                                       * 4) the catchall symbol \"*\" can be used\r\n                                                                       * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n                                                                       */\n  prefilters = {},\n\n  /* Transports bindings\r\n                    * 1) key is the dataType\r\n                    * 2) the catchall symbol \"*\" can be used\r\n                    * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n                    */\n  transports = {},\n\n  // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = \"*/\".concat(\"*\");\n\n  // #8138, IE may throw an exception when accessing\n  // a field from window.location if document.domain has been set\n  try {\n    ajaxLocation = location.href;\n  } catch (e) {\n    // Use the href attribute of an A element\n    // since IE will modify it given document.location\n    ajaxLocation = document.createElement(\"a\");\n    ajaxLocation.href = \"\";\n    ajaxLocation = ajaxLocation.href;\n  }\n\n  // Segment location into parts\n  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];\n\n  // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n  function addToPrefiltersOrTransports(structure) {\n\n    // dataTypeExpression is optional and defaults to \"*\"\n    return function (dataTypeExpression, func) {\n\n      if (typeof dataTypeExpression !== \"string\") {\n        func = dataTypeExpression;\n        dataTypeExpression = \"*\";\n      }\n\n      var dataType,\n      i = 0,\n      dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\n\n      if (jQuery.isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType.charAt(0) === \"+\") {\n            dataType = dataType.slice(1) || \"*\";\n            (structure[dataType] = structure[dataType] || []).unshift(func);\n\n            // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  }\n\n  // Base inspection function for prefilters and transports\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n    var inspected = {},\n    seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n        if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n  }\n\n  // A special extend for ajax options\n  // that takes \"flat\" options (not to be deep extended)\n  // Fixes #9887\n  function ajaxExtend(target, src) {\n    var deep,key,\n    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n\n  /* Handles responses to an ajax request:\r\n     * - finds the right dataType (mediates between content-type and expected dataType)\r\n     * - returns the corresponding response\r\n     */\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var firstDataType,ct,finalDataType,type,\n    contents = s.contents,\n    dataTypes = s.dataTypes;\n\n    // Remove auto dataType and get content-type in the process\n    while (dataTypes[0] === \"*\") {\n      dataTypes.shift();\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n      }\n    }\n\n    // Check if we're dealing with a known content-type\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    }\n\n    // Check to see if we have a response for the expected dataType\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      }\n      // Or just use first one\n      finalDataType = finalDataType || firstDataType;\n    }\n\n    // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n      return responses[finalDataType];\n    }\n  }\n\n  /* Chain conversions given the request and the original response\r\n     * Also sets the responseXXX fields on the jqXHR instance\r\n     */\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,current,conv,tmp,prev,\n    converters = {},\n    // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice();\n\n    // Create converters map with lowercased keys\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift();\n\n    // Convert to each sequential dataType\n    while (current) {\n\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      }\n\n      // Apply the dataFilter if provided\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n\n        // There's only work to do if current dataType is non-auto\n        if (current === \"*\") {\n\n          current = prev;\n\n          // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== \"*\" && prev !== current) {\n\n          // Seek a direct converter\n          conv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n          // If none found, seek a pair\n          if (!conv) {\n            for (conv2 in converters) {\n\n              // If conv2 outputs current\n              tmp = conv2.split(\" \");\n              if (tmp[1] === current) {\n\n                // If prev can be converted to accepted input\n                conv = converters[prev + \" \" + tmp[0]] ||\n                converters[\"* \" + tmp[0]];\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2];\n\n                    // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n                  break;\n                }\n              }\n            }\n          }\n\n          // Apply converter (if not an equivalence)\n          if (conv !== true) {\n\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s[\"throws\"]) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: \"parsererror\",\n                  error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return { state: \"success\", data: response };\n  }\n\n  jQuery.extend({\n\n    // Counter for holding the number of active queries\n    active: 0,\n\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n\n    ajaxSettings: {\n      url: ajaxLocation,\n      type: \"GET\",\n      isLocal: rlocalProtocol.test(ajaxLocParts[1]),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      /*\r\n                                                                        timeout: 0,\r\n                                                                        data: null,\r\n                                                                        dataType: null,\r\n                                                                        username: null,\r\n                                                                        password: null,\r\n                                                                        cache: null,\r\n                                                                        throws: false,\r\n                                                                        traditional: false,\r\n                                                                        headers: {},\r\n                                                                        */\n\n      accepts: {\n        \"*\": allTypes,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\" },\n\n\n      contents: {\n        xml: /xml/,\n        html: /html/,\n        json: /json/ },\n\n\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\" },\n\n\n      // Data converters\n      // Keys separate source (or catchall \"*\") and destination types with a single space\n      converters: {\n\n        // Convert anything to text\n        \"* text\": String,\n\n        // Text to html (true = no transformation)\n        \"text html\": true,\n\n        // Evaluate text as a json expression\n        \"text json\": jQuery.parseJSON,\n\n        // Parse text as xml\n        \"text xml\": jQuery.parseXML },\n\n\n      // For options that shouldn't be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn't be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true } },\n\n\n\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ?\n\n      // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n      // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n\n    // Main method\n    ajax: function ajax(url, options) {\n\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === \"object\") {\n        options = url;\n        url = undefined;\n      }\n\n      // Force options to be an object\n      options = options || {};\n\n      var // Cross-domain detection vars\n      parts,\n      // Loop variable\n      i,\n      // URL without anti-cache param\n      cacheURL,\n      // Response headers as string\n      responseHeadersString,\n      // timeout handle\n      timeoutTimer,\n\n      // To know if global events are to be dispatched\n      fireGlobals,\n\n      transport,\n      // Response headers\n      responseHeaders,\n      // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n      // Callbacks context\n      callbackContext = s.context || s,\n      // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ?\n      jQuery(callbackContext) :\n      jQuery.event,\n      // Deferreds\n      deferred = jQuery.Deferred(),\n      completeDeferred = jQuery.Callbacks(\"once memory\"),\n      // Status-dependent callbacks\n      _statusCode = s.statusCode || {},\n      // Headers (they are sent all at once)\n      requestHeaders = {},\n      requestHeadersNames = {},\n      // The jqXHR state\n      state = 0,\n      // Default abort message\n      strAbort = \"canceled\",\n      // Fake xhr\n      jqXHR = {\n        readyState: 0,\n\n        // Builds headers hashtable if needed\n        getResponseHeader: function getResponseHeader(key) {\n          var match;\n          if (state === 2) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase()] = match[2];\n              }\n            }\n            match = responseHeaders[key.toLowerCase()];\n          }\n          return match == null ? null : match;\n        },\n\n        // Raw string\n        getAllResponseHeaders: function getAllResponseHeaders() {\n          return state === 2 ? responseHeadersString : null;\n        },\n\n        // Caches the header\n        setRequestHeader: function setRequestHeader(name, value) {\n          var lname = name.toLowerCase();\n          if (!state) {\n            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;\n            requestHeaders[name] = value;\n          }\n          return this;\n        },\n\n        // Overrides response content-type header\n        overrideMimeType: function overrideMimeType(type) {\n          if (!state) {\n            s.mimeType = type;\n          }\n          return this;\n        },\n\n        // Status-dependent callbacks\n        statusCode: function statusCode(map) {\n          var code;\n          if (map) {\n            if (state < 2) {\n              for (code in map) {\n                // Lazy-add the new callback in a way that preserves old ones\n                _statusCode[code] = [_statusCode[code], map[code]];\n              }\n            } else {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            }\n          }\n          return this;\n        },\n\n        // Cancel the request\n        abort: function abort(statusText) {\n          var finalText = statusText || strAbort;\n          if (transport) {\n            transport.abort(finalText);\n          }\n          done(0, finalText);\n          return this;\n        } };\n\n\n      // Attach deferreds\n      deferred.promise(jqXHR).complete = completeDeferred.add;\n      jqXHR.success = jqXHR.done;\n      jqXHR.error = jqXHR.fail;\n\n      // Remove hash character (#7531: and string promotion)\n      // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n      s.url = ((url || s.url || ajaxLocation) + \"\").replace(rhash, \"\").replace(rprotocol, ajaxLocParts[1] + \"//\");\n\n      // Alias method option to type as per ticket #12004\n      s.type = options.method || options.type || s.method || s.type;\n\n      // Extract dataTypes list\n      s.dataTypes = jQuery.trim(s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"];\n\n      // A cross-domain request is in order when we have a protocol:host:port mismatch\n      if (s.crossDomain == null) {\n        parts = rurl.exec(s.url.toLowerCase());\n        s.crossDomain = !!(parts && (\n        parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] ||\n        (parts[3] || (parts[1] === \"http:\" ? \"80\" : \"443\")) !== (\n        ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? \"80\" : \"443\"))));\n\n      }\n\n      // Convert data if not already a string\n      if (s.data && s.processData && typeof s.data !== \"string\") {\n        s.data = jQuery.param(s.data, s.traditional);\n      }\n\n      // Apply prefilters\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n      // If request was aborted inside a prefilter, stop there\n      if (state === 2) {\n        return jqXHR;\n      }\n\n      // We can fire global events as of now if asked to\n      fireGlobals = s.global;\n\n      // Watch for a new set of requests\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger(\"ajaxStart\");\n      }\n\n      // Uppercase the type\n      s.type = s.type.toUpperCase();\n\n      // Determine if request has content\n      s.hasContent = !rnoContent.test(s.type);\n\n      // Save the URL in case we're toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      cacheURL = s.url;\n\n      // More options handling for requests with no content\n      if (!s.hasContent) {\n\n        // If data is available, append data to url\n        if (s.data) {\n          cacheURL = s.url += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n          // #9682: remove data so that it's not used in an eventual retry\n          delete s.data;\n        }\n\n        // Add anti-cache in url if needed\n        if (s.cache === false) {\n          s.url = rts.test(cacheURL) ?\n\n          // If there is already a '_' parameter, set its value\n          cacheURL.replace(rts, \"$1_=\" + nonce++) :\n\n          // Otherwise add one to the end\n          cacheURL + (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++;\n        }\n      }\n\n      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n        }\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n        }\n      }\n\n      // Set the correct header, if data is being sent\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n      }\n\n      // Set the Accepts header for the server, depending on the dataType\n      // jqXHR.setRequestHeader(\n      //     \"Accept\",\n      //     s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?\n      //         s.accepts[s.dataTypes[0]] + ( s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n      //         s.accepts[\"*\"]\n      // );\n\n      // Check for headers option\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      }\n\n      // Allow custom headers/mimetypes and early abort\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      }\n\n      // aborting is no longer a cancellation\n      strAbort = \"abort\";\n\n      // Install callbacks on deferreds\n      for (i in { success: 1, error: 1, complete: 1 }) {\n        jqXHR[i](s[i]);\n      }\n\n      // Get transport\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n      // If no transport, we auto-abort\n      if (!transport) {\n        done(-1, \"No Transport\");\n      } else {\n        jqXHR.readyState = 1;\n\n        // Send global event\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n        }\n        // Timeout\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = setTimeout(function () {\n            jqXHR.abort(\"timeout\");\n          }, s.timeout);\n        }\n\n        try {\n          state = 1;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Propagate exception as error if not done\n          if (state < 2) {\n            done(-1, e);\n            // Simply rethrow otherwise\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      // Callback for when everything is done\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,success,error,response,modified,\n        statusText = nativeStatusText;\n\n        // Called once\n        if (state === 2) {\n          return;\n        }\n\n        // State is \"done\" now\n        state = 2;\n\n        // Clear timeout if it exists\n        if (timeoutTimer) {\n          clearTimeout(timeoutTimer);\n        }\n\n        // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n        transport = undefined;\n\n        // Cache response headers\n        responseHeadersString = headers || \"\";\n\n        // Set readyState\n        jqXHR.readyState = status > 0 ? 4 : 0;\n\n        // Determine if successful\n        isSuccess = status >= 200 && status < 300 || status === 304;\n\n        // Get response data\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        }\n\n        // Convert no matter what (that way responseXXX fields are always set)\n        response = ajaxConvert(s, response, jqXHR, isSuccess);\n\n        // If successful, handle type chaining\n        if (isSuccess) {\n\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader(\"Last-Modified\");\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n            modified = jqXHR.getResponseHeader(\"etag\");\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          }\n\n          // if no content\n          if (status === 204 || s.type === \"HEAD\") {\n            statusText = \"nocontent\";\n\n            // if not modified\n          } else if (status === 304) {\n            statusText = \"notmodified\";\n\n            // If we have data, let's convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // We extract error from statusText\n          // then normalize statusText and status for non-aborts\n          error = statusText;\n          if (status || !statusText) {\n            statusText = \"error\";\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        }\n\n        // Set data for the fake xhr object\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n        // Success/Error\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        }\n\n        // Status-dependent callbacks\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n          [jqXHR, s, isSuccess ? success : error]);\n        }\n\n        // Complete\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n          // Handle the global AJAX counter\n          if (! --jQuery.active) {\n            jQuery.event.trigger(\"ajaxStop\");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, \"json\");\n    },\n\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, \"script\");\n    } });\n\n\n  jQuery.each([\"get\", \"post\"], function (i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // shift arguments if data argument was omitted\n      if (jQuery.isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      }\n\n      return jQuery.ajax({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback });\n\n    };\n  });\n\n  // Attach a bunch of functions for handling common AJAX events\n  jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n\n\n  jQuery._evalUrl = function (url) {\n    return jQuery.ajax({\n      url: url,\n      type: \"GET\",\n      dataType: \"script\",\n      async: false,\n      global: false,\n      \"throws\": true });\n\n  };\n\n\n  var r20 = /%20/g,\n  rbracket = /\\[\\]$/,\n  rCRLF = /\\r?\\n/g,\n  rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n  rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (jQuery.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + \"[\" + (typeof v === \"object\" ? i : \"\") + \"]\", v, traditional, add);\n        }\n      });\n\n    } else if (!traditional && jQuery.type(obj) === \"object\") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n      }\n\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  }\n\n  // Serialize an array of form elements or a set of\n  // key/values into a query string\n  jQuery.param = function (a, traditional) {\n    var prefix,\n    s = [],\n    add = function add(key, value) {\n      // If value is a function, invoke it and return its value\n      value = jQuery.isFunction(value) ? value() : value == null ? \"\" : value;\n      s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n    };\n\n    // Set traditional to true for jQuery <= 1.3.2 behavior.\n    if (traditional === undefined) {\n      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n    }\n\n    // If an array was passed in, assume that it is an array of form elements.\n    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    }\n\n    // Return the resulting serialization\n    return s.join(\"&\").replace(r20, \"+\");\n  };\n\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for \"elements\" to filter or add form elements\n        var elements = jQuery.prop(this, \"elements\");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).\n      filter(function () {\n        var type = this.type;\n        // Use .is(\":disabled\") so that fieldset[disabled] works\n        return this.name && !jQuery(this).is(\":disabled\") &&\n        rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (\n        this.checked || !rcheckableType.test(type));\n      }).\n      map(function (i, elem) {\n        var val = jQuery(this).val();\n\n        return val == null ?\n        null :\n        jQuery.isArray(val) ?\n        jQuery.map(val, function (val) {\n          return { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n        }) :\n        { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n      }).get();\n    } });\n\n\n\n  // Create the request object\n  // (This is still attached to ajaxSettings for backward compatibility)\n  jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?\n  // Support: IE6+\n  function () {\n\n    // XHR cannot access local files, always use ActiveX for that case\n    return !this.isLocal &&\n\n    // Support: IE7-8\n    // oldIE XHR does not support non-RFC2616 methods (#13240)\n    // See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx\n    // and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9\n    // Although this check for six methods instead of eight\n    // since IE also does not support \"trace\" and \"connect\"\n    /^(get|post|head|put|delete|options)$/i.test(this.type) &&\n\n    createStandardXHR() || createActiveXHR();\n  } :\n  // For all other browsers, use the standard XMLHttpRequest object\n  createStandardXHR;\n\n  var xhrId = 0,\n  xhrCallbacks = {},\n  xhrSupported = jQuery.ajaxSettings.xhr();\n\n  // Support: IE<10\n  // Open requests must be manually aborted on unload (#5280)\n  if (window.ActiveXObject) {\n    jQuery(window).on(\"unload\", function () {\n      for (var key in xhrCallbacks) {\n        xhrCallbacks[key](undefined, true);\n      }\n    });\n  }\n\n  // Determine support properties\n  support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n  xhrSupported = support.ajax = !!xhrSupported;\n\n  // Create transport if the browser can provide an xhr\n  if (xhrSupported) {\n\n    jQuery.ajaxTransport(function (options) {\n      // Cross domain only allowed if supported through XMLHttpRequest\n      if (!options.crossDomain || support.cors) {\n\n        var _callback;\n\n        return {\n          send: function send(headers, complete) {\n            var i,\n            xhr = options.xhr(),\n            id = ++xhrId;\n\n            // Open the socket\n            xhr.open(options.type, options.url, options.async, options.username, options.password);\n\n            // Apply custom fields if provided\n            if (options.xhrFields) {\n              for (i in options.xhrFields) {\n                xhr[i] = options.xhrFields[i];\n              }\n            }\n\n            // Override mime type if needed\n            if (options.mimeType && xhr.overrideMimeType) {\n              xhr.overrideMimeType(options.mimeType);\n            }\n\n            // X-Requested-With header\n            // For cross-domain requests, seeing as conditions for a preflight are\n            // akin to a jigsaw puzzle, we simply never set it to be sure.\n            // (it can always be set on a per-request basis or even using ajaxSetup)\n            // For same-domain requests, won't change header if already provided.\n            if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n              headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            }\n\n            // Set headers\n            for (i in headers) {\n              // Support: IE<9\n              // IE's ActiveXObject throws a 'Type Mismatch' exception when setting\n              // request header to a null-value.\n              //\n              // To keep consistent with other XHR implementations, cast the value\n              // to string and ignore `undefined`.\n              if (headers[i] !== undefined) {\n                xhr.setRequestHeader(i, headers[i] + \"\");\n              }\n            }\n\n            if (xhr.upload && options.progress) {\n              xhr.upload.onprogress = options.progress;\n            }\n\n            // Do send the request\n            // This may raise an exception which is actually\n            // handled in jQuery.ajax (so no try/catch here)\n            xhr.send(options.hasContent && (options.body || options.data) || null);\n\n            // Listener\n            _callback = function callback(_, isAbort) {\n              var status, statusText, responses;\n\n              // Was never called and is aborted or complete\n              if (_callback && (isAbort || xhr.readyState === 4)) {\n                // Clean up\n                delete xhrCallbacks[id];\n                _callback = undefined;\n                xhr.onreadystatechange = jQuery.noop;\n\n                // Abort manually if needed\n                if (isAbort) {\n                  if (xhr.readyState !== 4) {\n                    xhr.abort();\n                  }\n                } else {\n                  responses = {};\n                  status = xhr.status;\n\n                  // Support: IE<10\n                  // Accessing binary-data responseText throws an exception\n                  // (#11426)\n                  if (typeof xhr.responseText === \"string\") {\n                    responses.text = xhr.responseText;\n                  }\n\n                  // Firefox throws an exception when accessing\n                  // statusText for faulty cross-domain requests\n                  try {\n                    statusText = xhr.statusText;\n                  } catch (e) {\n                    // We normalize with Webkit giving an empty statusText\n                    statusText = \"\";\n                  }\n\n                  // Filter status for non standard behaviors\n\n                  // If the request is local and we have data: assume a success\n                  // (success with no data won't get notified, that's the best we\n                  // can do given current implementations)\n                  if (!status && options.isLocal && !options.crossDomain) {\n                    status = responses.text ? 200 : 404;\n                    // IE - #1450: sometimes returns 1223 when it should be 204\n                  } else if (status === 1223) {\n                    status = 204;\n                  }\n                }\n              }\n\n              // Call complete if needed\n              if (responses) {\n                complete(status, statusText, responses, xhr.getAllResponseHeaders());\n              }\n            };\n\n            if (!options.async) {\n              // if we're in sync mode we fire the callback\n              _callback();\n            } else if (xhr.readyState === 4) {\n              // (IE6 & IE7) if it's in cache and has been\n              // retrieved directly we need to fire the callback\n              setTimeout(_callback);\n            } else {\n              // Add to the list of active xhr callbacks\n              xhr.onreadystatechange = xhrCallbacks[id] = _callback;\n            }\n          },\n\n          abort: function abort() {\n            if (_callback) {\n              _callback(undefined, true);\n            }\n          } };\n\n      }\n    });\n  }\n\n  // Functions to create xhrs\n  function createStandardXHR() {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {\n    }\n  }\n\n  function createActiveXHR() {\n    try {\n      return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n    } catch (e) {\n    }\n  }\n\n\n  // Install script dataType\n  jQuery.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\" },\n\n    contents: {\n      script: /(?:java|ecma)script/ },\n\n    converters: {\n      \"text script\": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      } } });\n\n\n\n  // Handle cache's special case and global\n  jQuery.ajaxPrefilter(\"script\", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n    if (s.crossDomain) {\n      s.type = \"GET\";\n      s.global = false;\n    }\n  });\n\n  // Bind script tag hack transport\n  jQuery.ajaxTransport(\"script\", function (s) {\n\n    // This transport only deals with cross domain requests\n    if (s.crossDomain) {\n\n      var script,\n      head = document.head || jQuery(\"head\")[0] || document.documentElement;\n\n      return {\n\n        send: function send(_, callback) {\n\n          script = document.createElement(\"script\");\n\n          script.async = true;\n\n          if (s.scriptCharset) {\n            script.charset = s.scriptCharset;\n          }\n\n          script.src = s.url;\n\n          // Attach handlers for all browsers\n          script.onload = script.onreadystatechange = function (_, isAbort) {\n\n            if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n\n              // Handle memory leak in IE\n              script.onload = script.onreadystatechange = null;\n\n              // Remove the script\n              if (script.parentNode) {\n                script.parentNode.removeChild(script);\n              }\n\n              // Dereference the script\n              script = null;\n\n              // Callback if not abort\n              if (!isAbort) {\n                callback(200, \"success\");\n              }\n            }\n          };\n\n          // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n          // Use native DOM manipulation to avoid our domManip AJAX trickery\n          head.insertBefore(script, head.firstChild);\n        },\n\n        abort: function abort() {\n          if (script) {\n            script.onload(undefined, true);\n          }\n        } };\n\n    }\n  });\n\n\n  var oldCallbacks = [],\n  rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n  // Default jsonp settings\n  jQuery.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n      this[callback] = true;\n      return callback;\n    } });\n\n\n  // Detect, normalize options and install callbacks for jsonp requests\n  jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n    var callbackName,overwritten,responseContainer,\n    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?\n    \"url\" :\n    typeof s.data === \"string\" && !(s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test(s.data) && \"data\");\n\n\n    // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n    if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?\n      s.jsonpCallback() :\n      s.jsonpCallback;\n\n      // Insert callback into url or form data\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n      }\n\n      // Use data converter to retrieve json after script execution\n      s.converters[\"script json\"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + \" was not called\");\n        }\n        return responseContainer[0];\n      };\n\n      // force json dataType\n      s.dataTypes[0] = \"json\";\n\n      // Install callback\n      overwritten = window[callbackName];\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      };\n\n      // Clean-up function (fires after converters)\n      jqXHR.always(function () {\n        // Restore preexisting value\n        window[callbackName] = overwritten;\n\n        // Save back as free\n        if (s[callbackName]) {\n          // make sure that re-using the options doesn't screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback;\n\n          // save the callback name for future use\n          oldCallbacks.push(callbackName);\n        }\n\n        // Call if it was a function and we have a response\n        if (responseContainer && jQuery.isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      });\n\n      // Delegate to script\n      return \"script\";\n    }\n  });\n\n  // data: string of html\n  // context (optional): If specified, the fragment will be created in this context, defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (!data || typeof data !== \"string\") {\n      return null;\n    }\n    if (typeof context === \"boolean\") {\n      keepScripts = context;\n      context = false;\n    }\n    context = context || document;\n\n    var parsed = rsingleTag.exec(data),\n    scripts = !keepScripts && [];\n\n    // Single tag\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = jQuery.buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n\n  return jQuery;\n\n}();\n\nvar stringifyPrimitive = function stringifyPrimitive(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n    case 'boolean':\n      return v ? 'true' : 'false';\n    case 'number':\n      return isFinite(v) ? v : '';\n    default:\n      return '';}\n\n};\n\nvar queryStringify = function queryStringify(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).filter(Boolean).join(sep);\n\n  }\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n  encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar request = function request(options, callback) {\n\n  options = $.extend(true, { headers: {}, qs: {} }, options);\n\n  // method\n  options.type = options.method;\n  delete options.method;\n\n  // progress\n  if (options.onProgress) {\n    options.progress = options.onProgress;\n    delete options.onProgress;\n  }\n\n  // qs\n  if (options.qs) {\n    var qsStr = queryStringify(options.qs);\n    if (qsStr) {\n      options.url += (options.url.indexOf('?') === -1 ? '?' : '&') + qsStr;\n    }\n    delete options.qs;\n  }\n\n  // json\n  if (options.json) {\n    options.data = options.body;\n    delete options.json;\n    delete options.body;\n    !options.headers && (options.headers = {});\n    options.headers['Content-Type'] = 'application/json';\n  }\n\n  // body\n  if (options.body) {\n    if (!(options.body instanceof Blob || options.body.toString() === '[object File]' || options.body.toString() === '[object Blob]')) {\n      options.data = options.body;\n      delete options.body;\n    }\n  }\n\n  // headers\n  if (options.headers) {\n    var headers = options.headers;\n    delete options.headers;\n    options.beforeSend = function (xhr) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key) &&\n        key.toLowerCase() !== 'content-length' &&\n        key.toLowerCase() !== 'user-agent' &&\n        key.toLowerCase() !== 'origin' &&\n        key.toLowerCase() !== 'host') {\n          xhr.setRequestHeader(key, headers[key]);\n        }\n      }\n    };\n  }\n\n  var getResponse = function getResponse(xhr) {\n    var headers = {};\n    xhr.getAllResponseHeaders().trim().split('\\n').forEach(function (item) {\n      if (item) {\n        var index = item.indexOf(':');\n        var key = item.substr(0, index).trim().toLowerCase();\n        var val = item.substr(index + 1).trim();\n        headers[key] = val;\n      }\n    });\n    return {\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n      headers: headers };\n\n  };\n\n  // callback\n  options.success = function (data, state, xhr) {\n    callback(null, getResponse(xhr), data);\n  };\n  options.error = function (xhr) {\n    if (xhr.responseText) {\n      callback(null, getResponse(xhr), xhr.responseText);\n    } else {\n      callback(xhr.statusText, getResponse(xhr), xhr.responseText);\n    }\n  };\n\n  options.dataType = 'text';\n\n  // send\n  return $.ajax(options);\n\n};\n\nmodule.exports = request;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/*!***********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/advance.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var session = __webpack_require__(/*! ./session */ 35);\nvar Async = __webpack_require__(/*! ./async */ 39);\nvar EventProxy = __webpack_require__(/*! ./event */ 33).EventProxy;\nvar util = __webpack_require__(/*! ./util */ 25);\n\n// 文件分块上传全过程，暴露的分块上传接口\nfunction sliceUploadFile(params, callback) {\n  var self = this;\n  var ep = new EventProxy();\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var Body = params.Body;\n  var ChunkSize = params.ChunkSize || params.SliceSize || self.options.ChunkSize;\n  var AsyncLimit = params.AsyncLimit;\n  var StorageClass = params.StorageClass || 'Standard';\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var FileSize;\n\n  var onProgress;\n  var onHashProgress = params.onHashProgress;\n\n  // 上传过程中出现错误，返回错误\n  ep.on('error', function (err) {\n    if (!self._isRunningTask(TaskId)) return;\n    return callback(err);\n  });\n\n  // 上传分块完成，开始 uploadSliceComplete 操作\n  ep.on('upload_complete', function (UploadCompleteData) {\n    callback(null, UploadCompleteData);\n  });\n\n  // 上传分块完成，开始 uploadSliceComplete 操作\n  ep.on('upload_slice_complete', function (UploadData) {\n    uploadSliceComplete.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadData.UploadId,\n      SliceList: UploadData.SliceList },\n    function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      session.removeUsing(UploadData.UploadId);\n      if (err) {\n        onProgress(null, true);\n        return ep.emit('error', err);\n      }\n      session.removeUploadId(UploadData.UploadId);\n      onProgress({ loaded: FileSize, total: FileSize }, true);\n      ep.emit('upload_complete', data);\n    });\n  });\n\n  // 获取 UploadId 完成，开始上传每个分片\n  ep.on('get_upload_data_finish', function (UploadData) {\n\n    // 处理 UploadId 缓存\n    var uuid = session.getFileId(Body, params.ChunkSize, Bucket, Key);\n    uuid && session.saveUploadId(uuid, UploadData.UploadId, self.options.UploadIdCacheLimit); // 缓存 UploadId\n    session.setUsing(UploadData.UploadId); // 标记 UploadId 为正在使用\n\n    // 获取 UploadId\n    onProgress(null, true); // 任务状态开始 uploading\n    uploadSliceList.call(self, {\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Body: Body,\n      FileSize: FileSize,\n      SliceSize: ChunkSize,\n      AsyncLimit: AsyncLimit,\n      ServerSideEncryption: ServerSideEncryption,\n      UploadData: UploadData,\n      onProgress: onProgress },\n    function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (err) {\n        onProgress(null, true);\n        return ep.emit('error', err);\n      }\n      ep.emit('upload_slice_complete', data);\n    });\n  });\n\n  // 开始获取文件 UploadId，里面会视情况计算 ETag，并比对，保证文件一致性，也优化上传\n  ep.on('get_file_size_finish', function () {\n\n    onProgress = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n    if (params.UploadData.UploadId) {\n      ep.emit('get_upload_data_finish', params.UploadData);\n    } else {\n      var _params = util.extend({\n        TaskId: TaskId,\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        Headers: params.Headers,\n        StorageClass: StorageClass,\n        Body: Body,\n        FileSize: FileSize,\n        SliceSize: ChunkSize,\n        onHashProgress: onHashProgress },\n      params);\n      getUploadIdAndPartList.call(self, _params, function (err, UploadData) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) return ep.emit('error', err);\n        params.UploadData.UploadId = UploadData.UploadId;\n        params.UploadData.PartList = UploadData.PartList;\n        ep.emit('get_upload_data_finish', params.UploadData);\n      });\n    }\n  });\n\n  // 获取上传文件大小\n  FileSize = params.ContentLength;\n  delete params.ContentLength;\n  !params.Headers && (params.Headers = {});\n  util.each(params.Headers, function (item, key) {\n    if (key.toLowerCase() === 'content-length') {\n      delete params.Headers[key];\n    }\n  });\n\n  // 控制分片大小\n  (function () {\n    var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n    var AutoChunkSize = 1024 * 1024;\n    for (var i = 0; i < SIZE.length; i++) {\n      AutoChunkSize = SIZE[i] * 1024 * 1024;\n      if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n    }\n    params.ChunkSize = params.SliceSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n  })();\n\n  // 开始上传\n  if (FileSize === 0) {\n    params.Body = '';\n    params.ContentLength = 0;\n    params.SkipTask = true;\n    self.putObject(params, function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, data);\n    });\n  } else {\n    ep.emit('get_file_size_finish');\n  }\n\n}\n\n// 获取上传任务的 UploadId\nfunction getUploadIdAndPartList(params, callback) {\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var StorageClass = params.StorageClass;\n  var self = this;\n\n  // 计算 ETag\n  var ETagMap = {};\n  var FileSize = params.FileSize;\n  var SliceSize = params.SliceSize;\n  var SliceCount = Math.ceil(FileSize / SliceSize);\n  var FinishSliceCount = 0;\n  var FinishSize = 0;\n  var onHashProgress = util.throttleOnProgress.call(self, FileSize, params.onHashProgress);\n  var getChunkETag = function getChunkETag(PartNumber, callback) {\n    var start = SliceSize * (PartNumber - 1);\n    var end = Math.min(start + SliceSize, FileSize);\n    var ChunkSize = end - start;\n\n    if (ETagMap[PartNumber]) {\n      callback(null, {\n        PartNumber: PartNumber,\n        ETag: ETagMap[PartNumber],\n        Size: ChunkSize });\n\n    } else {\n      util.fileSlice(params.Body, start, end, false, function (chunkItem) {\n        util.getFileMd5(chunkItem, function (err, md5) {\n          if (err) return callback(err);\n          var ETag = '\"' + md5 + '\"';\n          ETagMap[PartNumber] = ETag;\n          FinishSliceCount += 1;\n          FinishSize += ChunkSize;\n          callback(err, {\n            PartNumber: PartNumber,\n            ETag: ETag,\n            Size: ChunkSize });\n\n          onHashProgress({ loaded: FinishSize, total: FileSize });\n        });\n      });\n    }\n  };\n\n  // 通过和文件的 md5 对比，判断 UploadId 是否可用\n  var isAvailableUploadList = function isAvailableUploadList(PartList, callback) {\n    var PartCount = PartList.length;\n    // 如果没有分片，通过\n    if (PartCount === 0) {\n      return callback(null, true);\n    }\n    // 检查分片数量\n    if (PartCount > SliceCount) {\n      return callback(null, false);\n    }\n    // 检查分片大小\n    if (PartCount > 1) {\n      var PartSliceSize = Math.max(PartList[0].Size, PartList[1].Size);\n      if (PartSliceSize !== SliceSize) {\n        return callback(null, false);\n      }\n    }\n    // 逐个分片计算并检查 ETag 是否一致\n    var next = function next(index) {\n      if (index < PartCount) {\n        var Part = PartList[index];\n        getChunkETag(Part.PartNumber, function (err, chunk) {\n          if (chunk && chunk.ETag === Part.ETag && chunk.Size === Part.Size) {\n            next(index + 1);\n          } else {\n            callback(null, false);\n          }\n        });\n      } else {\n        callback(null, true);\n      }\n    };\n    next(0);\n  };\n\n  var ep = new EventProxy();\n  ep.on('error', function (errData) {\n    if (!self._isRunningTask(TaskId)) return;\n    return callback(errData);\n  });\n\n  // 存在 UploadId\n  ep.on('upload_id_available', function (UploadData) {\n    // 转换成 map\n    var map = {};\n    var list = [];\n    util.each(UploadData.PartList, function (item) {\n      map[item.PartNumber] = item;\n    });\n    for (var PartNumber = 1; PartNumber <= SliceCount; PartNumber++) {\n      var item = map[PartNumber];\n      if (item) {\n        item.PartNumber = PartNumber;\n        item.Uploaded = true;\n      } else {\n        item = {\n          PartNumber: PartNumber,\n          ETag: null,\n          Uploaded: false };\n\n      }\n      list.push(item);\n    }\n    UploadData.PartList = list;\n    callback(null, UploadData);\n  });\n\n  // 不存在 UploadId, 初始化生成 UploadId\n  ep.on('no_available_upload_id', function () {\n    if (!self._isRunningTask(TaskId)) return;\n    var _params = util.extend({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Headers: util.clone(params.Headers),\n      StorageClass: StorageClass,\n      Body: params.Body },\n    params);\n    // 获取 File 或 Blob 的 type 属性，如果有，作为文件 Content-Type\n    var ContentType = params.Headers['Content-Type'] || params.Body && params.Body.type;\n    if (ContentType) {\n      _params.Headers['Content-Type'] = ContentType;\n    }\n    self.multipartInit(_params, function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (err) return ep.emit('error', err);\n      var UploadId = data.UploadId;\n      if (!UploadId) {\n        return callback({ Message: 'no upload id' });\n      }\n      ep.emit('upload_id_available', { UploadId: UploadId, PartList: [] });\n    });\n  });\n\n  // 如果已存在 UploadId，找一个可以用的 UploadId\n  ep.on('has_and_check_upload_id', function (UploadIdList) {\n    // 串行地，找一个内容一致的 UploadId\n    UploadIdList = UploadIdList.reverse();\n    Async.eachLimit(UploadIdList, 1, function (UploadId, asyncCallback) {\n      if (!self._isRunningTask(TaskId)) return;\n      // 如果正在上传，跳过\n      if (session.using[UploadId]) {\n        asyncCallback(); // 检查下一个 UploadId\n        return;\n      }\n      // 判断 UploadId 是否可用\n      wholeMultipartListPart.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        UploadId: UploadId },\n      function (err, PartListData) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) {\n          session.removeUsing(UploadId);\n          return ep.emit('error', err);\n        }\n        var PartList = PartListData.PartList;\n        PartList.forEach(function (item) {\n          item.PartNumber *= 1;\n          item.Size *= 1;\n          item.ETag = item.ETag || '';\n        });\n        isAvailableUploadList(PartList, function (err, isAvailable) {\n          if (!self._isRunningTask(TaskId)) return;\n          if (err) return ep.emit('error', err);\n          if (isAvailable) {\n            asyncCallback({\n              UploadId: UploadId,\n              PartList: PartList });\n            // 马上结束\n          } else {\n            asyncCallback(); // 检查下一个 UploadId\n          }\n        });\n      });\n    }, function (AvailableUploadData) {\n      if (!self._isRunningTask(TaskId)) return;\n      onHashProgress(null, true);\n      if (AvailableUploadData && AvailableUploadData.UploadId) {\n        ep.emit('upload_id_available', AvailableUploadData);\n      } else {\n        ep.emit('no_available_upload_id');\n      }\n    });\n  });\n\n  // 在本地缓存找可用的 UploadId\n  ep.on('seek_local_avail_upload_id', function (RemoteUploadIdList) {\n    // 在本地找可用的 UploadId\n    var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key);\n    var LocalUploadIdList = session.getUploadIdList(uuid);\n    if (!uuid || !LocalUploadIdList) {\n      ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n      return;\n    }\n    var next = function next(index) {\n      // 如果本地找不到可用 UploadId，再一个个遍历校验远端\n      if (index >= LocalUploadIdList.length) {\n        ep.emit('has_and_check_upload_id', RemoteUploadIdList);\n        return;\n      }\n      var UploadId = LocalUploadIdList[index];\n      // 如果不在远端 UploadId 列表里，跳过并删除\n      if (!util.isInArray(RemoteUploadIdList, UploadId)) {\n        session.removeUploadId(UploadId);\n        next(index + 1);\n        return;\n      }\n      // 如果正在上传，跳过\n      if (session.using[UploadId]) {\n        next(index + 1);\n        return;\n      }\n      // 判断 UploadId 是否存在线上\n      wholeMultipartListPart.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        UploadId: UploadId },\n      function (err, PartListData) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) {\n          // 如果 UploadId 获取会出错，跳过并删除\n          session.removeUploadId(UploadId);\n          next(index + 1);\n        } else {\n          // 找到可用 UploadId\n          ep.emit('upload_id_available', {\n            UploadId: UploadId,\n            PartList: PartListData.PartList });\n\n        }\n      });\n    };\n    next(0);\n  });\n\n  // 获取线上 UploadId 列表\n  ep.on('get_remote_upload_id_list', function (RemoteUploadIdList) {\n    // 获取符合条件的 UploadId 列表，因为同一个文件可以有多个上传任务。\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key },\n    function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (err) {\n        return ep.emit('error', err);\n      }\n      // 整理远端 UploadId 列表\n      var RemoteUploadIdList = util.filter(data.UploadList, function (item) {\n        return item.Key === Key && (!StorageClass || item.StorageClass.toUpperCase() === StorageClass.toUpperCase());\n      }).reverse().map(function (item) {\n        return item.UploadId || item.UploadID;\n      });\n      if (RemoteUploadIdList.length) {\n        ep.emit('seek_local_avail_upload_id', RemoteUploadIdList);\n      } else {\n        // 远端没有 UploadId，清理缓存的 UploadId\n        var uuid = session.getFileId(params.Body, params.ChunkSize, Bucket, Key),LocalUploadIdList;\n        if (uuid && (LocalUploadIdList = session.getUploadIdList(uuid))) {\n          util.each(LocalUploadIdList, function (UploadId) {\n            session.removeUploadId(UploadId);\n          });\n        }\n        ep.emit('no_available_upload_id');\n      }\n    });\n  });\n\n  // 开始找可用 UploadId\n  ep.emit('get_remote_upload_id_list');\n\n}\n\n// 获取符合条件的全部上传任务 (条件包括 Bucket, Region, Prefix)\nfunction wholeMultipartList(params, callback) {\n  var self = this;\n  var UploadList = [];\n  var sendParams = {\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Prefix: params.Key };\n\n  var next = function next() {\n    self.multipartList(sendParams, function (err, data) {\n      if (err) return callback(err);\n      UploadList.push.apply(UploadList, data.Upload || []);\n      if (data.IsTruncated === 'true') {// 列表不完整\n        sendParams.KeyMarker = data.NextKeyMarker;\n        sendParams.UploadIdMarker = data.NextUploadIdMarker;\n        next();\n      } else {\n        callback(null, { UploadList: UploadList });\n      }\n    });\n  };\n  next();\n}\n\n// 获取指定上传任务的分块列表\nfunction wholeMultipartListPart(params, callback) {\n  var self = this;\n  var PartList = [];\n  var sendParams = {\n    Bucket: params.Bucket,\n    Region: params.Region,\n    Key: params.Key,\n    UploadId: params.UploadId };\n\n  var next = function next() {\n    self.multipartListPart(sendParams, function (err, data) {\n      if (err) return callback(err);\n      PartList.push.apply(PartList, data.Part || []);\n      if (data.IsTruncated === 'true') {// 列表不完整\n        sendParams.PartNumberMarker = data.NextPartNumberMarker;\n        next();\n      } else {\n        callback(null, { PartList: PartList });\n      }\n    });\n  };\n  next();\n}\n\n// 上传文件分块，包括\n/*\r\n UploadId (上传任务编号)\r\n AsyncLimit (并发量)，\r\n SliceList (上传的分块数组)，\r\n FilePath (本地文件的位置)，\r\n SliceSize (文件分块大小)\r\n FileSize (文件大小)\r\n onProgress (上传成功之后的回调函数)\r\n */\nfunction uploadSliceList(params, cb) {\n  var self = this;\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadData = params.UploadData;\n  var FileSize = params.FileSize;\n  var SliceSize = params.SliceSize;\n  var ChunkParallel = Math.min(params.AsyncLimit || self.options.ChunkParallelLimit || 1, 256);\n  var Body = params.Body;\n  var SliceCount = Math.ceil(FileSize / SliceSize);\n  var FinishSize = 0;\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var needUploadSlices = util.filter(UploadData.PartList, function (SliceItem) {\n    if (SliceItem['Uploaded']) {\n      FinishSize += SliceItem['PartNumber'] >= SliceCount ? FileSize % SliceSize || SliceSize : SliceSize;\n    }\n    return !SliceItem['Uploaded'];\n  });\n  var _onProgress2 = params.onProgress;\n\n  Async.eachLimit(needUploadSlices, ChunkParallel, function (SliceItem, asyncCallback) {\n    if (!self._isRunningTask(TaskId)) return;\n    var PartNumber = SliceItem['PartNumber'];\n    var currentSize = Math.min(FileSize, SliceItem['PartNumber'] * SliceSize) - (SliceItem['PartNumber'] - 1) * SliceSize;\n    var preAddSize = 0;\n    uploadSliceItem.call(self, {\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      SliceSize: SliceSize,\n      FileSize: FileSize,\n      PartNumber: PartNumber,\n      ServerSideEncryption: ServerSideEncryption,\n      Body: Body,\n      UploadData: UploadData,\n      onProgress: function onProgress(data) {\n        FinishSize += data.loaded - preAddSize;\n        preAddSize = data.loaded;\n        _onProgress2({ loaded: FinishSize, total: FileSize });\n      } },\n    function (err, data) {\n      if (!self._isRunningTask(TaskId)) return;\n      if (util.isBrowser && !err && !data.ETag) {\n        err = 'get ETag error, please add \"ETag\" to CORS ExposeHeader setting.';\n      }\n      if (err) {\n        FinishSize -= preAddSize;\n      } else {\n        FinishSize += currentSize - preAddSize;\n        SliceItem.ETag = data.ETag;\n      }\n      asyncCallback(err || null, data);\n    });\n  }, function (err) {\n    if (!self._isRunningTask(TaskId)) return;\n    if (err) return cb(err);\n    cb(null, {\n      UploadId: UploadData.UploadId,\n      SliceList: UploadData.PartList });\n\n  });\n}\n\n// 上传指定分片\nfunction uploadSliceItem(params, callback) {\n  var self = this;\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var FileSize = params.FileSize;\n  var FileBody = params.Body;\n  var PartNumber = params.PartNumber * 1;\n  var SliceSize = params.SliceSize;\n  var ServerSideEncryption = params.ServerSideEncryption;\n  var UploadData = params.UploadData;\n  var ChunkRetryTimes = self.options.ChunkRetryTimes + 1;\n\n  var start = SliceSize * (PartNumber - 1);\n\n  var ContentLength = SliceSize;\n\n  var end = start + SliceSize;\n\n  if (end > FileSize) {\n    end = FileSize;\n    ContentLength = end - start;\n  }\n\n  var PartItem = UploadData.PartList[PartNumber - 1];\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    if (!self._isRunningTask(TaskId)) return;\n    util.fileSlice(FileBody, start, end, true, function (Body) {\n      self.multipartUpload({\n        TaskId: TaskId,\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        ContentLength: ContentLength,\n        PartNumber: PartNumber,\n        UploadId: UploadData.UploadId,\n        ServerSideEncryption: ServerSideEncryption,\n        Body: Body,\n        onProgress: params.onProgress },\n      function (err, data) {\n        if (!self._isRunningTask(TaskId)) return;\n        if (err) {\n          return tryCallback(err);\n        } else {\n          PartItem.Uploaded = true;\n          return tryCallback(null, data);\n        }\n      });\n    });\n  }, function (err, data) {\n    if (!self._isRunningTask(TaskId)) return;\n    return callback(err, data);\n  });\n}\n\n\n// 完成分块上传\nfunction uploadSliceComplete(params, callback) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadId = params.UploadId;\n  var SliceList = params.SliceList;\n  var self = this;\n  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n  var Parts = SliceList.map(function (item) {\n    return {\n      PartNumber: item.PartNumber,\n      ETag: item.ETag };\n\n  });\n  // 完成上传的请求也做重试\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    self.multipartComplete({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadId,\n      Parts: Parts },\n    tryCallback);\n  }, function (err, data) {\n    callback(err, data);\n  });\n}\n\n// 抛弃分块上传任务\n/*\r\n AsyncLimit (抛弃上传任务的并发量)，\r\n UploadId (上传任务的编号，当 Level 为 task 时候需要)\r\n Level (抛弃分块上传任务的级别，task : 抛弃指定的上传任务，file ： 抛弃指定的文件对应的上传任务，其他值 ：抛弃指定Bucket 的全部上传任务)\r\n */\nfunction abortUploadTask(params, callback) {\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var UploadId = params.UploadId;\n  var Level = params.Level || 'task';\n  var AsyncLimit = params.AsyncLimit;\n  var self = this;\n\n  var ep = new EventProxy();\n\n  ep.on('error', function (errData) {\n    return callback(errData);\n  });\n\n  // 已经获取到需要抛弃的任务列表\n  ep.on('get_abort_array', function (AbortArray) {\n    abortUploadTaskArray.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Headers: params.Headers,\n      AsyncLimit: AsyncLimit,\n      AbortArray: AbortArray },\n    function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, data);\n    });\n  });\n\n  if (Level === 'bucket') {\n    // Bucket 级别的任务抛弃，抛弃该 Bucket 下的全部上传任务\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region },\n    function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      ep.emit('get_abort_array', data.UploadList || []);\n    });\n  } else if (Level === 'file') {\n    // 文件级别的任务抛弃，抛弃该文件的全部上传任务\n    if (!Key) return callback({ error: 'abort_upload_task_no_key' });\n    wholeMultipartList.call(self, {\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key },\n    function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      ep.emit('get_abort_array', data.UploadList || []);\n    });\n  } else if (Level === 'task') {\n    // 单个任务级别的任务抛弃，抛弃指定 UploadId 的上传任务\n    if (!UploadId) return callback({ error: 'abort_upload_task_no_id' });\n    if (!Key) return callback({ error: 'abort_upload_task_no_key' });\n    ep.emit('get_abort_array', [{\n      Key: Key,\n      UploadId: UploadId }]);\n\n  } else {\n    return callback({ error: 'abort_unknown_level' });\n  }\n}\n\n// 批量抛弃分块上传任务\nfunction abortUploadTaskArray(params, callback) {\n\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var AbortArray = params.AbortArray;\n  var AsyncLimit = params.AsyncLimit || 1;\n  var self = this;\n\n  var index = 0;\n  var resultList = new Array(AbortArray.length);\n  Async.eachLimit(AbortArray, AsyncLimit, function (AbortItem, callback) {\n    var eachIndex = index;\n    if (Key && Key !== AbortItem.Key) {\n      resultList[eachIndex] = { error: { KeyNotMatch: true } };\n      callback(null);\n      return;\n    }\n    var UploadId = AbortItem.UploadId || AbortItem.UploadID;\n\n    self.multipartAbort({\n      Bucket: Bucket,\n      Region: Region,\n      Key: AbortItem.Key,\n      Headers: params.Headers,\n      UploadId: UploadId },\n    function (err, data) {\n      var task = {\n        Bucket: Bucket,\n        Region: Region,\n        Key: AbortItem.Key,\n        UploadId: UploadId };\n\n      resultList[eachIndex] = { error: err, task: task };\n      callback(null);\n    });\n    index++;\n\n  }, function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    var successList = [];\n    var errorList = [];\n\n    for (var i = 0, len = resultList.length; i < len; i++) {\n      var item = resultList[i];\n      if (item['task']) {\n        if (item['error']) {\n          errorList.push(item['task']);\n        } else {\n          successList.push(item['task']);\n        }\n      }\n    }\n\n    return callback(null, {\n      successList: successList,\n      errorList: errorList });\n\n  });\n}\n\n\n// 批量上传文件\nfunction uploadFiles(params, callback) {\n  var self = this;\n\n  // 判断多大的文件使用分片上传\n  var SliceSize = params.SliceSize === undefined ? self.options.SliceSize : params.SliceSize;\n\n  // 汇总返回进度\n  var TotalSize = 0;\n  var TotalFinish = 0;\n  var onTotalProgress = util.throttleOnProgress.call(self, TotalFinish, params.onProgress);\n\n  // 汇总返回回调\n  var unFinishCount = params.files.length;\n  var _onTotalFileFinish = params.onFileFinish;\n  var resultList = Array(unFinishCount);\n  var onTotalFileFinish = function onTotalFileFinish(err, data, options) {\n    onTotalProgress(null, true);\n    _onTotalFileFinish && _onTotalFileFinish(err, data, options);\n    resultList[options.Index] = {\n      options: options,\n      error: err,\n      data: data };\n\n    if (--unFinishCount <= 0 && callback) {\n      callback(null, {\n        files: resultList });\n\n    }\n  };\n\n  // 开始处理每个文件\n  var taskList = [];\n  util.each(params.files, function (fileParams, index) {\n    (function () {// 对齐 nodejs 缩进\n\n      var Body = fileParams.Body;\n      var FileSize = Body.size || Body.length || 0;\n      var fileInfo = { Index: index, TaskId: '' };\n\n      // 更新文件总大小\n      TotalSize += FileSize;\n\n      // 整理 option，用于返回给回调\n      util.each(fileParams, function (v, k) {\n        if (typeof v !== 'object' && typeof v !== 'function') {\n          fileInfo[k] = v;\n        }\n      });\n\n      // 处理单个文件 TaskReady\n      var _onTaskReady = fileParams.onTaskReady;\n      var onTaskReady = function onTaskReady(tid) {\n        fileInfo.TaskId = tid;\n        _onTaskReady && _onTaskReady(tid);\n      };\n      fileParams.onTaskReady = onTaskReady;\n\n      // 处理单个文件进度\n      var PreAddSize = 0;\n      var _onProgress = fileParams.onProgress;\n      var onProgress = function onProgress(info) {\n        TotalFinish = TotalFinish - PreAddSize + info.loaded;\n        PreAddSize = info.loaded;\n        _onProgress && _onProgress(info);\n        onTotalProgress({ loaded: TotalFinish, total: TotalSize });\n      };\n      fileParams.onProgress = onProgress;\n\n      // 处理单个文件完成\n      var _onFileFinish = fileParams.onFileFinish;\n      var onFileFinish = function onFileFinish(err, data) {\n        _onFileFinish && _onFileFinish(err, data);\n        onTotalFileFinish && onTotalFileFinish(err, data, fileInfo);\n      };\n\n      // 添加上传任务\n      var api = FileSize >= SliceSize ? 'sliceUploadFile' : 'putObject';\n      taskList.push({\n        api: api,\n        params: fileParams,\n        callback: onFileFinish });\n\n    })();\n  });\n  self._addTasks(taskList);\n}\n\n// 分片复制文件\nfunction sliceCopyFile(params, callback) {\n  var ep = new EventProxy();\n\n  var self = this;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var CopySource = params.CopySource;\n  var m = CopySource.match(/^([^.]+-\\d+)\\.cos(v6)?\\.([^.]+)\\.[^/]+\\/(.+)$/);\n  if (!m) {\n    callback({ error: 'CopySource format error' });\n    return;\n  }\n\n  var SourceBucket = m[1];\n  var SourceRegion = m[3];\n  var SourceKey = decodeURIComponent(m[4]);\n  var CopySliceSize = params.CopySliceSize === undefined ? self.options.CopySliceSize : params.CopySliceSize;\n  CopySliceSize = Math.max(0, CopySliceSize);\n\n  var ChunkSize = params.CopyChunkSize || this.options.CopyChunkSize;\n  var ChunkParallel = this.options.CopyChunkParallelLimit;\n\n  var FinishSize = 0;\n  var FileSize;\n  var _onProgress3;\n\n  // 分片复制完成，开始 multipartComplete 操作\n  ep.on('copy_slice_complete', function (UploadData) {\n    self.multipartComplete({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      UploadId: UploadData.UploadId,\n      Parts: UploadData.PartList },\n    function (err, data) {\n      if (err) {\n        _onProgress3(null, true);\n        return callback(err);\n      }\n      _onProgress3({ loaded: FileSize, total: FileSize }, true);\n      callback(null, data);\n    });\n  });\n\n  ep.on('get_copy_data_finish', function (UploadData) {\n    Async.eachLimit(UploadData.PartList, ChunkParallel, function (SliceItem, asyncCallback) {\n      var PartNumber = SliceItem.PartNumber;\n      var CopySourceRange = SliceItem.CopySourceRange;\n      var currentSize = SliceItem.end - SliceItem.start;\n      var preAddSize = 0;\n\n      copySliceItem.call(self, {\n        Bucket: Bucket,\n        Region: Region,\n        Key: Key,\n        CopySource: CopySource,\n        UploadId: UploadData.UploadId,\n        PartNumber: PartNumber,\n        CopySourceRange: CopySourceRange,\n        onProgress: function onProgress(data) {\n          FinishSize += data.loaded - preAddSize;\n          preAddSize = data.loaded;\n          _onProgress3({ loaded: FinishSize, total: FileSize });\n        } },\n      function (err, data) {\n        if (err) {\n          return asyncCallback(err);\n        }\n        _onProgress3({ loaded: FinishSize, total: FileSize });\n\n        FinishSize += currentSize - preAddSize;\n        SliceItem.ETag = data.ETag;\n        asyncCallback(err || null, data);\n      });\n    }, function (err) {\n      if (err) {\n        _onProgress3(null, true);\n        return callback(err);\n      }\n\n      ep.emit('copy_slice_complete', UploadData);\n    });\n  });\n\n  ep.on('get_file_size_finish', function (SourceHeaders) {\n    // 控制分片大小\n    (function () {\n      var SIZE = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 1024 * 2, 1024 * 4, 1024 * 5];\n      var AutoChunkSize = 1024 * 1024;\n      for (var i = 0; i < SIZE.length; i++) {\n        AutoChunkSize = SIZE[i] * 1024 * 1024;\n        if (FileSize / AutoChunkSize <= self.options.MaxPartNumber) break;\n      }\n      params.ChunkSize = ChunkSize = Math.max(ChunkSize, AutoChunkSize);\n\n      var ChunkCount = Math.ceil(FileSize / ChunkSize);\n\n      var list = [];\n      for (var partNumber = 1; partNumber <= ChunkCount; partNumber++) {\n        var start = (partNumber - 1) * ChunkSize;\n        var end = partNumber * ChunkSize < FileSize ? partNumber * ChunkSize - 1 : FileSize - 1;\n        var item = {\n          PartNumber: partNumber,\n          start: start,\n          end: end,\n          CopySourceRange: \"bytes=\" + start + \"-\" + end };\n\n        list.push(item);\n      }\n      params.PartList = list;\n    })();\n\n    var TargetHeader;\n    if (params.Headers['x-cos-metadata-directive'] === 'Replaced') {\n      TargetHeader = params.Headers;\n    } else {\n      TargetHeader = SourceHeaders;\n    }\n    TargetHeader['x-cos-storage-class'] = params.Headers['x-cos-storage-class'] || SourceHeaders['x-cos-storage-class'];\n    TargetHeader = util.clearKey(TargetHeader);\n    /**\r\n                                                 * 对于归档存储的对象，如果未恢复副本，则不允许 Copy\r\n                                                 */\n    if (SourceHeaders['x-cos-storage-class'] === 'ARCHIVE') {\n      var restoreHeader = SourceHeaders['x-cos-restore'];\n      if (!restoreHeader || restoreHeader === 'ongoing-request=\"true\"') {\n        callback({ error: 'Unrestored archive object is not allowed to be copied' });\n        return;\n      }\n    }\n    /**\r\n       * 去除一些无用的头部，规避 multipartInit 出错\r\n       * 这些头部通常是在 putObjectCopy 时才使用\r\n       */\n    delete TargetHeader['x-cos-copy-source'];\n    delete TargetHeader['x-cos-metadata-directive'];\n    delete TargetHeader['x-cos-copy-source-If-Modified-Since'];\n    delete TargetHeader['x-cos-copy-source-If-Unmodified-Since'];\n    delete TargetHeader['x-cos-copy-source-If-Match'];\n    delete TargetHeader['x-cos-copy-source-If-None-Match'];\n    self.multipartInit({\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      Headers: TargetHeader },\n    function (err, data) {\n      if (err) {\n        return callback(err);\n      }\n      params.UploadId = data.UploadId;\n      ep.emit('get_copy_data_finish', params);\n    });\n  });\n\n  // 获取远端复制源文件的大小\n  self.headObject({\n    Bucket: SourceBucket,\n    Region: SourceRegion,\n    Key: SourceKey },\n  function (err, data) {\n    if (err) {\n      if (err.statusCode && err.statusCode === 404) {\n        callback({ ErrorStatus: SourceKey + ' Not Exist' });\n      } else {\n        callback(err);\n      }\n      return;\n    }\n\n    FileSize = params.FileSize = data.headers['content-length'];\n    if (FileSize === undefined || !FileSize) {\n      callback({ error: 'get Content-Length error, please add \"Content-Length\" to CORS ExposeHeader setting.' });\n      return;\n    }\n\n    _onProgress3 = util.throttleOnProgress.call(self, FileSize, params.onProgress);\n\n    // 开始上传\n    if (FileSize <= CopySliceSize) {\n      if (!params.Headers['x-cos-metadata-directive']) {\n        params.Headers['x-cos-metadata-directive'] = 'Copy';\n      }\n      self.putObjectCopy(params, function (err, data) {\n        if (err) {\n          _onProgress3(null, true);\n          return callback(err);\n        }\n        _onProgress3({ loaded: FileSize, total: FileSize }, true);\n        callback(err, data);\n      });\n    } else {\n      var resHeaders = data.headers;\n      var SourceHeaders = {\n        'Cache-Control': resHeaders['cache-control'],\n        'Content-Disposition': resHeaders['content-disposition'],\n        'Content-Encoding': resHeaders['content-encoding'],\n        'Content-Type': resHeaders['content-type'],\n        'Expires': resHeaders['expires'],\n        'x-cos-storage-class': resHeaders['x-cos-storage-class'] };\n\n      util.each(resHeaders, function (v, k) {\n        var metaPrefix = 'x-cos-meta-';\n        if (k.indexOf(metaPrefix) === 0 && k.length > metaPrefix.length) {\n          SourceHeaders[k] = v;\n        }\n      });\n      ep.emit('get_file_size_finish', SourceHeaders);\n    }\n  });\n}\n\n// 复制指定分片\nfunction copySliceItem(params, callback) {\n  var TaskId = params.TaskId;\n  var Bucket = params.Bucket;\n  var Region = params.Region;\n  var Key = params.Key;\n  var CopySource = params.CopySource;\n  var UploadId = params.UploadId;\n  var PartNumber = params.PartNumber * 1;\n  var CopySourceRange = params.CopySourceRange;\n\n  var ChunkRetryTimes = this.options.ChunkRetryTimes + 1;\n  var self = this;\n\n  Async.retry(ChunkRetryTimes, function (tryCallback) {\n    self.uploadPartCopy({\n      TaskId: TaskId,\n      Bucket: Bucket,\n      Region: Region,\n      Key: Key,\n      CopySource: CopySource,\n      UploadId: UploadId,\n      PartNumber: PartNumber,\n      CopySourceRange: CopySourceRange,\n      onProgress: params.onProgress },\n    function (err, data) {\n      tryCallback(err || null, data);\n    });\n  }, function (err, data) {\n    return callback(err, data);\n  });\n}\n\n\nvar API_MAP = {\n  sliceUploadFile: sliceUploadFile,\n  abortUploadTask: abortUploadTask,\n  uploadFiles: uploadFiles,\n  sliceCopyFile: sliceCopyFile };\n\n\nmodule.exports.init = function (COS, task) {\n  task.transferToTaskMethod(API_MAP, 'sliceUploadFile');\n  util.each(API_MAP, function (fn, apiName) {\n    COS.prototype[apiName] = util.apiWrapper(apiName, fn);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/*!*********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/cos-js-sdk-v5/src/async.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var eachLimit = function eachLimit(arr, limit, iterator, callback) {\n  callback = callback || function () {};\n  if (!arr.length || limit <= 0) {\n    return callback();\n  }\n\n  var completed = 0;\n  var started = 0;\n  var running = 0;\n\n  (function replenish() {\n    if (completed >= arr.length) {\n      return callback();\n    }\n\n    while (running < limit && started < arr.length) {\n      started += 1;\n      running += 1;\n      iterator(arr[started - 1], function (err) {\n\n        if (err) {\n          callback(err);\n          callback = function callback() {};\n        } else {\n          completed += 1;\n          running -= 1;\n          if (completed >= arr.length) {\n            callback();\n          } else {\n            replenish();\n          }\n        }\n      });\n    }\n  })();\n};\n\nvar retry = function retry(times, iterator, callback) {\n  var next = function next(index) {\n    iterator(function (err, data) {\n      if (err && index < times) {\n        next(index + 1);\n      } else {\n        callback(err, data);\n      }\n    });\n  };\n  if (times < 1) {\n    callback();\n  } else {\n    next(1);\n  }\n};\n\nvar async = {\n  eachLimit: eachLimit,\n  retry: retry };\n\n\nmodule.exports = async;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29zLWpzLXNkay12NS9zcmMvYXN5bmMuanMiXSwibmFtZXMiOlsiZWFjaExpbWl0IiwiYXJyIiwibGltaXQiLCJpdGVyYXRvciIsImNhbGxiYWNrIiwibGVuZ3RoIiwiY29tcGxldGVkIiwic3RhcnRlZCIsInJ1bm5pbmciLCJyZXBsZW5pc2giLCJlcnIiLCJyZXRyeSIsInRpbWVzIiwibmV4dCIsImluZGV4IiwiZGF0YSIsImFzeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUMsR0FBVixFQUFlQyxLQUFmLEVBQXNCQyxRQUF0QixFQUFnQ0MsUUFBaEMsRUFBMEM7QUFDdERBLFVBQVEsR0FBR0EsUUFBUSxJQUFJLFlBQVksQ0FBRSxDQUFyQztBQUNBLE1BQUksQ0FBQ0gsR0FBRyxDQUFDSSxNQUFMLElBQWVILEtBQUssSUFBSSxDQUE1QixFQUErQjtBQUMzQixXQUFPRSxRQUFRLEVBQWY7QUFDSDs7QUFFRCxNQUFJRSxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxNQUFJQyxPQUFPLEdBQUcsQ0FBZDtBQUNBLE1BQUlDLE9BQU8sR0FBRyxDQUFkOztBQUVBLEdBQUMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQixRQUFJSCxTQUFTLElBQUlMLEdBQUcsQ0FBQ0ksTUFBckIsRUFBNkI7QUFDekIsYUFBT0QsUUFBUSxFQUFmO0FBQ0g7O0FBRUQsV0FBT0ksT0FBTyxHQUFHTixLQUFWLElBQW1CSyxPQUFPLEdBQUdOLEdBQUcsQ0FBQ0ksTUFBeEMsRUFBZ0Q7QUFDNUNFLGFBQU8sSUFBSSxDQUFYO0FBQ0FDLGFBQU8sSUFBSSxDQUFYO0FBQ0FMLGNBQVEsQ0FBQ0YsR0FBRyxDQUFDTSxPQUFPLEdBQUcsQ0FBWCxDQUFKLEVBQW1CLFVBQVVHLEdBQVYsRUFBZTs7QUFFdEMsWUFBSUEsR0FBSixFQUFTO0FBQ0xOLGtCQUFRLENBQUNNLEdBQUQsQ0FBUjtBQUNBTixrQkFBUSxHQUFHLG9CQUFZLENBQUUsQ0FBekI7QUFDSCxTQUhELE1BR087QUFDSEUsbUJBQVMsSUFBSSxDQUFiO0FBQ0FFLGlCQUFPLElBQUksQ0FBWDtBQUNBLGNBQUlGLFNBQVMsSUFBSUwsR0FBRyxDQUFDSSxNQUFyQixFQUE2QjtBQUN6QkQsb0JBQVE7QUFDWCxXQUZELE1BRU87QUFDSEsscUJBQVM7QUFDWjtBQUNKO0FBQ0osT0FkTyxDQUFSO0FBZUg7QUFDSixHQXhCRDtBQXlCSCxDQW5DRDs7QUFxQ0EsSUFBSUUsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBVUMsS0FBVixFQUFpQlQsUUFBakIsRUFBMkJDLFFBQTNCLEVBQXFDO0FBQzdDLE1BQUlTLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVVDLEtBQVYsRUFBaUI7QUFDeEJYLFlBQVEsQ0FBQyxVQUFVTyxHQUFWLEVBQWVLLElBQWYsRUFBcUI7QUFDMUIsVUFBSUwsR0FBRyxJQUFJSSxLQUFLLEdBQUdGLEtBQW5CLEVBQTBCO0FBQ3RCQyxZQUFJLENBQUNDLEtBQUssR0FBRyxDQUFULENBQUo7QUFDSCxPQUZELE1BRU87QUFDSFYsZ0JBQVEsQ0FBQ00sR0FBRCxFQUFNSyxJQUFOLENBQVI7QUFDSDtBQUNKLEtBTk8sQ0FBUjtBQU9ILEdBUkQ7QUFTQSxNQUFJSCxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ1hSLFlBQVE7QUFDWCxHQUZELE1BRU87QUFDSFMsUUFBSSxDQUFDLENBQUQsQ0FBSjtBQUNIO0FBQ0osQ0FmRDs7QUFpQkEsSUFBSUcsS0FBSyxHQUFHO0FBQ1JoQixXQUFTLEVBQUVBLFNBREg7QUFFUlcsT0FBSyxFQUFFQSxLQUZDLEVBQVo7OztBQUtBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLEtBQWpCIiwiZmlsZSI6IjM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGVhY2hMaW1pdCA9IGZ1bmN0aW9uIChhcnIsIGxpbWl0LCBpdGVyYXRvciwgY2FsbGJhY2spIHtcclxuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XHJcbiAgICBpZiAoIWFyci5sZW5ndGggfHwgbGltaXQgPD0gMCkge1xyXG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBjb21wbGV0ZWQgPSAwO1xyXG4gICAgdmFyIHN0YXJ0ZWQgPSAwO1xyXG4gICAgdmFyIHJ1bm5pbmcgPSAwO1xyXG5cclxuICAgIChmdW5jdGlvbiByZXBsZW5pc2ggKCkge1xyXG4gICAgICAgIGlmIChjb21wbGV0ZWQgPj0gYXJyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChydW5uaW5nIDwgbGltaXQgJiYgc3RhcnRlZCA8IGFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgc3RhcnRlZCArPSAxO1xyXG4gICAgICAgICAgICBydW5uaW5nICs9IDE7XHJcbiAgICAgICAgICAgIGl0ZXJhdG9yKGFycltzdGFydGVkIC0gMV0sIGZ1bmN0aW9uIChlcnIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGVuaXNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG59O1xyXG5cclxudmFyIHJldHJ5ID0gZnVuY3Rpb24gKHRpbWVzLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcclxuICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZXJyICYmIGluZGV4IDwgdGltZXMpIHtcclxuICAgICAgICAgICAgICAgIG5leHQoaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBpZiAodGltZXMgPCAxKSB7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV4dCgxKTtcclxuICAgIH1cclxufTtcclxuXHJcbnZhciBhc3luYyA9IHtcclxuICAgIGVhY2hMaW1pdDogZWFjaExpbWl0LFxyXG4gICAgcmV0cnk6IHJldHJ5XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/*!***********************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/utils/GenerateTestUserSig.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /*eslint-disable*/\n/*\r\n                                                                                                                         * Module:   GenerateTestUserSig\r\n                                                                                                                         *\r\n                                                                                                                         * Function: 用于生成测试用的 UserSig，UserSig 是腾讯云为其云服务设计的一种安全保护签名。\r\n                                                                                                                         *           其计算方法是对 SDKAppID、UserID 和 EXPIRETIME 进行加密，加密算法为 HMAC-SHA256。\r\n                                                                                                                         *\r\n                                                                                                                         * Attention: 请不要将如下代码发布到您的线上正式版本的 App 中，原因如下：\r\n                                                                                                                         *\r\n                                                                                                                         *            本文件中的代码虽然能够正确计算出 UserSig，但仅适合快速调通 SDK 的基本功能，不适合线上产品，\r\n                                                                                                                         *            这是因为客户端代码中的 SECRETKEY 很容易被反编译逆向破解，尤其是 Web 端的代码被破解的难度几乎为零。\r\n                                                                                                                         *            一旦您的密钥泄露，攻击者就可以计算出正确的 UserSig 来盗用您的腾讯云流量。\r\n                                                                                                                         *\r\n                                                                                                                         *            正确的做法是将 UserSig 的计算代码和加密密钥放在您的业务服务器上，然后由 App 按需向您的服务器获取实时算出的 UserSig。\r\n                                                                                                                         *            由于破解服务器的成本要高于破解客户端 App，所以服务器计算的方案能够更好地保护您的加密密钥。\r\n                                                                                                                         *\r\n                                                                                                                         * Reference：https://cloud.tencent.com/document/product/647/17275#Server\r\n                                                                                                                         */\nfunction genTestUserSig(userID) {\n  /**\r\n                                  * 腾讯云 SDKAppId，需要替换为您自己账号下的 SDKAppId。\r\n                                  *\r\n                                  * 进入腾讯云实时音视频[控制台](https://console.cloud.tencent.com/rav ) 创建应用，即可看到 SDKAppId，\r\n                                  * 它是腾讯云用于区分客户的唯一标识。\r\n                                  */\n  var SDKAPPID = 1400387972;\n\n  /**\r\n                              * 签名过期时间，建议不要设置的过短\r\n                              * <p>\r\n                              * 时间单位：秒\r\n                              * 默认时间：7 x 24 x 60 x 60 = 604800 = 7 天\r\n                              */\n  var EXPIRETIME = 604800;\n\n  /**\r\n                            * 计算签名用的加密密钥，获取步骤如下：\r\n                            *\r\n                            * step1. 进入腾讯云实时音视频[控制台](https://console.cloud.tencent.com/rav )，如果还没有应用就创建一个，\r\n                            * step2. 单击“应用配置”进入基础配置页面，并进一步找到“帐号体系集成”部分。\r\n                            * step3. 点击“查看密钥”按钮，就可以看到计算 UserSig 使用的加密的密钥了，请将其拷贝并复制到如下的变量中\r\n                            *\r\n                            * 注意：该方案仅适用于调试Demo，正式上线前请将 UserSig 计算代码和密钥迁移到您的后台服务器上，以避免加密密钥泄露导致的流量盗用。\r\n                            * 文档：https://cloud.tencent.com/document/product/647/17275#Server\r\n                            */\n  var SECRETKEY = '823df1ffd9b5107958674b435f6c726f95d43882b7e092e21f134db92f754e51';\n\n  // var generator = new window.LibGenerateTestUserSig(SDKAPPID, SECRETKEY, EXPIRETIME);\n  // var userSig = generator.genTestUserSig(userID);\n  return {\n    wo: 123\n    // SDKAppID: SDKAPPID,\n    // userSig: userSig\n  };\n}var _default =\n\ngenTestUserSig;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvR2VuZXJhdGVUZXN0VXNlclNpZy5qcyJdLCJuYW1lcyI6WyJnZW5UZXN0VXNlclNpZyIsInVzZXJJRCIsIlNES0FQUElEIiwiRVhQSVJFVElNRSIsIlNFQ1JFVEtFWSIsIndvIl0sIm1hcHBpbmdzIjoid0ZBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsU0FBU0EsY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDNUI7Ozs7OztBQU1BLE1BQUlDLFFBQVEsR0FBRyxVQUFmOztBQUVBOzs7Ozs7QUFNQSxNQUFJQyxVQUFVLEdBQUcsTUFBakI7O0FBRUE7Ozs7Ozs7Ozs7QUFVQSxNQUFJQyxTQUFTLEdBQUcsa0VBQWhCOztBQUVBO0FBQ0E7QUFDQSxTQUFPO0FBQ1RDLE1BQUUsRUFBQztBQUNHO0FBQ0E7QUFIRyxHQUFQO0FBS0gsQzs7QUFFY0wsYyIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50LWRpc2FibGUqL1xyXG4vKlxyXG4gKiBNb2R1bGU6ICAgR2VuZXJhdGVUZXN0VXNlclNpZ1xyXG4gKlxyXG4gKiBGdW5jdGlvbjog55So5LqO55Sf5oiQ5rWL6K+V55So55qEIFVzZXJTaWfvvIxVc2VyU2lnIOaYr+iFvuiur+S6keS4uuWFtuS6keacjeWKoeiuvuiuoeeahOS4gOenjeWuieWFqOS/neaKpOetvuWQjeOAglxyXG4gKiAgICAgICAgICAg5YW26K6h566X5pa55rOV5piv5a+5IFNES0FwcElE44CBVXNlcklEIOWSjCBFWFBJUkVUSU1FIOi/m+ihjOWKoOWvhu+8jOWKoOWvhueul+azleS4uiBITUFDLVNIQTI1NuOAglxyXG4gKlxyXG4gKiBBdHRlbnRpb246IOivt+S4jeimgeWwhuWmguS4i+S7o+eggeWPkeW4g+WIsOaCqOeahOe6v+S4iuato+W8j+eJiOacrOeahCBBcHAg5Lit77yM5Y6f5Zug5aaC5LiL77yaXHJcbiAqXHJcbiAqICAgICAgICAgICAg5pys5paH5Lu25Lit55qE5Luj56CB6Jm954S26IO95aSf5q2j56Gu6K6h566X5Ye6IFVzZXJTaWfvvIzkvYbku4XpgILlkIjlv6vpgJ/osIPpgJogU0RLIOeahOWfuuacrOWKn+iDve+8jOS4jemAguWQiOe6v+S4iuS6p+WTge+8jFxyXG4gKiAgICAgICAgICAgIOi/meaYr+WboOS4uuWuouaIt+err+S7o+eggeS4reeahCBTRUNSRVRLRVkg5b6I5a655piT6KKr5Y+N57yW6K+R6YCG5ZCR56C06Kej77yM5bCk5YW25pivIFdlYiDnq6/nmoTku6PnoIHooqvnoLTop6PnmoTpmr7luqblh6DkuY7kuLrpm7bjgIJcclxuICogICAgICAgICAgICDkuIDml6bmgqjnmoTlr4bpkqXms4TpnLLvvIzmlLvlh7vogIXlsLHlj6/ku6XorqHnrpflh7rmraPnoa7nmoQgVXNlclNpZyDmnaXnm5fnlKjmgqjnmoTohb7orq/kupHmtYHph4/jgIJcclxuICpcclxuICogICAgICAgICAgICDmraPnoa7nmoTlgZrms5XmmK/lsIYgVXNlclNpZyDnmoTorqHnrpfku6PnoIHlkozliqDlr4blr4bpkqXmlL7lnKjmgqjnmoTkuJrliqHmnI3liqHlmajkuIrvvIznhLblkI7nlLEgQXBwIOaMiemcgOWQkeaCqOeahOacjeWKoeWZqOiOt+WPluWunuaXtueul+WHuueahCBVc2VyU2ln44CCXHJcbiAqICAgICAgICAgICAg55Sx5LqO56C06Kej5pyN5Yqh5Zmo55qE5oiQ5pys6KaB6auY5LqO56C06Kej5a6i5oi356uvIEFwcO+8jOaJgOS7peacjeWKoeWZqOiuoeeul+eahOaWueahiOiDveWkn+abtOWlveWcsOS/neaKpOaCqOeahOWKoOWvhuWvhumSpeOAglxyXG4gKlxyXG4gKiBSZWZlcmVuY2XvvJpodHRwczovL2Nsb3VkLnRlbmNlbnQuY29tL2RvY3VtZW50L3Byb2R1Y3QvNjQ3LzE3Mjc1I1NlcnZlclxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuVGVzdFVzZXJTaWcodXNlcklEKSB7XHJcbiAgICAvKipcclxuICAgICAqIOiFvuiur+S6kSBTREtBcHBJZO+8jOmcgOimgeabv+aNouS4uuaCqOiHquW3sei0puWPt+S4i+eahCBTREtBcHBJZOOAglxyXG4gICAgICpcclxuICAgICAqIOi/m+WFpeiFvuiur+S6keWunuaXtumfs+inhumikVvmjqfliLblj7BdKGh0dHBzOi8vY29uc29sZS5jbG91ZC50ZW5jZW50LmNvbS9yYXYgKSDliJvlu7rlupTnlKjvvIzljbPlj6/nnIvliLAgU0RLQXBwSWTvvIxcclxuICAgICAqIOWug+aYr+iFvuiur+S6keeUqOS6juWMuuWIhuWuouaIt+eahOWUr+S4gOagh+ivhuOAglxyXG4gICAgICovXHJcbiAgICB2YXIgU0RLQVBQSUQgPSAxNDAwMzg3OTcyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog562+5ZCN6L+H5pyf5pe26Ze077yM5bu66K6u5LiN6KaB6K6+572u55qE6L+H55+tXHJcbiAgICAgKiA8cD5cclxuICAgICAqIOaXtumXtOWNleS9je+8muenklxyXG4gICAgICog6buY6K6k5pe26Ze077yaNyB4IDI0IHggNjAgeCA2MCA9IDYwNDgwMCA9IDcg5aSpXHJcbiAgICAgKi9cclxuICAgIHZhciBFWFBJUkVUSU1FID0gNjA0ODAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6h566X562+5ZCN55So55qE5Yqg5a+G5a+G6ZKl77yM6I635Y+W5q2l6aqk5aaC5LiL77yaXHJcbiAgICAgKlxyXG4gICAgICogc3RlcDEuIOi/m+WFpeiFvuiur+S6keWunuaXtumfs+inhumikVvmjqfliLblj7BdKGh0dHBzOi8vY29uc29sZS5jbG91ZC50ZW5jZW50LmNvbS9yYXYgKe+8jOWmguaenOi/mOayoeacieW6lOeUqOWwseWIm+W7uuS4gOS4qu+8jFxyXG4gICAgICogc3RlcDIuIOWNleWHu+KAnOW6lOeUqOmFjee9ruKAnei/m+WFpeWfuuehgOmFjee9rumhtemdou+8jOW5tui/m+S4gOatpeaJvuWIsOKAnOW4kOWPt+S9k+ezu+mbhuaIkOKAnemDqOWIhuOAglxyXG4gICAgICogc3RlcDMuIOeCueWHu+KAnOafpeeci+WvhumSpeKAneaMiemSru+8jOWwseWPr+S7peeci+WIsOiuoeeulyBVc2VyU2lnIOS9v+eUqOeahOWKoOWvhueahOWvhumSpeS6hu+8jOivt+WwhuWFtuaLt+i0neW5tuWkjeWItuWIsOWmguS4i+eahOWPmOmHj+S4rVxyXG4gICAgICpcclxuICAgICAqIOazqOaEj++8muivpeaWueahiOS7hemAgueUqOS6juiwg+ivlURlbW/vvIzmraPlvI/kuIrnur/liY3or7flsIYgVXNlclNpZyDorqHnrpfku6PnoIHlkozlr4bpkqXov4Hnp7vliLDmgqjnmoTlkI7lj7DmnI3liqHlmajkuIrvvIzku6Xpgb/lhY3liqDlr4blr4bpkqXms4TpnLLlr7zoh7TnmoTmtYHph4/nm5fnlKjjgIJcclxuICAgICAqIOaWh+aho++8mmh0dHBzOi8vY2xvdWQudGVuY2VudC5jb20vZG9jdW1lbnQvcHJvZHVjdC82NDcvMTcyNzUjU2VydmVyXHJcbiAgICAgKi9cclxuICAgIHZhciBTRUNSRVRLRVkgPSAnODIzZGYxZmZkOWI1MTA3OTU4Njc0YjQzNWY2YzcyNmY5NWQ0Mzg4MmI3ZTA5MmUyMWYxMzRkYjkyZjc1NGU1MSc7XHJcblxyXG4gICAgLy8gdmFyIGdlbmVyYXRvciA9IG5ldyB3aW5kb3cuTGliR2VuZXJhdGVUZXN0VXNlclNpZyhTREtBUFBJRCwgU0VDUkVUS0VZLCBFWFBJUkVUSU1FKTtcclxuICAgIC8vIHZhciB1c2VyU2lnID0gZ2VuZXJhdG9yLmdlblRlc3RVc2VyU2lnKHVzZXJJRCk7XHJcbiAgICByZXR1cm4ge1xyXG5cdFx0d286MTIzXHJcbiAgICAgICAgLy8gU0RLQXBwSUQ6IFNES0FQUElELFxyXG4gICAgICAgIC8vIHVzZXJTaWc6IHVzZXJTaWdcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdlblRlc3RVc2VyU2lnOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/*!********************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/utils/ajax.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar baseUrl = \"https://unidemo.dcloud.net.cn/\"; // 请求地址\nvar $ajax = {\n  get: function get(_ref)\n\n\n\n  {var url = _ref.url,param = _ref.param,header = _ref.header;\n    return new Promise(function (resolve, reject) {\n      uni.request({\n        url: baseUrl + url,\n        data: param,\n        method: \"GET\",\n        success: function success(res) {\n          if (res.statusCode !== 200) {\n            reject(res);\n          } else {\n            resolve(res);\n          }\n        },\n        fail: function fail(err) {\n          reject(err);\n        } });\n\n    });\n  },\n  post: function post(_ref2)\n\n\n\n  {var url = _ref2.url,data = _ref2.data,header = _ref2.header;\n    return new Promise(function (resolve, reject) {\n      uni.request({\n        url: baseUrl + url,\n        data: data,\n        method: \"POST\",\n        // header: {\n        // \t'Content-Type': 'application/x-www-form-urlencoded'\n        // },\n        success: function success(res) {\n          if (res.statusCode !== 200) {\n            reject(res);\n          } else {\n            resolve(res);\n          }\n        },\n        fail: function fail(err) {\n          reject(err);\n        } });\n\n    });\n  },\n  // postJSON: function({\n  // \turl,\n  // \tdata,\n  // \theader\n  // }) {\n  // \treturn new Promise(function(resolve, reject) {\n  // \t\tuni.request({\n  // \t\t\turl: baseUrl + url,\n  // \t\t\tdata: data,\n  // \t\t\tmethod: \"POST\",\n  // \t\t\theader: {\n  // \t\t\t\t'Content-Type': 'application/json;charset=UTF-8'\n  // \t\t\t},\n  // \t\t\tsuccess: function(res) {\n  // \t\t\t\tif (res.statusCode !== 200) {\n  // \t\t\t\t\treject(res)\n  // \t\t\t\t} else {\n  // \t\t\t\t\tresolve(res);\n  // \t\t\t\t}\n  // \t\t\t},\n  // \t\t\tfail: function(err) {\n  // \t\t\t\treject(err)\n  // \t\t\t}\n  // \t\t})\n  // \t})\n  // },\n  upImg: function upImg(_ref3)\n\n\n  {var url = _ref3.url,imgUrl = _ref3.imgUrl;\n    return new Promise(function (resolve, reject) {\n      uni.uploadFile({\n        url: \"baseUrl\" + url,\n        filePath: imgUrl,\n        name: 'file',\n        success: function success(uploadFileRes) {\n          resolve(uploadFileRes);\n        },\n\n        fail: function fail(err) {\n          reject(err);\n        } });\n\n    });\n  } };var _default =\n\n$ajax;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvYWpheC5qcyJdLCJuYW1lcyI6WyJiYXNlVXJsIiwiJGFqYXgiLCJnZXQiLCJ1cmwiLCJwYXJhbSIsImhlYWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5pIiwicmVxdWVzdCIsImRhdGEiLCJtZXRob2QiLCJzdWNjZXNzIiwicmVzIiwic3RhdHVzQ29kZSIsImZhaWwiLCJlcnIiLCJwb3N0IiwidXBJbWciLCJpbWdVcmwiLCJ1cGxvYWRGaWxlIiwiZmlsZVBhdGgiLCJuYW1lIiwidXBsb2FkRmlsZVJlcyJdLCJtYXBwaW5ncyI6IjtBQUNBLElBQU1BLE9BQU8sR0FBRyxnQ0FBaEIsQyxDQUFtRDtBQUNuRCxJQUFNQyxLQUFLLEdBQUc7QUFDWkMsS0FBRyxFQUFFOzs7O0FBSUYsT0FIRkMsR0FHRSxRQUhGQSxHQUdFLENBRkZDLEtBRUUsUUFGRkEsS0FFRSxDQURGQyxNQUNFLFFBREZBLE1BQ0U7QUFDRixXQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUM1Q0MsU0FBRyxDQUFDQyxPQUFKLENBQVk7QUFDWFAsV0FBRyxFQUFFSCxPQUFPLEdBQUdHLEdBREo7QUFFWFEsWUFBSSxFQUFFUCxLQUZLO0FBR1hRLGNBQU0sRUFBRSxLQUhHO0FBSVhDLGVBQU8sRUFBRSxpQkFBU0MsR0FBVCxFQUFjO0FBQ3RCLGNBQUlBLEdBQUcsQ0FBQ0MsVUFBSixLQUFtQixHQUF2QixFQUE0QjtBQUMzQlAsa0JBQU0sQ0FBQ00sR0FBRCxDQUFOO0FBQ0EsV0FGRCxNQUVPO0FBQ05QLG1CQUFPLENBQUNPLEdBQUQsQ0FBUDtBQUNBO0FBQ0QsU0FWVTtBQVdYRSxZQUFJLEVBQUUsY0FBU0MsR0FBVCxFQUFjO0FBQ25CVCxnQkFBTSxDQUFDUyxHQUFELENBQU47QUFDQSxTQWJVLEVBQVo7O0FBZUEsS0FoQk0sQ0FBUDtBQWlCQSxHQXZCVztBQXdCWkMsTUFBSSxFQUFFOzs7O0FBSUgsT0FIRmYsR0FHRSxTQUhGQSxHQUdFLENBRkZRLElBRUUsU0FGRkEsSUFFRSxDQURGTixNQUNFLFNBREZBLE1BQ0U7QUFDRixXQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUM1Q0MsU0FBRyxDQUFDQyxPQUFKLENBQVk7QUFDWFAsV0FBRyxFQUFFSCxPQUFPLEdBQUdHLEdBREo7QUFFWFEsWUFBSSxFQUFFQSxJQUZLO0FBR1hDLGNBQU0sRUFBRSxNQUhHO0FBSVg7QUFDQTtBQUNBO0FBQ0FDLGVBQU8sRUFBRSxpQkFBU0MsR0FBVCxFQUFjO0FBQ3RCLGNBQUlBLEdBQUcsQ0FBQ0MsVUFBSixLQUFtQixHQUF2QixFQUE0QjtBQUMzQlAsa0JBQU0sQ0FBQ00sR0FBRCxDQUFOO0FBQ0EsV0FGRCxNQUVPO0FBQ05QLG1CQUFPLENBQUNPLEdBQUQsQ0FBUDtBQUNBO0FBQ0QsU0FiVTtBQWNYRSxZQUFJLEVBQUUsY0FBU0MsR0FBVCxFQUFjO0FBQ25CVCxnQkFBTSxDQUFDUyxHQUFELENBQU47QUFDQSxTQWhCVSxFQUFaOztBQWtCQSxLQW5CTSxDQUFQO0FBb0JBLEdBakRXO0FBa0RaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUUsT0FBSyxFQUFFOzs7QUFHSixPQUZGaEIsR0FFRSxTQUZGQSxHQUVFLENBREZpQixNQUNFLFNBREZBLE1BQ0U7QUFDRixXQUFPLElBQUlkLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUM1Q0MsU0FBRyxDQUFDWSxVQUFKLENBQWU7QUFDZGxCLFdBQUcsRUFBRSxZQUFZQSxHQURIO0FBRWRtQixnQkFBUSxFQUFFRixNQUZJO0FBR2RHLFlBQUksRUFBRSxNQUhRO0FBSWRWLGVBQU8sRUFBRSxpQkFBU1csYUFBVCxFQUF3QjtBQUNoQ2pCLGlCQUFPLENBQUNpQixhQUFELENBQVA7QUFDQSxTQU5hOztBQVFkUixZQUFJLEVBQUUsY0FBU0MsR0FBVCxFQUFjO0FBQ25CVCxnQkFBTSxDQUFDUyxHQUFELENBQU47QUFDQSxTQVZhLEVBQWY7O0FBWUEsS0FiTSxDQUFQO0FBY0EsR0E5RlcsRUFBZCxDOztBQWdHZWhCLEsiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuY29uc3QgYmFzZVVybCA9IFwiaHR0cHM6Ly91bmlkZW1vLmRjbG91ZC5uZXQuY24vXCI7ICAvLyDor7fmsYLlnLDlnYBcclxuY29uc3QgJGFqYXggPSB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uKHtcclxuXHRcdFx0dXJsLFxyXG5cdFx0XHRwYXJhbSxcclxuXHRcdFx0aGVhZGVyXHJcblx0XHR9KSB7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHRcdFx0XHR1bmkucmVxdWVzdCh7XHJcblx0XHRcdFx0XHR1cmw6IGJhc2VVcmwgKyB1cmwsXHJcblx0XHRcdFx0XHRkYXRhOiBwYXJhbSxcclxuXHRcdFx0XHRcdG1ldGhvZDogXCJHRVRcIixcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG5cdFx0XHRcdFx0XHRcdHJlamVjdChyZXMpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUocmVzKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGZhaWw6IGZ1bmN0aW9uKGVycikge1xyXG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KVxyXG5cdFx0XHR9KVxyXG5cdFx0fSxcclxuXHRcdHBvc3Q6IGZ1bmN0aW9uKHtcclxuXHRcdFx0dXJsLFxyXG5cdFx0XHRkYXRhLFxyXG5cdFx0XHRoZWFkZXJcclxuXHRcdH0pIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cdFx0XHRcdHVuaS5yZXF1ZXN0KHtcclxuXHRcdFx0XHRcdHVybDogYmFzZVVybCArIHVybCxcclxuXHRcdFx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxyXG5cdFx0XHRcdFx0Ly8gaGVhZGVyOiB7XHJcblx0XHRcdFx0XHQvLyBcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xyXG5cdFx0XHRcdFx0Ly8gfSxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG5cdFx0XHRcdFx0XHRcdHJlamVjdChyZXMpXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShyZXMpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0ZmFpbDogZnVuY3Rpb24oZXJyKSB7XHJcblx0XHRcdFx0XHRcdHJlamVjdChlcnIpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSlcclxuXHRcdH0sXHJcblx0XHQvLyBwb3N0SlNPTjogZnVuY3Rpb24oe1xyXG5cdFx0Ly8gXHR1cmwsXHJcblx0XHQvLyBcdGRhdGEsXHJcblx0XHQvLyBcdGhlYWRlclxyXG5cdFx0Ly8gfSkge1xyXG5cdFx0Ly8gXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblx0XHQvLyBcdFx0dW5pLnJlcXVlc3Qoe1xyXG5cdFx0Ly8gXHRcdFx0dXJsOiBiYXNlVXJsICsgdXJsLFxyXG5cdFx0Ly8gXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdC8vIFx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXHJcblx0XHQvLyBcdFx0XHRoZWFkZXI6IHtcclxuXHRcdC8vIFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnXHJcblx0XHQvLyBcdFx0XHR9LFxyXG5cdFx0Ly8gXHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XHJcblx0XHQvLyBcdFx0XHRcdGlmIChyZXMuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XHJcblx0XHQvLyBcdFx0XHRcdFx0cmVqZWN0KHJlcylcclxuXHRcdC8vIFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdC8vIFx0XHRcdFx0XHRyZXNvbHZlKHJlcyk7XHJcblx0XHQvLyBcdFx0XHRcdH1cclxuXHRcdC8vIFx0XHRcdH0sXHJcblx0XHQvLyBcdFx0XHRmYWlsOiBmdW5jdGlvbihlcnIpIHtcclxuXHRcdC8vIFx0XHRcdFx0cmVqZWN0KGVycilcclxuXHRcdC8vIFx0XHRcdH1cclxuXHRcdC8vIFx0XHR9KVxyXG5cdFx0Ly8gXHR9KVxyXG5cdFx0Ly8gfSxcclxuXHRcdHVwSW1nOiBmdW5jdGlvbih7XHJcblx0XHRcdHVybCxcclxuXHRcdFx0aW1nVXJsXHJcblx0XHR9KSB7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHRcdFx0XHR1bmkudXBsb2FkRmlsZSh7XHJcblx0XHRcdFx0XHR1cmw6IFwiYmFzZVVybFwiICsgdXJsLFxyXG5cdFx0XHRcdFx0ZmlsZVBhdGg6IGltZ1VybCxcclxuXHRcdFx0XHRcdG5hbWU6ICdmaWxlJyxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKHVwbG9hZEZpbGVSZXMpIHtcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZSh1cGxvYWRGaWxlUmVzKTtcclxuXHRcdFx0XHRcdH0sXHJcbiBcclxuXHRcdFx0XHRcdGZhaWw6IGZ1bmN0aW9uKGVycikge1xyXG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0fVxyXG5cdH1cclxuZXhwb3J0IGRlZmF1bHQgJGFqYXg7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/*!**************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/App.vue ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 43);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDK007QUFDL00sZ0JBQWdCLHVOQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxccnVudGltZVxcXFxjb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgZmFsc2UsXG4gIGNvbXBvbmVudHMsXG4gIHJlbmRlcmpzXG4pXG5cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/*!***************************************************************************************!*\
  !*** C:/Users/Admin/Desktop/workfile/gitdown/weteam/App.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 44);\n/* harmony import */ var _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_D_workdown_HBuilderX_2_7_14_20200618_full_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXNzQixDQUFnQixpdUJBQUcsRUFBQyIsImZpbGUiOiI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS02LTEhRDpcXFxcd29ya2Rvd25cXFxcSEJ1aWxkZXJYLjIuNy4xNC4yMDIwMDYxOC5mdWxsXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUQ6XFxcXHdvcmtkb3duXFxcXEhCdWlsZGVyWC4yLjcuMTQuMjAyMDA2MTguZnVsbFxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLWFwcC1sb2FkZXJcXFxcdXNpbmctY29tcG9uZW50cy5qcyFEOlxcXFx3b3JrZG93blxcXFxIQnVpbGRlclguMi43LjE0LjIwMjAwNjE4LmZ1bGxcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Admin/Desktop/workfile/gitdown/weteam/App.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:7\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:10\");\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJvbkxhdW5jaCIsIm9uU2hvdyIsIm9uSGlkZSJdLCJtYXBwaW5ncyI6IjtBQUNlO0FBQ2RBLFVBQVEsRUFBRSxvQkFBVztBQUNwQixpQkFBWSxZQUFaO0FBQ0EsR0FIYTtBQUlkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBTmE7QUFPZEMsUUFBTSxFQUFFLGtCQUFXO0FBQ2xCLGlCQUFZLFVBQVo7QUFDQSxHQVRhLEUiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdG9uTGF1bmNoOiBmdW5jdGlvbigpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdBcHAgTGF1bmNoJyk7XHJcblx0fSxcclxuXHRvblNob3c6IGZ1bmN0aW9uKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ0FwcCBTaG93Jyk7XHJcblx0fSxcclxuXHRvbkhpZGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ0FwcCBIaWRlJyk7XHJcblx0fVxyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n");

/***/ })
],[[0,"app-config"]]]);